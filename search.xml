<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AMD显卡掉驱动问题处理</title>
    <url>/2024/08/26/AMD%E6%98%BE%E5%8D%A1%E6%8E%89%E9%A9%B1%E5%8A%A8%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>最近在升级主机时遇到了掉显卡驱动的问题，由原来的RX 590GME 升级到RX 6750GRE 在更换显卡后进入系统卸载了590的旧驱动 但是没有重启就直接安装了6750的驱动 打开游戏没有任何报错 但是AMD显卡软件闪退 后来在b站看了一些解决方案，可能是之前显卡驱动没有卸载干净导致的 在使用了DDU完全卸载驱动后重启 重新安装驱动发现已经正常使用了。</p>
<span id="more"></span>

<h2 id="下载DDU"><a href="#下载DDU" class="headerlink" title="下载DDU"></a>下载DDU</h2><p>官方下载连接：<a href="https://www.wagnardsoft.com/forums/viewtopic.php?t=5016">https://www.wagnardsoft.com/forums/viewtopic.php?t=5016</a></p>
<h2 id="完全卸载显卡"><a href="#完全卸载显卡" class="headerlink" title="完全卸载显卡"></a>完全卸载显卡</h2><p>在右侧设备种类选择：显卡</p>
<p>设备供应商选择：AMD</p>
<p>点击左侧的 清除并重启 等待系统自动重启  在重启之前不要做任何操作</p>
<h2 id="重新安装显卡驱动"><a href="#重新安装显卡驱动" class="headerlink" title="重新安装显卡驱动"></a>重新安装显卡驱动</h2><p>到AMD官网下载最新驱动</p>
<p><a href="https://www.amd.com/zh-cn/support/downloads/previous-drivers.html/graphics/radeon-rx/radeon-rx-6000-series/amd-radeon-rx-6750-gre-10gb.html">https://www.amd.com/zh-cn/support/downloads/previous-drivers.html/graphics/radeon-rx/radeon-rx-6000-series/amd-radeon-rx-6750-gre-10gb.html</a></p>
<p>选择 Adrenalin 24.5.1 (WHQL Recommended) 下载安装即可，安装时可勾选恢复显卡出厂设置清除残留</p>
]]></content>
      <tags>
        <tag>amd</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/2021/06/03/Dockerfile/</url>
    <content><![CDATA[<p>首先要创建一个名为Dockerfile的普通的文件 然后在里面编辑命令</p>
<p>首先Dockerfile的命令有from，可以用来指定要导入的镜像，必须为第一个命令</p>
<span id="more"></span>

<h2 id="FROM：指定基础镜像，必须为第一个命令"><a href="#FROM：指定基础镜像，必须为第一个命令" class="headerlink" title="FROM：指定基础镜像，必须为第一个命令"></a><strong>FROM：指定基础镜像，必须为第一个命令</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
　　FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>
　　FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>:<span class="token operator">&lt;</span>tag<span class="token operator">></span>
　　FROM <span class="token operator">&lt;</span>image<span class="token operator">></span>@<span class="token operator">&lt;</span>digest<span class="token operator">></span>示例：　　FROM mysql:5.6注：　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像</code></pre>

<h2 id="MAINTAINER-维护者信息"><a href="#MAINTAINER-维护者信息" class="headerlink" title="MAINTAINER: 维护者信息"></a><strong>MAINTAINER: 维护者信息</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    MAINTAINER <span class="token operator">&lt;</span>name<span class="token operator">></span>
示例：
    MAINTAINER Jasper Xu
    MAINTAINER sorex@163.com
    MAINTAINER Jasper Xu <span class="token operator">&lt;</span>sorex@163.com<span class="token operator">></span></code></pre>

<h2 id="RUN：构建镜像时执行的命令"><a href="#RUN：构建镜像时执行的命令" class="headerlink" title="RUN：构建镜像时执行的命令"></a><strong>RUN：构建镜像时执行的命令</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：
shell执行
格式：
    RUN <span class="token operator">&lt;</span>command<span class="token operator">></span>
exec执行
格式：
    RUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span>
示例：
    RUN <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span>
    RUN apk update
    RUN <span class="token punctuation">[</span><span class="token string">"/etc/execfile"</span>, <span class="token string">"arg1"</span>, <span class="token string">"arg1"</span><span class="token punctuation">]</span>
注：　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache</code></pre>

<h2 id="ADD：将本地文件添加到容器中，tar类型文件会自动解压-网络压缩资源不会被解压-，可以访问网络资源，类似wget"><a href="#ADD：将本地文件添加到容器中，tar类型文件会自动解压-网络压缩资源不会被解压-，可以访问网络资源，类似wget" class="headerlink" title="ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget"></a><strong>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    ADD <span class="token operator">&lt;</span>src<span class="token operator">></span><span class="token punctuation">..</span>. <span class="token operator">&lt;</span>dest<span class="token operator">></span>
    ADD <span class="token punctuation">[</span><span class="token string">"&lt;src>"</span>,<span class="token punctuation">..</span>. <span class="token string">"&lt;dest>"</span><span class="token punctuation">]</span> 用于支持包含空格的路径
示例：
    ADD hom* /mydir/          <span class="token comment"># 添加所有以"hom"开头的文件</span>
    ADD hom?.txt /mydir/      <span class="token comment"># ? 替代一个单字符,例如："home.txt"</span>
    ADD <span class="token builtin class-name">test</span> relativeDir/     <span class="token comment"># 添加 "test" 到 `WORKDIR`/relativeDir/</span>
    ADD <span class="token builtin class-name">test</span> /absoluteDir/    <span class="token comment"># 添加 "test" 到 /absoluteDir/</span></code></pre>

<h2 id="COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源"><a href="#COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源" class="headerlink" title="COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源"></a><strong>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</strong></h2><h2 id="CMD：构建容器后调用，也就是在容器启动时才进行调用。"><a href="#CMD：构建容器后调用，也就是在容器启动时才进行调用。" class="headerlink" title="CMD：构建容器后调用，也就是在容器启动时才进行调用。"></a><strong>CMD：构建容器后调用，也就是在容器启动时才进行调用。</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    CMD <span class="token punctuation">[</span><span class="token string">"executable"</span>,<span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>执行可执行文件，优先<span class="token punctuation">)</span>
    CMD <span class="token punctuation">[</span><span class="token string">"param1"</span>,<span class="token string">"param2"</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数<span class="token punctuation">)</span>
    CMD <span class="token builtin class-name">command</span> param1 param2 <span class="token punctuation">(</span>执行shell内部命令<span class="token punctuation">)</span>
示例：
    CMD <span class="token builtin class-name">echo</span> <span class="token string">"This is a test."</span> <span class="token operator">|</span> <span class="token function">wc</span> -
    CMD <span class="token punctuation">[</span><span class="token string">"/usr/bin/wc"</span>,<span class="token string">"--help"</span><span class="token punctuation">]</span>注： 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</code></pre>

<h2 id="ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。"><a href="#ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。" class="headerlink" title="ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。"></a><strong>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"executable"</span>, <span class="token string">"param1"</span>, <span class="token string">"param2"</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>可执行文件, 优先<span class="token punctuation">)</span>
    ENTRYPOINT <span class="token builtin class-name">command</span> param1 param2 <span class="token punctuation">(</span>shell内部命令<span class="token punctuation">)</span>
示例：
    FROM ubuntu
    ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"top"</span>, <span class="token string">"-b"</span><span class="token punctuation">]</span>
    CMD <span class="token punctuation">[</span><span class="token string">"-c"</span><span class="token punctuation">]</span>注：　　　ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。</code></pre>

<h2 id="LABEL：用于为镜像添加元数据"><a href="#LABEL：用于为镜像添加元数据" class="headerlink" title="LABEL：用于为镜像添加元数据"></a><strong>LABEL：用于为镜像添加元数据</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    LABEL <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.
示例：
　　LABEL <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span> <span class="token assign-left variable">description</span><span class="token operator">=</span><span class="token string">"这是一个Web服务器"</span> <span class="token assign-left variable">by</span><span class="token operator">=</span><span class="token string">"IT笔录"</span>
注：
　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。</code></pre>

<h2 id="ENV：设置环境变量"><a href="#ENV：设置环境变量" class="headerlink" title="ENV：设置环境变量"></a><strong>ENV：设置环境变量</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：
    ENV <span class="token operator">&lt;</span>key<span class="token operator">></span> <span class="token operator">&lt;</span>value<span class="token operator">></span>  <span class="token comment">#&lt;key>之后的所有内容均会被视为其&lt;value>的组成部分，因此，一次只能设置一个变量</span>
    ENV <span class="token operator">&lt;</span>key<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span> <span class="token punctuation">..</span>.  <span class="token comment">#可以设置多个变量，每个变量为一个"&lt;key>=&lt;value>"的键值对，如果&lt;key>中包含空格，可以使用\来进行转义，也可以通过""来进行标示；另外，反斜线也可以用于续行</span>
示例：
    ENV myName John Doe
    ENV myDog Rex The Dog
    ENV <span class="token assign-left variable">myCat</span><span class="token operator">=</span>fluffy</code></pre>

<h2 id="EXPOSE：指定于外界交互的端口"><a href="#EXPOSE：指定于外界交互的端口" class="headerlink" title="EXPOSE：指定于外界交互的端口"></a><strong>EXPOSE：指定于外界交互的端口</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：    EXPOSE <span class="token operator">&lt;</span>port<span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token punctuation">..</span>.<span class="token punctuation">]</span>示例：    EXPOSE <span class="token number">80</span> <span class="token number">443</span>    EXPOSE <span class="token number">8080</span>    EXPOSE <span class="token number">11211</span>/tcp <span class="token number">11211</span>/udp注：　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</code></pre>

<h2 id="VOLUME：用于指定持久化目录"><a href="#VOLUME：用于指定持久化目录" class="headerlink" title="VOLUME：用于指定持久化目录"></a><strong>VOLUME：用于指定持久化目录</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：    VOLUME <span class="token punctuation">[</span><span class="token string">"/path/to/dir"</span><span class="token punctuation">]</span>示例：    VOLUME <span class="token punctuation">[</span><span class="token string">"/data"</span><span class="token punctuation">]</span>    VOLUME <span class="token punctuation">[</span><span class="token string">"/var/www"</span>, <span class="token string">"/var/log/apache2"</span>, <span class="token string">"/etc/apache2"</span>注：　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：1 卷可以容器间共享和重用2 容器并不一定要和其它容器共享卷3 修改卷后会立即生效4 对卷的修改不会对镜像产生影响5 卷会一直存在，直到没有任何容器在使用它</code></pre>

<h2 id="WORKDIR：工作目录，类似于cd命令"><a href="#WORKDIR：工作目录，类似于cd命令" class="headerlink" title="WORKDIR：工作目录，类似于cd命令"></a><strong>WORKDIR：工作目录，类似于cd命令</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式：    WORKDIR /path/to/workdir示例：    WORKDIR /a  <span class="token punctuation">(</span>这时工作目录为/a<span class="token punctuation">)</span>    WORKDIR b  <span class="token punctuation">(</span>这时工作目录为/a/b<span class="token punctuation">)</span>    WORKDIR c  <span class="token punctuation">(</span>这时工作目录为/a/b/c<span class="token punctuation">)</span>注：　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</code></pre>

<h2 id="USER-指定运行容器时的用户名或-UID，后续的-RUN-也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户"><a href="#USER-指定运行容器时的用户名或-UID，后续的-RUN-也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户" class="headerlink" title="**USER:**指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户"></a>**USER:**<strong>指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户</strong></h2><pre class="language-bash" data-language="bash"><code class="language-bash">格式:　　<span class="token environment constant">USER</span> user　　<span class="token environment constant">USER</span> user:group　　<span class="token environment constant">USER</span> uid　　<span class="token environment constant">USER</span> uid:gid　　<span class="token environment constant">USER</span> user:gid　　<span class="token environment constant">USER</span> uid:group 示例：    　　<span class="token environment constant">USER</span> www 注：　　使用<span class="token environment constant">USER</span>指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。</code></pre>



<p>在存在Dockerfile这个文件的目录下使用命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> 镜像名称<span class="token punctuation">[</span>:tag<span class="token punctuation">]</span> <span class="token builtin class-name">.</span></code></pre>

<p>即可制作出一个镜像，通过docker images可以查看到刚才制作的镜像</p>
]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 裸仓库</title>
    <url>/2021/11/08/Git%20%E8%A3%B8%E4%BB%93%E5%BA%93/</url>
    <content><![CDATA[<p>在我们平常的代码提交时，一般会将代码提交到GitHub、gitee、gitlab等等这些仓库中，但是这些操作都是提交到远程仓库的，我们想要提交代码到自己的私服仓库的话就必须自己搭建一个远程仓库，拿gitlab来举例子，在centos中搭建一个gitlab仓库需要占用将近3G左右的内存。但是我们如果只是买一个个人服务器作为学习使用的话那么内存已经远远不够我们后续的使用了，所以我们可以使用Git裸仓库的形式来创建仓库</p>
<span id="more"></span>

<p>我们都知道git创建一个默认的仓库的命令为 <code>git init</code> 但是我们这样创建的仓库只能在我们的本地使用，如果我们想要将这个仓库分享给他人一起协作提交代码就无法实现了，这时候我们可以搭建一个Git裸仓库</p>
<p>Git裸仓库可以作为一个远程仓库，可以支持其他人拉代码和推代码，这样就解决了使用 <code>git init</code>初始化一个本地仓库的局限性，但是裸仓库仅仅只有推和拉的功能，并没有切换分支的功能，那么你可以将它看作是一个Master分支的Git仓库，但是不能切换分支罢了</p>
<p>初始化一个Git库仓库的命令为：<code>git init --bare 仓库名</code></p>
<p>下面介绍一下裸仓库的常用命令：</p>
<p>提交文件还是一样的命令：<code>git add .</code></p>
<p>假设我们现在有一个192.168.148.2的远程服务器</p>
<p>我们在服务器上创建好一个test裸仓库</p>
<p>然后我们进行克隆，这里一定是先克隆，因为直接拉是拉取不下来的</p>
<p>拉取：<code>git clone ssh://root@192.168.148.2/root/test</code></p>
<p>添加文件：<code>git add .</code></p>
<p>提交更改：<code>git commit -m &quot;更新readme&quot;</code></p>
<p>推送到远程：git push origin master</p>
<p>可以看出，裸库的操作和普通的git并没有什么不同，仅仅是没有分支这个概念而已</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA完全卸载删除残留和注册表</title>
    <url>/2021/11/07/IDEA%E5%AE%8C%E5%85%A8%E5%8D%B8%E8%BD%BD%E5%88%A0%E9%99%A4%E6%AE%8B%E7%95%99%E5%92%8C%E6%B3%A8%E5%86%8C%E8%A1%A8/</url>
    <content><![CDATA[<p>首先我们卸载完成idea后还有一些残留的文件夹和注册表没有被清除掉，可能会影响我们下一次的使用，我们现在来清除所有的残留</p>
<h2 id="首先清除一下文件夹"><a href="#首先清除一下文件夹" class="headerlink" title="首先清除一下文件夹"></a>首先清除一下文件夹</h2><p>C:\user${用户名称}\ideaProjects\</p>
<p>C:\Users${用户名称}\AppData\Roaming\JetBrains</p>
<p>C:\Users\Public.jetbrains</p>
<p>C:\Program Files\JetBrains</p>
<p>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\JetBrains</p>
<h2 id="然后我们再清除所有注册表"><a href="#然后我们再清除所有注册表" class="headerlink" title="然后我们再清除所有注册表"></a>然后我们再清除所有注册表</h2><p><strong>windows + R 输入regedit进入注册表，右键一级菜单</strong>HKEY_CURRENT_USER， 右键查找，输入idea，会找到jetbrains，然后，右键删除。</p>
<p>删除完成所有与jetbrains相关的注册表后，重新安装idea就和刚开始安装一样了</p>
<p>如果中途遇到无法删除注册表的报错那么可能是你权限不够，右键选择权限然后将你的账户设置为完全控制即可。</p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaMail报错问题总结</title>
    <url>/2023/07/07/JavaMail%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>前言：</p>
<p>由于最近在做一个打卡项目，当工作日自动打卡成功时向收件人发送邮件通知打卡内容，而使用spring-boot-starter-mail过程中有一些常见的报错需要汇总一下防止下次使用再出现</p>
<span id="more"></span>

<h2 id="1、javax-mail-MessagingException-can’t-determine-local-email-address"><a href="#1、javax-mail-MessagingException-can’t-determine-local-email-address" class="headerlink" title="1、javax.mail.MessagingException: can’t determine local email address"></a>1、javax.mail.MessagingException: can’t determine local email address</h2><p>报错问题：发送邮件没有设置发件人邮箱</p>
<p>解决：</p>
<p>在SimpleMailMessage对象中设置From的值</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 添加这一行</span>
        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"615701864@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></code></pre>

<h2 id="2、Got-bad-greeting-from-SMTP-host-smtp-qq-com-port-465-response-EOF"><a href="#2、Got-bad-greeting-from-SMTP-host-smtp-qq-com-port-465-response-EOF" class="headerlink" title="2、Got bad greeting from SMTP host: smtp.qq.com, port: 465, response: [EOF]"></a>2、Got bad greeting from SMTP host: smtp.qq.com, port: 465, response: [EOF]</h2><p>问题原因：使用qq的465端口需要设置协议为smtps</p>
<p>需要修改项目yml配置文件如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">mail</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.qq.com
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">465</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> qq邮箱
    <span class="token key atrule">password</span><span class="token punctuation">:</span> smtp密钥
    <span class="token key atrule">properties</span><span class="token punctuation">:</span>
      <span class="token key atrule">mail</span><span class="token punctuation">:</span>
        <span class="token key atrule">smtp</span><span class="token punctuation">:</span>
          <span class="token key atrule">auth</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
          <span class="token key atrule">starttls</span><span class="token punctuation">:</span>
            <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">protocol</span><span class="token punctuation">:</span> smtp</code></pre>

]]></content>
      <tags>
        <tag>java</tag>
        <tag>email</tag>
      </tags>
  </entry>
  <entry>
    <title>Java判断节假日</title>
    <url>/2023/10/09/Java%E5%88%A4%E6%96%AD%E8%8A%82%E5%81%87%E6%97%A5/</url>
    <content><![CDATA[<p>由于要做一个自动打卡的功能，需要用到判断是否是节假日，如果是节假日则需要跳过打卡，如果不是节假日或者需要补班则需要打卡。网上没有找到好用的方法和jar包，这里分享一下自己使用的代码。</p>
<span id="more"></span>

<h2 id="1、新建节假日表"><a href="#1、新建节假日表" class="headerlink" title="1、新建节假日表"></a>1、新建节假日表</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;sys_holidays&#96; (
  &#96;date&#96; varchar(10) NOT NULL COMMENT &#39;日期，作为主键，存储具体的法定节假日及补班日期，格式为 &quot;YYYY-MM-DD&quot;&#39;,
  &#96;year&#96; varchar(4) NOT NULL COMMENT &#39;年份&#39;,
  &#96;holiday_name&#96; varchar(50) NOT NULL COMMENT &#39;节假日名称，用于标识对应的节假日&#39;,
  &#96;is_holiday&#96; tinyint(1) NOT NULL COMMENT &#39;是否为法定节假日，使用布尔值（0或1）表示，0表示非节假日，1表示是节假日&#39;,
  &#96;is_workday&#96; tinyint(1) NOT NULL COMMENT &#39;是否为补班日期，使用布尔值（0或1）表示，0表示非补班日期，1表示是补班日期&#39;,
  &#96;description&#96; varchar(255) DEFAULT NULL COMMENT &#39;描述，可用于提供关于该日期的额外信息&#39;,
  PRIMARY KEY (&#96;date&#96;)
) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4;</code></pre>

<h2 id="2、新建对应实体类"><a href="#2、新建对应实体类" class="headerlink" title="2、新建对应实体类"></a>2、新建对应实体类</h2><pre class="language-java" data-language="java"><code class="language-java">
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysHolidays</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 日期
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> date<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 年份
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> year<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 节假日名称
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> holidayName<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 是否节假日
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> isHoliday<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 是否补班日
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> isWorkDay<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 描述信息
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SysHolidays</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">SysHolidays</span><span class="token punctuation">(</span><span class="token class-name">String</span> date<span class="token punctuation">,</span> <span class="token class-name">String</span> year<span class="token punctuation">,</span> <span class="token class-name">String</span> holidayName<span class="token punctuation">,</span> <span class="token keyword">int</span> isHoliday<span class="token punctuation">,</span> <span class="token keyword">int</span> isWorkDay<span class="token punctuation">,</span> <span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>holidayName <span class="token operator">=</span> holidayName<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isHoliday <span class="token operator">=</span> isHoliday<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isWorkDay <span class="token operator">=</span> isWorkDay<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token class-name">String</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> year<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>year <span class="token operator">=</span> year<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHolidayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> holidayName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHolidayName</span><span class="token punctuation">(</span><span class="token class-name">String</span> holidayName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>holidayName <span class="token operator">=</span> holidayName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIsHoliday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> isHoliday<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIsHoliday</span><span class="token punctuation">(</span><span class="token keyword">int</span> isHoliday<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isHoliday <span class="token operator">=</span> isHoliday<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getIsWorkDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> isWorkDay<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setIsWorkDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> isWorkDay<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>isWorkDay <span class="token operator">=</span> isWorkDay<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDescription</span><span class="token punctuation">(</span><span class="token class-name">String</span> description<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>description <span class="token operator">=</span> description<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="3、新建对应mapper"><a href="#3、新建对应mapper" class="headerlink" title="3、新建对应mapper"></a>3、新建对应mapper</h2><pre class="language-none"><code class="language-none">public interface SysHolidaysMapper
&#123;
    SysHolidays queryByNowDate();

    int insertAll(@Param(&quot;holidays&quot;) List&lt;SysHolidays&gt; holidays);

    int deleteByYear(@Param(&quot;year&quot;) String year);
&#125;</code></pre>

<h2 id="4、新建对应mapper-xml"><a href="#4、新建对应mapper-xml" class="headerlink" title="4、新建对应mapper.xml"></a>4、新建对应mapper.xml</h2><pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;
&lt;!DOCTYPE mapper
        PUBLIC &quot;-&#x2F;&#x2F;mybatis.org&#x2F;&#x2F;DTD Mapper 3.0&#x2F;&#x2F;EN&quot;
        &quot;http:&#x2F;&#x2F;mybatis.org&#x2F;dtd&#x2F;mybatis-3-mapper.dtd&quot;&gt;
&lt;mapper namespace&#x3D;&quot;com.ruoyi.job.mapper.SysHolidaysMapper&quot;&gt;

    &lt;resultMap type&#x3D;&quot;com.ruoyi.job.domain.SysHolidays&quot; id&#x3D;&quot;SysHolidaysResult&quot;&gt;
        &lt;id property&#x3D;&quot;date&quot; column&#x3D;&quot;date&quot;&#x2F;&gt;
        &lt;result property&#x3D;&quot;year&quot; column&#x3D;&quot;year&quot;&#x2F;&gt;
        &lt;result property&#x3D;&quot;holidayName&quot; column&#x3D;&quot;holiday_name&quot;&#x2F;&gt;
        &lt;result property&#x3D;&quot;isHoliday&quot; column&#x3D;&quot;is_holiday&quot;&#x2F;&gt;
        &lt;result property&#x3D;&quot;isWorkDay&quot; column&#x3D;&quot;is_workday&quot;&#x2F;&gt;
        &lt;result property&#x3D;&quot;description&quot; column&#x3D;&quot;description&quot;&#x2F;&gt;
    &lt;&#x2F;resultMap&gt;

    &lt;insert id&#x3D;&quot;insertAll&quot;&gt;
        INSERT INTO &#96;sys_holidays&#96; (&#96;date&#96;, &#96;year&#96;, &#96;holiday_name&#96;, &#96;is_holiday&#96;, &#96;is_workday&#96;, &#96;description&#96;)
        VALUES
        &lt;foreach collection&#x3D;&quot;holidays&quot; item&#x3D;&quot;item&quot; separator&#x3D;&quot;,&quot;&gt;
            (#&#123;item.date&#125;, #&#123;item.year&#125;, #&#123;item.holidayName&#125;, #&#123;item.isHoliday&#125;, #&#123;item.isWorkDay&#125;, #&#123;item.description&#125;)
        &lt;&#x2F;foreach&gt;
    &lt;&#x2F;insert&gt;


    &lt;delete id&#x3D;&quot;deleteByYear&quot;&gt;
        DELETE from sys_holidays where YEAR &#x3D; #&#123;year&#125;
    &lt;&#x2F;delete&gt;
    &lt;select id&#x3D;&quot;queryByNowDate&quot; resultMap&#x3D;&quot;SysHolidaysResult&quot;&gt;
        SELECT date, year, holiday_name, is_holiday, is_workday, description
        from sys_holidays
        where date &#x3D; CURDATE()
    &lt;&#x2F;select&gt;


&lt;&#x2F;mapper&gt; </code></pre>

<h2 id="5、新增节假日service"><a href="#5、新增节假日service" class="headerlink" title="5、新增节假日service"></a>5、新增节假日service</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISysHolidaysService</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">SysHolidays</span> <span class="token function">queryByNowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysHolidays</span><span class="token punctuation">></span></span> holidays<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">deleteByYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">saveHolidays</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Boolean</span> <span class="token function">isHoliday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="6、新增节假日service实现"><a href="#6、新增节假日service实现" class="headerlink" title="6、新增节假日service实现"></a>6、新增节假日service实现</h2><pre class="language-java" data-language="java"><code class="language-java">
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ISysHolidaysServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ISysHolidaysService</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SysHolidaysMapper</span> sysHolidaysMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">SysHolidays</span> <span class="token function">queryByNowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> sysHolidaysMapper<span class="token punctuation">.</span><span class="token function">queryByNowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insertAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysHolidays</span><span class="token punctuation">></span></span> holidays<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> sysHolidaysMapper<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>holidays<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteByYear</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> sysHolidaysMapper<span class="token punctuation">.</span><span class="token function">deleteByYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Transactional</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveHolidays</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysHolidays</span><span class="token punctuation">></span></span> sysHolidayList <span class="token operator">=</span> <span class="token function">getSysHolidays</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sysHolidayList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> deleteRow <span class="token operator">=</span> <span class="token function">deleteByYear</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> insertRow <span class="token operator">=</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>sysHolidayList<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"更新节假日数据成功，本次共删除数据：%d行，新增数据：%d行"</span><span class="token punctuation">,</span> deleteRow<span class="token punctuation">,</span> insertRow<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"更新节假日数据失败"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> <span class="token string">"本次操作未更新数据"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">isHoliday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 判断是否是节假日或者补班</span>
        <span class="token class-name">SysHolidays</span> sysHolidays <span class="token operator">=</span> <span class="token function">queryByNowDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>sysHolidays <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sysHolidays<span class="token punctuation">.</span><span class="token function">getIsHoliday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sysHolidays<span class="token punctuation">.</span><span class="token function">getIsWorkDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 不是节假日，则判断是否为周末，不是周末即为工作日</span>
        <span class="token class-name">LocalDate</span> now <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> dayOfWeek <span class="token operator">==</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SATURDAY</span> <span class="token operator">||</span> dayOfWeek <span class="token operator">==</span> <span class="token class-name">DayOfWeek</span><span class="token punctuation">.</span><span class="token constant">SUNDAY</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SysHolidays</span><span class="token punctuation">></span></span> <span class="token function">getSysHolidays</span><span class="token punctuation">(</span><span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">WebClient</span> build <span class="token operator">=</span> <span class="token class-name">WebClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">baseUrl</span><span class="token punctuation">(</span><span class="token string">"https://timor.tech/api/holiday/year/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> responseMono <span class="token operator">=</span> build<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">retrieve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> block <span class="token operator">=</span> responseMono<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> parse <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JSONObject</span> holiday <span class="token operator">=</span> parse<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span><span class="token string">"holiday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> holiday<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>key <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> holiday<span class="token punctuation">.</span><span class="token function">getJSONObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> date <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"date"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> name <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">boolean</span> isHoliday <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"holiday"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SysHolidays</span><span class="token punctuation">(</span>date<span class="token punctuation">,</span> year<span class="token punctuation">,</span> name<span class="token punctuation">,</span> isHoliday <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> isHoliday <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="7、新增controller接口用于更新每年节假日数据"><a href="#7、新增controller接口用于更新每年节假日数据" class="headerlink" title="7、新增controller接口用于更新每年节假日数据"></a>7、新增controller接口用于更新每年节假日数据</h2><p>每年11月份-12月份左右国务院会发布明年的法定节假日及补班日，我们需要调用第三方接口存入到我们的数据库中以便明年使用。如果第三方接口无法使用可自行根据国务院发布的文档自行编写insert语句插入数据到表格中，不使用接口的方式更新。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/holiday"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HolidayController</span> <span class="token keyword">extends</span> <span class="token class-name">BaseController</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ISysHolidaysService</span> iSysHolidaysService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/save/&#123;year&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">saveHolidays</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> year<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> iSysHolidaysService<span class="token punctuation">.</span><span class="token function">saveHolidays</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud发送请求的几种方式</title>
    <url>/2023/12/15/Spring-Cloud%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>Spring Cloud提供了多种方式来发送请求到其他服务。以下是一些常见的方法</p>
<h2 id="1-RestTemplate"><a href="#1-RestTemplate" class="headerlink" title="1. RestTemplate"></a>1. RestTemplate</h2><p>使用RestTemplate，需要在<code>pom.xml</code>文件中添加以下依赖：</p>
<pre class="language-none"><code class="language-none">xmlCopy code&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>示例代码：</p>
<pre class="language-none"><code class="language-none">javaCopy codeRestTemplate restTemplate &#x3D; new RestTemplate();
String result &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;service-url&#x2F;api&#x2F;resource&quot;, String.class);</code></pre>

<span id="more"></span>

<h2 id="2-WebClient"><a href="#2-WebClient" class="headerlink" title="2. WebClient"></a>2. WebClient</h2><p>WebClient通常与Spring WebFlux一起使用，需要添加以下依赖：</p>
<pre class="language-none"><code class="language-none">xmlCopy code&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-webflux&lt;&#x2F;artifactId&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>示例代码：</p>
<pre class="language-none"><code class="language-none">javaCopy codeWebClient webClient &#x3D; WebClient.create(&quot;http:&#x2F;&#x2F;service-url&quot;);
Mono&lt;String&gt; resultMono &#x3D; webClient.get()
    .uri(&quot;&#x2F;api&#x2F;resource&quot;)
    .retrieve()
    .bodyToMono(String.class);
String result &#x3D; resultMono.block();</code></pre>

<h2 id="3-Feign"><a href="#3-Feign" class="headerlink" title="3. Feign"></a>3. Feign</h2><p>使用Feign，需要添加<code>spring-cloud-starter-openfeign</code>依赖：</p>
<pre class="language-none"><code class="language-none">xmlCopy code&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;&#x2F;artifactId&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>这里主要讲一下fegin。</p>
<p>首先看一下fegin调用内部已经注册到同一个注册中心上的服务互相调用方式</p>
<h3 id="3-1-内部微服务互相调用"><a href="#3-1-内部微服务互相调用" class="headerlink" title="3.1 内部微服务互相调用"></a>3.1 内部微服务互相调用</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>contextId <span class="token operator">=</span> <span class="token string">"remoteUserService"</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token class-name">ServiceNameConstants</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_SERVICE</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">RemoteUserFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemoteUserService</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 通过用户名查询用户信息
     *
     * @param username 用户名
     * @param source 请求来源
     * @return 结果
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/user/info/&#123;username&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">R</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LoginUser</span><span class="token punctuation">></span></span> <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token class-name">SecurityConstants</span><span class="token punctuation">.</span><span class="token constant">FROM_SOURCE</span><span class="token punctuation">)</span> <span class="token class-name">String</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>需要指定value为已注册的服务的id</p>
<h3 id="3-2-调用外部第三方系统"><a href="#3-2-调用外部第三方系统" class="headerlink" title="3.2 调用外部第三方系统"></a>3.2 调用外部第三方系统</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">,</span>url <span class="token operator">=</span> <span class="token string">"https://timor.tech"</span><span class="token punctuation">,</span> fallbackFactory <span class="token operator">=</span> <span class="token class-name">RemoteVideoFallbackFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>configuration <span class="token operator">=</span> <span class="token class-name">FeignConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RemoteTestService</span>
<span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/api/holiday/year/&#123;year&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"year"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="3-2-1-指定请求时默认的请求头"><a href="#3-2-1-指定请求时默认的请求头" class="headerlink" title="3.2.1 指定请求时默认的请求头"></a>3.2.1 指定请求时默认的请求头</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignConfig</span> <span class="token keyword">implements</span> <span class="token class-name">RequestInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">RequestTemplate</span> requestTemplate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        requestTemplate<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>添加配置后在@FeignClient注解中指定使用此配置类，configuration &#x3D; FeignConfig.class</p>
<h2 id="4-HttpClient"><a href="#4-HttpClient" class="headerlink" title="4. HttpClient"></a>4. HttpClient</h2><p>对于直接使用HttpClient，可以添加以下依赖：</p>
<pre class="language-none"><code class="language-none">xmlCopy code&lt;dependency&gt;
    &lt;groupId&gt;org.apache.httpcomponents&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;httpclient&lt;&#x2F;artifactId&gt;
    &lt;version&gt;4.5.13&lt;&#x2F;version&gt; &lt;!-- 版本号可能会有更新 --&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>示例代码：</p>
<pre class="language-none"><code class="language-none">javaCopy codeCloseableHttpClient httpClient &#x3D; HttpClients.createDefault();
HttpGet httpGet &#x3D; new HttpGet(&quot;http:&#x2F;&#x2F;service-url&#x2F;api&#x2F;resource&quot;);
try (CloseableHttpResponse response &#x3D; httpClient.execute(httpGet)) &#123;
    HttpEntity entity &#x3D; response.getEntity();
    if (entity !&#x3D; null) &#123;
        String result &#x3D; EntityUtils.toString(entity);
        &#x2F;&#x2F; 使用结果
    &#125;
&#125;</code></pre>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Quartz定时任务</title>
    <url>/2021/09/25/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<p>首先导入quartz依赖，这里我就不演示导入springboot，自己随意导入一个版本就好了</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>然后我们就可以直接编写要执行的任务类了，这里我们选择继承QuartzJobBean这个类</p>
<span id="more"></span>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTask</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>创建好了需要执行的任务我们就需要去创建一个任务调度器，还有一个时间调度器，任务调度器是用来执行你需要执行的哪个类，时间调度器则是用来在你指定的间隔执行 一次任务</p>
<p>我们创建一个Configuration配置</p>
<p>然后将任务调度器和时间调度器都注入到bean中</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> config <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">JobDetail</span> <span class="token function">testJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">TestTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">storeDurably</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Trigger</span> <span class="token function">testTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//从第五秒开始每秒执行一次</span>
        <span class="token class-name">CronScheduleBuilder</span> cronScheduleBuilder <span class="token operator">=</span> <span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"5/1 * * * * ? "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forJob</span><span class="token punctuation">(</span><span class="token function">testJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"testTrigger"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span>cronScheduleBuilder<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>

<p>最后启动springboot即可看到效果</p>
<h2 id="spring注解Scheduled"><a href="#spring注解Scheduled" class="headerlink" title="spring注解Scheduled"></a>spring注解Scheduled</h2><p>也可以使用spring自带的Scheduled注解来完成简单开发，但是无法指定任务名称,可以直接使用cron表达式，不建议使用这种</p>
<p>首先还是导入springboot-quartz整合的包</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>为什么要导入quartz整合的包呢，因为springboot和quartz整合的包里面有我们需要的几个依赖，为了方便就直接导入使用就可以了，当然也可以单独导入spring-context包，这个是spring的依赖，要用到@Scheduled需要spring的包</p>
<p>导入完成后就可以直接在启动类上加上启动Scheduled的注解</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">DemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>

<p>然后再编写一个component类即可启动</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task2</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"55/1 * * * * ? "</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务在一分钟的55秒后执行，每秒执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这种方式虽然便捷，但是没有找到能指定任务名称和调度器名称的注解属性，所以一般只用来做简单的功能，比如我想指定一个任务让他停下来但是又没有名称还是不行的。</p>
<h2 id="暂停、恢复任务"><a href="#暂停、恢复任务" class="headerlink" title="暂停、恢复任务"></a>暂停、恢复任务</h2><p>首先我们定义好了springboot和quartz整合的任务以及调度器，并且能够正常运行，但是我们中途想让他停下来应该怎么做呢，停止整个项目肯定是不行的，那么我们可以做一个接口，发送请求就可以达到停止和开启的效果</p>
<p>我们先注入一下Scheduler，Scheduler是quartz提供的</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span>
<span class="token class-name">Scheduler</span> scheduler<span class="token punctuation">;</span></code></pre>



<p>我们先来了解一下停止的方法pauseJob</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/stop"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stopJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">JobKey</span> jobKey <span class="token operator">=</span> <span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scheduler<span class="token punctuation">.</span><span class="token function">pauseJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>也可以关闭一整个组的任务，我们可以把想要关闭的任务都放在同一个任务组中</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/stopJobs"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">stopJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">GroupMatcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JobKey</span><span class="token punctuation">></span></span> jobKeyGroupMatcher <span class="token operator">=</span> <span class="token class-name">GroupMatcher</span><span class="token punctuation">.</span><span class="token function">jobGroupEquals</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scheduler<span class="token punctuation">.</span><span class="token function">pauseJobs</span><span class="token punctuation">(</span>jobKeyGroupMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>开启一个任务</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/start"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">JobKey</span> jobKey <span class="token operator">=</span> <span class="token class-name">JobKey</span><span class="token punctuation">.</span><span class="token function">jobKey</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scheduler<span class="token punctuation">.</span><span class="token function">resumeJob</span><span class="token punctuation">(</span>jobKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p> 开启一个组的任务</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/startJobs"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">startJobs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SchedulerException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">GroupMatcher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">JobKey</span><span class="token punctuation">></span></span> jobKeyGroupMatcher <span class="token operator">=</span> <span class="token class-name">GroupMatcher</span><span class="token punctuation">.</span><span class="token function">jobGroupEquals</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    scheduler<span class="token punctuation">.</span><span class="token function">resumeJobs</span><span class="token punctuation">(</span>jobKeyGroupMatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>Spring</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装jdk8</title>
    <url>/2021/06/01/centos7%E5%AE%89%E8%A3%85jdk8/</url>
    <content><![CDATA[<p>首先到官网下载好jdk1.8的tar.gz的压缩包，然后上传到服务器的任意目录，我们这里上传到系统的&#x2F;usr&#x2F;local下</p>
<p>然后进行解压缩</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u111-linux-x64.tar.gz</code></pre>

<p>文件夹的名称比较长，为了更好的配置环境变量我们可以将文件夹的名称重命名短一点</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> jdk-8u111-linux-x64 jdk1.8</code></pre>

<span id="more"></span>
<p>然后配置环境变量，这里配置的是&#x2F;etc&#x2F;profile中的系统环境变量</p>
<p>打开profile</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile</code></pre>

<p>输入i进行插入，然后再末尾添加以下四行内容</p>
<pre class="language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8
export JRE_HOME&#x3D;&#x2F;usr&#x2F;local&#x2F;jdk1.8&#x2F;jre
export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib:$JRE_HOME&#x2F;lib
export PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</code></pre>

<p>这样jdk就装好了，说白了就是解压，配置环境变量，两步即可</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装docker</title>
    <url>/2021/06/03/centos7%E5%AE%89%E8%A3%85docker/</url>
    <content><![CDATA[<p>centos7安装docker</p>
<p>首先按照官方的方法来</p>
<p>第一步卸载docker旧版本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum remove <span class="token function">docker</span> <span class="token punctuation">\</span>
                  docker-client <span class="token punctuation">\</span>
                  docker-client-latest <span class="token punctuation">\</span>
                  docker-common <span class="token punctuation">\</span>
                  docker-latest <span class="token punctuation">\</span>
                  docker-latest-logrotate <span class="token punctuation">\</span>
                  docker-logrotate <span class="token punctuation">\</span>
                  docker-selinux <span class="token punctuation">\</span>
                  docker-engine-selinux <span class="token punctuation">\</span>
                  docker-engine</code></pre>

<p>安装相关工具类</p>
<span id="more"></span>

<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils <span class="token punctuation">\</span>
  device-mapper-persistent-data <span class="token punctuation">\</span>
  lvm2</code></pre>

<p>将docker源配置为阿里云源</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></pre>

<p>安装docker</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce</code></pre>

<p>配置阿里云docker加速器</p>
<p>访问阿里云官方网站<a href="https://homenew.console.aliyun.com/">https://homenew.console.aliyun.com/</a></p>
<p>在搜索中找到<u>容器镜像服务</u></p>
<p>在容器镜像服务中点击菜单中的镜像工具》镜像加速器</p>
<p>按照官方文档的代码一行一行输入即可</p>
<p>启动docker：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span> </code></pre>

<p>验证docker: </p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run hello-world</code></pre>



<p>移除docker容器</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">//移除容器要先停止容器
<span class="token function">docker</span> stop 容器ID
//移除容器
<span class="token function">docker</span> <span class="token function">rm</span> 容器ID </code></pre>



<p>拉取容器镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull 容器仓库:版本号</code></pre>

<p>重命名镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> tag 容器ID 新的镜像名:新的镜像版本</code></pre>

<p>删除镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi 容器名:版本号</code></pre>

<p>使用镜像创建容器，tomcat为例</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 tomcat左边的8080是本机端口 右边的是docker端口 tomcat是镜像名，默认为最新版即latest 可以运行时给容器命名 加上--name即可</code></pre>

<p>重命名容器</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rename</span> 容器ID 新容器名</code></pre>

<p>如果在启动docker容器后使用ps显示容器已经停止了那么就可以查看日志来解决</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> 容器id</code></pre>



<p>以上操作如果版本号为latest即最新版本可以不写版本号</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装mysql5.7</title>
    <url>/2021/06/01/centos7%E5%AE%89%E8%A3%85mysql5/</url>
    <content><![CDATA[<p>第一步下载mysql5.7安装包</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</code></pre>

<p>第二步安装mysql源</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum localinstall mysql57-community-release-el7-11.noarch.rpm</code></pre>

<span id="more"></span>
<p>查看是否安装成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span></code></pre>

<p>安装mysql</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server</code></pre>

<p>​	启动mysql</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld</code></pre>

<p>查看mysql是否启动</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld</code></pre>

<p>设置mysql开机自启动</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> mysqld</code></pre>

<p>查看mysql初始root密码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log</code></pre>

<p>进入mysql</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></code></pre>

<p>设置允许使用简单密码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_policy</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span></code></pre>

<p>设置允许使用密码长度</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> global <span class="token assign-left variable">validate_password_length</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre>

<p>修改密码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> password <span class="token keyword">for</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span><span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>允许root远程连接</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'%'</span> IDENTIFIED BY <span class="token string">'1234456'</span> WITH GRANT OPTION<span class="token punctuation">;</span>FLUSH PRIVILEGES<span class="token punctuation">;</span></code></pre>

<p>设置mysql数据库为utf-8编码</p>
<p>编辑&#x2F;etc&#x2F;my.cnf文件 </p>
<p>因为my.cnf中没有[client]标签，所以我们添加一个</p>
<p>然后在这地下添加</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">default-character-set<span class="token operator">=</span>utf8</code></pre>

<p>在[mysqld]下添加</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>default-storage-engine<span class="token operator">=</span>INNODBcharacter-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_general_ci</code></pre>

<p>[client]一定要写在[mysqld]上面 否则会报错</p>
<p>最终配置为</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>default-storage-engine<span class="token operator">=</span>INNODBcharacter-set-server<span class="token operator">=</span>utf8collation-server<span class="token operator">=</span>utf8_general_ci</code></pre>



<p>重启mysql</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl restart mysqld</code></pre>

<p>进入mysql查看字符编码是否修改成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">show variables like <span class="token string">'%character%'</span><span class="token punctuation">;</span></code></pre>





<p>配置文件：&#x2F;etc&#x2F;my.cnf </p>
<p>日志文件：&#x2F;var&#x2F;log&#x2F;&#x2F;var&#x2F;log&#x2F;mysqld.log </p>
<p>服务启动脚本：&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;mysqld.service </p>
<p>socket文件：&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid </p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装python3</title>
    <url>/2023/04/04/centos7%E5%AE%89%E8%A3%85python3/</url>
    <content><![CDATA[<p>前言：因为liunx安装python和安装其他软件有点不太一样，比如jdk都是下载好压缩包后直接解压配置好环境变量就可以用了，但是安装python需要下载源码重新编译，所以记录一下安装过程以及安装过程中的报错内容</p>
<span id="more"></span>

<h2 id="1、下载python3源码"><a href="#1、下载python3源码" class="headerlink" title="1、下载python3源码"></a>1、下载python3源码</h2><p>源码有两种压缩格式，两种源码都是一样的，只不过是压缩的格式不一样</p>
<p>源码一：<a href="https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz">https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tgz</a></p>
<p>源码二：<a href="https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz">https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz</a></p>
<h2 id="2、上传压缩包至服务器"><a href="#2、上传压缩包至服务器" class="headerlink" title="2、上传压缩包至服务器"></a>2、上传压缩包至服务器</h2><p>可以使用finalshell等工具将下载好的源码包上传至服务器的&#x2F;usr&#x2F;local目录下</p>
<h2 id="3、解压源码"><a href="#3、解压源码" class="headerlink" title="3、解压源码"></a>3、解压源码</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> Python-3.9.0.tar.xz</code></pre>

<h2 id="4、安装python所需环境依赖"><a href="#4、安装python所需环境依赖" class="headerlink" title="4、安装python所需环境依赖"></a>4、安装python所需环境依赖</h2><pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc <span class="token function">make</span></code></pre>

<h2 id="5、进入源码目录指定编译安装目录"><a href="#5、进入源码目录指定编译安装目录" class="headerlink" title="5、进入源码目录指定编译安装目录"></a>5、进入源码目录指定编译安装目录</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> python3</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> Python-3.9.0</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python3</code></pre>

<p>注：这里创建的&#x2F;usr&#x2F;local&#x2F;python3目录就是后面编译好源码后安装python3.9的目录</p>
<h2 id="6、编译源码"><a href="#6、编译源码" class="headerlink" title="6、编译源码"></a>6、编译源码</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span></code></pre>

<p>注：-j 4 代表使用cpu的4个核心进行多线程编译源码，可以加快编译速度，可以按照自己cpu的实际配置来，我的cpu是i5-3475s 四核心四线程  所以这里使用-j 4 指定四个核心，如果你的配置较低请自行调整，调太高会报错</p>
<h2 id="7、安装"><a href="#7、安装" class="headerlink" title="7、安装"></a>7、安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre>



<h2 id="8、配置环境变量"><a href="#8、配置环境变量" class="headerlink" title="8、配置环境变量"></a>8、配置环境变量</h2><p>编译好源码后可以看到&#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin已经有python可以使用了，我们只需要将python3目录添加到系统环境变量即可</p>
<h3 id="8-1编辑-x2F-etc-x2F-profile文件"><a href="#8-1编辑-x2F-etc-x2F-profile文件" class="headerlink" title="8.1编辑&#x2F;etc&#x2F;profile文件"></a>8.1编辑&#x2F;etc&#x2F;profile文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/profile</code></pre>

<h3 id="8-2添加环境变量"><a href="#8-2添加环境变量" class="headerlink" title="8.2添加环境变量"></a>8.2添加环境变量</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">PYTHON_HOME</span><span class="token operator">=</span>/usr/local/python3
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/local/bin:<span class="token variable">$PYTHON_HOME</span>/bin:<span class="token environment constant">$PATH</span></code></pre>

<h3 id="8-3使环境变量生效"><a href="#8-3使环境变量生效" class="headerlink" title="8.3使环境变量生效"></a>8.3使环境变量生效</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile</code></pre>

]]></content>
      <tags>
        <tag>centos</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7新建分区</title>
    <url>/2023/05/03/centos7%E6%96%B0%E5%BB%BA%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<p>前言：由于在安装centos7的时候默认选择的是自动分区，导致默认会给root分区50G，然后剩下的空间会全部划分给home。而我们在使用docker容器时并不能限制容器使用分区容量的大小，这就会导致我们如果将docker缓存在root目录，当缓存越来越大时会将root的50G空间全部占用满。</p>
<span id="more"></span>

<h2 id="卸载home分区"><a href="#卸载home分区" class="headerlink" title="卸载home分区"></a>卸载home分区</h2><p>由于需要对磁盘进行调整，所以必须先对分区进行卸载才能操作。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">umount</span> /home</code></pre>



<h2 id="1、缩小home分区容量"><a href="#1、缩小home分区容量" class="headerlink" title="1、缩小home分区容量"></a>1、缩小home分区容量</h2><p>由于我的硬盘是240G的，默认给root分了50G，而剩下的180G容量就在home分区上，现在我想要将home的容量分出100G给我的甜糖容器作为缓存目录使用。我们可以使用lvreduce命令进行操作。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">lvreduce <span class="token parameter variable">-L</span> <span class="token parameter variable">-100G</span> /dev/mapper/centos-home</code></pre>

<p>-100G：将home分区的容量减少100G</p>
<p>&#x2F;dev&#x2F;mapper&#x2F;centos-home：LVM （Logical Volume Manager）逻辑卷</p>
<p>如果需要分出更多的空间请自行调整。</p>
<p>如果分区的不是home，而是想对其他分区进行操作，则可以使用以下命令查看分区路径</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">fdisk</span> <span class="token parameter variable">-l</span></code></pre>

<p>或者</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">df</span> <span class="token parameter variable">-h</span></code></pre>



<p>以我的分区为例，使用df -h 命令查看如下：</p>
<p>文件系统                     容量  已用  可用 已用% 挂载点<br>devtmpfs                     3.8G     0  3.8G    0% &#x2F;dev<br>tmpfs                        3.8G     0  3.8G    0% &#x2F;dev&#x2F;shm<br>tmpfs                        3.8G  9.2M  3.8G    1% &#x2F;run<br>tmpfs                        3.8G     0  3.8G    0% &#x2F;sys&#x2F;fs&#x2F;cgroup<br>&#x2F;dev&#x2F;mapper&#x2F;centos-root       50G  6.8G   44G   14% &#x2F;<br>&#x2F;dev&#x2F;sda1                   1014M  152M  863M   15% &#x2F;boot<br>&#x2F;dev&#x2F;mapper&#x2F;centos-nodetemp  100G  545M  100G    1% &#x2F;nodetemp<br>&#x2F;dev&#x2F;mapper&#x2F;centos-home       80G   33M   80G    1% &#x2F;home</p>
<p>可以根据挂载点查看文件系统，我们看到挂载点为&#x2F;home的文件系统为&#x2F;dev&#x2F;mapper&#x2F;centos-home</p>
<h2 id="2、将剩余空间创建一个文件系统路径"><a href="#2、将剩余空间创建一个文件系统路径" class="headerlink" title="2、将剩余空间创建一个文件系统路径"></a>2、将剩余空间创建一个文件系统路径</h2><pre class="language-bash" data-language="bash"><code class="language-bash">lvcreate <span class="token parameter variable">-L</span> 100G <span class="token parameter variable">-n</span> nodetemp centos</code></pre>

<p>100G：新建文件系统的容量</p>
<p>nodetemp：文件系统命名，新建后会生成一个&#x2F;dev&#x2F;mapper&#x2F;centos-nodetemp文件系统</p>
<h2 id="3、格式化新建分区和旧分区"><a href="#3、格式化新建分区和旧分区" class="headerlink" title="3、格式化新建分区和旧分区"></a>3、格式化新建分区和旧分区</h2><p>需要注意的是文件系统创建后并没有指定格式，所以需要重新格式化一次指定分区格式为xfs或ext4.而home分区后也要重新格式化一遍，避免因为分区导致无法挂载的情况</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mkfs.xfs /dev/centos/nodetemp</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">mkfs.xfs /dev/centos/home</code></pre>

<p>nodetemp是我上面创建新分区的名字，如果你的不是叫这个请自行更改。</p>
<h2 id="4、新建文件系统挂载路径"><a href="#4、新建文件系统挂载路径" class="headerlink" title="4、新建文件系统挂载路径"></a>4、新建文件系统挂载路径</h2><p>我就想把新的分区挂载到根目录的nodetemp文件夹，就直接在更目录下创建一个nodetemp文件夹就可以了</p>
<h3 id="新建文件夹："><a href="#新建文件夹：" class="headerlink" title="新建文件夹："></a>新建文件夹：</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /nodetemp</code></pre>

<h3 id="测试手动挂载："><a href="#测试手动挂载：" class="headerlink" title="测试手动挂载："></a>测试手动挂载：</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> /dev/mapper/centos-nodetemp /nodetemp</code></pre>

<p>如果没有报错则挂载成功。</p>
<h2 id="5、开机自动挂载"><a href="#5、开机自动挂载" class="headerlink" title="5、开机自动挂载"></a>5、开机自动挂载</h2><p>编辑开机挂载文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/fstab</code></pre>

<p>在最底部新增如下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/dev/mapper/centos-nodetemp /nodetemp xfs defaults <span class="token number">0</span> <span class="token number">0</span></code></pre>

<h2 id="6、重启"><a href="#6、重启" class="headerlink" title="6、重启"></a>6、重启</h2><pre class="language-bash" data-language="bash"><code class="language-bash">init <span class="token number">6</span></code></pre>

<p>或者</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span></code></pre>

]]></content>
      <tags>
        <tag>centos</tag>
        <tag>liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7普通用户安装mysql</title>
    <url>/2023/05/25/centos7%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7%E5%AE%89%E8%A3%85mysql/</url>
    <content><![CDATA[<p>前言：由于公司的服务器默认都给的是普通用户的权限不能将软件上传至&#x2F;usr&#x2F;local下，又想在测试服务器中安装一个mysql玩一玩，所以需要使用普通用户权限对mysql进行配置及启动，这里我们选择将mysql上传至普通用户的home目录进行启动及安装.</p>
<span id="more"></span>

<h2 id="第一步：下载mysql压缩包"><a href="#第一步：下载mysql压缩包" class="headerlink" title="第一步：下载mysql压缩包"></a>第一步：下载mysql压缩包</h2><p>官方网址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></p>
<p>Product Version: 5.7.41 （可自行选择其他版本）</p>
<p>Operating System: Linux-Generic</p>
<p>OS Version: Linux-Generic （glibc 2.12）（x86,64-bit）</p>
<p>选择Compressed TAR Archive或TAR进行下载</p>
<p>这里我选择Compressed TAR Archive</p>
<p>地址为：<a href="https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.41-linux-glibc2.12-x86_64.tar.gz">https://cdn.mysql.com/archives/mysql-5.7/mysql-5.7.41-linux-glibc2.12-x86_64.tar.gz</a></p>
<p>如果下载过慢可以使用迅雷下载上方地址</p>
<h2 id="第二步：上传压缩包至服务器"><a href="#第二步：上传压缩包至服务器" class="headerlink" title="第二步：上传压缩包至服务器"></a>第二步：上传压缩包至服务器</h2><p>由于我们是普通用户，所以是没有权限可以上传到&#x2F;usr&#x2F;local路径下，所以我们可以将其上传至普通用户的home目录下，我这里的路径为&#x2F;home&#x2F;appuser</p>
<h2 id="第三步：解压mysql"><a href="#第三步：解压mysql" class="headerlink" title="第三步：解压mysql"></a>第三步：解压mysql</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> mysql-5.7.41-linux-glibc2.12-x86_64.tar.gz</code></pre>

<h3 id="重命名mysql文件夹"><a href="#重命名mysql文件夹" class="headerlink" title="重命名mysql文件夹"></a>重命名mysql文件夹</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> mysql-5.7.41-linux-glibc2.12-x86_64 mysql-5.7.41</code></pre>

<h2 id="第四步：创建mysql配置文件"><a href="#第四步：创建mysql配置文件" class="headerlink" title="第四步：创建mysql配置文件"></a>第四步：创建mysql配置文件</h2><h3 id="进入mysql-5-7-41目录"><a href="#进入mysql-5-7-41目录" class="headerlink" title="进入mysql-5.7.41目录"></a>进入mysql-5.7.41目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mysql-5.7.41</code></pre>

<h3 id="新建my-cnf配置文件"><a href="#新建my-cnf配置文件" class="headerlink" title="新建my.cnf配置文件"></a>新建my.cnf配置文件</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> my.cnf</code></pre>

<p>写入如下内容：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">[client]
default-character-set&#x3D;utf8
[mysqld]
default-storage-engine&#x3D;INNODB
character-set-server&#x3D;utf8
collation-server&#x3D;utf8_general_ci</code></pre>



<h2 id="第五步：初始化mysql"><a href="#第五步：初始化mysql" class="headerlink" title="第五步：初始化mysql"></a>第五步：初始化mysql</h2><h3 id="初始化mysql启动用户及配置目录"><a href="#初始化mysql启动用户及配置目录" class="headerlink" title="初始化mysql启动用户及配置目录"></a>初始化mysql启动用户及配置目录</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/mysqld  --defaults-file<span class="token operator">=</span>/home/appuser/mysql-5.7.41/my.cnf <span class="token parameter variable">--initialize</span>  <span class="token parameter variable">--user</span><span class="token operator">=</span>appuser  <span class="token parameter variable">--basedir</span><span class="token operator">=</span>/home/appuser/mysql-5.7.41  <span class="token parameter variable">--datadir</span><span class="token operator">=</span>/home/appuser/mysql-5.7.41/data</code></pre>

<p>初始化完成后最后一行会输出密码</p>
<p>例如：[Note] A temporary password is generated for appuser@localhost: Vt&#x3D;&gt;;L(;3M_u</p>
<p>即密码为：Vt&#x3D;&gt;;L(;3M_u</p>
<h2 id="第六步：启动mysql"><a href="#第六步：启动mysql" class="headerlink" title="第六步：启动mysql"></a>第六步：启动mysql</h2><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/mysqld_safe  --defaults-file<span class="token operator">=</span>/home/appuser/mysql-5.7.41/my.cnf  <span class="token parameter variable">--user</span><span class="token operator">=</span>appuser <span class="token operator">&amp;</span></code></pre>

<h2 id="第七步：进入mysql并修改密码"><a href="#第七步：进入mysql并修改密码" class="headerlink" title="第七步：进入mysql并修改密码"></a>第七步：进入mysql并修改密码</h2><h3 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h3><pre class="language-bash" data-language="bash"><code class="language-bash">./bin/mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></code></pre>

<h3 id="设置新密码"><a href="#设置新密码" class="headerlink" title="设置新密码"></a>设置新密码</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">set password for &#39;root&#39;@&#39;localhost&#39;&#x3D;password(&#39;123456&#39;);</code></pre>

<h2 id="第八步：允许远程访问root用户"><a href="#第八步：允许远程访问root用户" class="headerlink" title="第八步：允许远程访问root用户"></a>第八步：允许远程访问root用户</h2><pre class="language-mysql" data-language="mysql"><code class="language-mysql">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</code></pre>

<p>123456是刚刚设置的新密码，这个密码不能输错，否则这条命令不会生效.</p>
<h3 id="刷新mysql缓存配置信息"><a href="#刷新mysql缓存配置信息" class="headerlink" title="刷新mysql缓存配置信息"></a>刷新mysql缓存配置信息</h3><pre class="language-mysql" data-language="mysql"><code class="language-mysql">FLUSH PRIVILEGES;</code></pre>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7通过nvm安装并管理node</title>
    <url>/2021/11/22/centos7%E9%80%9A%E8%BF%87nvm%E5%AE%89%E8%A3%85%E5%B9%B6%E7%AE%A1%E7%90%86node/</url>
    <content><![CDATA[<p>官方地址：<a href="https://github.com/nvm-sh/nvm">https://github.com/nvm-sh/nvm</a></p>
<p>我们安装官方说的步骤一步一步来</p>
<p>首先下载并执行nvm安装文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre>

<p>运行完成后在环境变量中添加如下代码即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;XDG_CONFIG_HOME-&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm"</span><span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span></code></pre>

<p>然后使用版本命令验证是否安装成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nvm <span class="token parameter variable">-v</span></code></pre>

<p>安装完成nvm后我们再通过官方文档的提示继续安装node即可</p>
<p>我们可以指定nodejs的版本，因为有时候最新的版本安装某些依赖会报错，导致项目无法启动，而nvm可以随意切换nodejs的版本，所以这才是我们想要的</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ nvm use <span class="token number">16</span>
Now using <span class="token function">node</span> v16.9.1 <span class="token punctuation">(</span>npm v7.21.1<span class="token punctuation">)</span>
$ <span class="token function">node</span> <span class="token parameter variable">-v</span>
v16.9.1
$ nvm use <span class="token number">14</span>
Now using <span class="token function">node</span> v14.18.0 <span class="token punctuation">(</span>npm v6.14.15<span class="token punctuation">)</span>
$ <span class="token function">node</span> <span class="token parameter variable">-v</span>
v14.18.0
$ nvm <span class="token function">install</span> <span class="token number">12</span>
Now using <span class="token function">node</span> v12.22.6 <span class="token punctuation">(</span>npm v6.14.5<span class="token punctuation">)</span>
$ <span class="token function">node</span> <span class="token parameter variable">-v</span>
v12.22.6</code></pre>

<p>上面是官方文档列出来的安装例子，我现在需要安装12.14版本，所以直接执行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">node</span> <span class="token function">install</span> <span class="token number">12</span></code></pre>

<p>因为都是12版本，小版本之间的差异不大，所以安装12.22版本也是可以的</p>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>nvm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-compose</title>
    <url>/2021/06/03/docker-compose/</url>
    <content><![CDATA[<p>首先要使用docker- compose那么就要下载其可执行文件</p>
<p>下载地址：<a href="https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64">https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</a></p>
<p>然后更改名字为docker-compose，接着移动到&#x2F;usr&#x2F;local&#x2F;bin目录下</p>
<span id="more"></span>

<p>因为这是一个可执行文件所以要赋值可执行权限</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> <span class="token function">docker-compose</span></code></pre>

<p>然后配置一下环境变量即可在全局使用</p>
<p>export PATH&#x3D;$JAVA_HOME&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;bin:$PATH</p>
<p>使用source使环境变量生效</p>
<p>这里我们创建一个同时拥有tomcat和mysql的compose，这样就可以同时管理两个容器，也可以单独通过docker命令管理</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3.1'</span>
services:
  mysql:           <span class="token comment"># 服务的名称</span>
    restart: always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    image: mysql:5.7.24  <span class="token comment"># 指定镜像路径可以是网络路径</span>
    container_name: mysql  <span class="token comment"># 指定容器名称：--name</span>
    ports:
      - <span class="token number">3306</span>:3306   <span class="token comment">#  指定端口号的映射</span>
    environment:
      MYSQL_ROOT_PASSWORD: <span class="token number">123456</span>   <span class="token comment"># 指定MySQL的ROOT用户登录密码</span>
      TZ: Asia/Shanghai        <span class="token comment"># 指定时区</span>
    volumes:
      - mysql_data:/var/lib/mysql   <span class="token comment"># 映射数据卷</span>
  tomcat:
    restart: always
    image: tomcat
    container_name: tomcat
    ports:
      - <span class="token number">8080</span>:8080
    environment:
      TZ: Asia/Shanghai
    volumes:
      - tomcat_webapps:/usr/local/tomcat/webapps
volumes:
  tomcat_webapps:
    external: <span class="token boolean">false</span>    <span class="token comment">#这里表明上面的数据卷名叫tomca_webapps的数据卷本地没有创建，需要自动创建，如果已存在这个名称的数据卷想要使用那么需要设置为true 如果是本地文件夹映射则不需要配置这一条</span>
  mysql_data:
    external: <span class="token boolean">false</span></code></pre>



<p>常用docker-compose命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 基于docker-compose.yml启动管理的容器</span>
<span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>

<span class="token comment"># 2. 关闭并删除容器</span>
<span class="token function">docker-compose</span> down

<span class="token comment"># 3. 开启|关闭|重启已经存在的由docker-compose维护的容器</span>
<span class="token function">docker-compose</span> start<span class="token operator">|</span>stop<span class="token operator">|</span>restart

<span class="token comment"># 4. 查看由docker-compose管理的容器</span>
<span class="token function">docker-compose</span> <span class="token function">ps</span>

<span class="token comment"># 5. 查看日志</span>
<span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span></code></pre>



<p>docker-compose结合Dockerfile</p>
<p>首先创建一个Dockerfile，里面的内容还是一样，创建一个tomcat镜像并复制项目到容器内</p>
<p>结合Dockerfile只需要在yml文件加上build语法即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yml文件</span>
version: <span class="token string">'3.1'</span>
services:
  ssm:
    restart: always
    build:            <span class="token comment"># 构建自定义镜像</span>
      context: ./      <span class="token comment"># 指定dockerfile文件的所在路径</span>
      dockerfile: Dockerfile   <span class="token comment"># 指定Dockerfile文件名称</span>
    image: ssm:1.0   <span class="token comment">#这里指定的就不是本地的容器而是我们想要生成的Dockerfile镜像的名称</span>
    container_name: ssm
    ports:
      - <span class="token number">8080</span>:8080
    environment:
      TZ: Asia/Shanghai</code></pre>

<p>这里要注意  使用yml生成的数据卷不会随着容器的删除而自动删除，所以下一次还会是这个容器的所有内容，可能会出现已经在yml中指定了新的mysql密码但是还是原来的密码这时候就要删除原来映射的数据卷重新运行docker-compose</p>
<p>要使用本地数据卷直接添加volumes即可 而要使用数据卷名的方式则需要指定数据卷是否已经存在</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>           <span class="token comment"># 服务的名称</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.24  <span class="token comment"># 指定镜像路径可以是网络路径</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql  <span class="token comment"># 指定容器名称：--name</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>   <span class="token comment">#  指定端口号的映射</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>   <span class="token comment"># 指定MySQL的ROOT用户登录密码</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql   <span class="token comment"># 映射数据卷</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">image</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> tomcat
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8080<span class="token punctuation">:</span><span class="token number">8080</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>   <span class="token comment">#配置数据卷</span>
      <span class="token punctuation">-</span> tomcat_webapps<span class="token punctuation">:</span>/usr/local/tomcat/webapps
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">tomcat_webapps</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token comment">#这里指定tomca_webapps这个数据卷不存在，请自动创建一个新的</span>
  <span class="token key atrule">mysql_data</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>     <span class="token comment">#这里也是一样</span></code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dockerfile创建甜糖镜像</title>
    <url>/2023/10/08/dockerfile%E5%88%9B%E5%BB%BA%E7%94%9C%E7%B3%96%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p>由于每次都使用别人的容器，总是觉得甜糖没有量，就想自己搭一个容器跑一下试试，试了用centos:7作为基础镜像无法运行，使用ubuntu可以正常运行甜糖</p>
<span id="more"></span>

<h2 id="1、拉取基础镜像"><a href="#1、拉取基础镜像" class="headerlink" title="1、拉取基础镜像"></a>1、拉取基础镜像</h2><p>可以使用常用的一些基础镜像为底层，比如debian、centos、ubuntu等等，如果基础镜像不适用你的应用程序，可以更换，这里以ubuntu为示例</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull ubuntu:latest</code></pre>

<h2 id="2、创建dockerfile"><a href="#2、创建dockerfile" class="headerlink" title="2、创建dockerfile"></a>2、创建dockerfile</h2><p>首先可以看一下官方部署甜糖脚本的gitee项目：<a href="https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy">https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy</a></p>
<p>安装脚本：<a href="https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/blob/master/setup.sh">https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/blob/master/setup.sh</a></p>
<p>脚本内容如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">cache</span><span class="token operator">=</span><span class="token string">"/mnt/data/ttnode"</span>
<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>
    <span class="token parameter variable">-c</span><span class="token operator">=</span>*<span class="token operator">|</span>--cache<span class="token operator">=</span>*<span class="token punctuation">)</span>
    <span class="token assign-left variable">cache</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;1<span class="token operator">#</span>*=&#125;</span>"</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>
    <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span>

<span class="token function">apt-get</span> update <span class="token parameter variable">-y</span>
<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> ca-certificates qrencode <span class="token function">unzip</span> <span class="token function">tar</span>
<span class="token function">apt-get</span> upgrade <span class="token function">tar</span> <span class="token function">unzip</span>

<span class="token assign-left variable">manager_x86</span><span class="token operator">=</span><span class="token string">"ttnode-manager-x86"</span>
<span class="token assign-left variable">manager_arm32</span><span class="token operator">=</span><span class="token string">"ttnode-manager-arm32"</span>
<span class="token assign-left variable">manager_arm64</span><span class="token operator">=</span><span class="token string">"ttnode-manager-arm64"</span>
<span class="token assign-left variable">arm32_url</span><span class="token operator">=</span><span class="token string">"https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/attach_files/1104920/download/ttnode-manager-arm32.tar.gz"</span>
<span class="token assign-left variable">arm64_url</span><span class="token operator">=</span><span class="token string">"https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/attach_files/1104919/download/ttnode-manager-arm64.tar.gz"</span>
<span class="token assign-left variable">x86_url</span><span class="token operator">=</span><span class="token string">"https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/attach_files/1104921/download/ttnode-manager-x86.tar.gz"</span>
<span class="token assign-left variable">deploy_dir</span><span class="token operator">=</span><span class="token string">"/usr/node"</span>
<span class="token assign-left variable">manager</span><span class="token operator">=</span>manager_arm32

<span class="token assign-left variable">platform</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-a</span><span class="token variable">)</span></span>
<span class="token keyword">case</span> <span class="token variable">$platform</span> <span class="token keyword">in</span>
    *x86*<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$x86_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_x86</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *amd64*<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$x86_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_x86</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *armv8*<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$arm64_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_arm64</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *arm64*<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$arm64_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_arm64</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *aarch64*<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$arm64_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_arm64</span>
        <span class="token punctuation">;</span><span class="token punctuation">;</span>
    *<span class="token punctuation">)</span>
        <span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token variable">$arm32_url</span>
        <span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$manager_arm32</span>
<span class="token keyword">esac</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$url</span>
<span class="token assign-left variable">tar_manager</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$manager</span>.tar.gz"</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /opt/app
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$cache</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$deploy_dir</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /usr/<span class="token variable">$tar_manager</span>

<span class="token builtin class-name">cd</span> /usr

<span class="token function">wget</span> <span class="token variable">$url</span>
<span class="token function">tar</span> <span class="token parameter variable">-xvf</span> <span class="token variable">$tar_manager</span>

<span class="token function">mv</span> <span class="token variable">$manager</span> <span class="token function">node</span>

<span class="token builtin class-name">cd</span> /usr/node
<span class="token builtin class-name">echo</span> <span class="token variable">$cache</span> <span class="token operator">></span> config.txt
<span class="token function">chmod</span> +x ttnode_manager

<span class="token comment"># 开机启动设置</span>
<span class="token function">wget</span> <span class="token string">"https://gitee.com/shenzhen-sweet-sugar/ttnode-auto-deploy/raw/master/rc.local"</span>
<span class="token function">cp</span> <span class="token variable">$deploy_dir</span>/rc.local /etc/rc.local
<span class="token function">chmod</span> +x /etc/rc.local
systemctl daemon-reload

/etc/rc.local
</code></pre>

<p>可以看到步骤大概如下：</p>
<p>第一步根据系统类型下载不同的压缩包，我这里是x86_64的系统，所以下载ttnode-manager-x86.tar.gz</p>
<p>第二步将ttnode-manager-x86.tar.gz解压到&#x2F;usr并重命名为node</p>
<p>第三步安装所需命令</p>
<p>apt-get update -y<br>apt-get install -y wget ca-certificates qrencode unzip tar<br>apt-get upgrade tar unzip</p>
<p>第四步创建所需文件夹</p>
<p>mkdir -p &#x2F;opt&#x2F;app</p>
<p>mkdir -p &#x2F;mnt&#x2F;data&#x2F;ttnode</p>
<p>第五步将缓存目录写入配置文件</p>
<p>echo &#x2F;mnt&#x2F;data&#x2F;ttnode &gt; &#x2F;usr&#x2F;node&#x2F;config.txt</p>
<p>赋权启动脚本</p>
<p>chmod 777 &#x2F;usr&#x2F;node&#x2F;ttnode_manager</p>
<p>启动脚本</p>
<p>.&#x2F;ttnode_manager</p>
<p>根据如上步骤编写Dockerfile如下：</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 使用基础镜像CentOS 7</span>
<span class="token comment">#FROM centos:7</span>
<span class="token instruction"><span class="token keyword">FROM</span> ubuntu:latest</span>

<span class="token comment"># 第一步：更新系统并安装所需命令</span>
<span class="token instruction"><span class="token keyword">RUN</span> apt-get update -y &amp;&amp; <span class="token operator">\</span>
    apt-get install -y wget ca-certificates qrencode unzip tar</span>

<span class="token comment"># 第二步：将ttnode-manager-x86.tar.gz自动解压到/usr并重命名为node</span>
<span class="token instruction"><span class="token keyword">ADD</span> ttnode-manager-x86.tar.gz /usr/</span>
<span class="token instruction"><span class="token keyword">RUN</span> mv /usr/ttnode-manager-x86 /usr/node</span>

<span class="token comment"># 第三步：创建所需文件夹</span>
<span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /opt/app &amp;&amp; <span class="token operator">\</span>
    mkdir -p /mnt/data/ttnode</span>

<span class="token comment"># 第四步：将缓存目录写入配置文件</span>
<span class="token instruction"><span class="token keyword">RUN</span> echo <span class="token string">"/mnt/data/ttnode"</span> > /usr/node/config.txt</span>

<span class="token comment"># 第五步：赋权启动脚本</span>
<span class="token instruction"><span class="token keyword">RUN</span> chmod 777 /usr/node/ttnode_manager</span>
<span class="token comment">#指定脚本工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /usr/node</span>
<span class="token comment"># 启动脚本</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"./ttnode_manager"</span>]</span>
<span class="token comment">#CMD ["sleep", "infinity"]</span></code></pre>

<h2 id="3、构建镜像"><a href="#3、构建镜像" class="headerlink" title="3、构建镜像"></a>3、构建镜像</h2><p>执行如下命令使用Dockerfile构建出自己的镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> mynode:1.0 <span class="token builtin class-name">.</span></code></pre>

<p>mynode：构建镜像的名称</p>
<p>1.0：镜像版本 如果不给则为latest，即最新版本</p>
<h2 id="4、创建docker-compose启动脚本"><a href="#4、创建docker-compose启动脚本" class="headerlink" title="4、创建docker-compose启动脚本"></a>4、创建docker-compose启动脚本</h2><p>由于不想给太大的内存，所以可以在脚本中设置内存限制，这里设置为2g</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">ttnode</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mynode
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ttnode
    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">resources</span><span class="token punctuation">:</span>
        <span class="token key atrule">limits</span><span class="token punctuation">:</span>
          <span class="token key atrule">memory</span><span class="token punctuation">:</span> 2g
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /nodetemp<span class="token punctuation">:</span>/mnt/data/ttnode</code></pre>

<h2 id="5、使用兼容模式设置启动容器"><a href="#5、使用兼容模式设置启动容器" class="headerlink" title="5、使用兼容模式设置启动容器"></a>5、使用兼容模式设置启动容器</h2><p>由于使用了内存限制，所以需要使用兼容模式启动docker-compose，否则内存限制不生效</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> <span class="token parameter variable">--compatibility</span> up <span class="token parameter variable">-d</span></code></pre>

<p>–compatibility：使用兼容性运行</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>dockerfile</tag>
        <tag>ttnode</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mysql5.7</title>
    <url>/2021/06/03/docker%E5%AE%89%E8%A3%85mysql5.7/</url>
    <content><![CDATA[<p>docker安装mysql5.7</p>
<p>这里已经配置好了docker的阿里云加速器</p>
<p>然后我们直接通过命令拉取5.7版本的mysql，这里以5.7.24版本为例</p>
<p>如果是5.7.4版本没有在&#x2F;etc下生成一个mysql文件夹那么就需要自己通过命令创建并创建my.cnf配置文件</p>
<p>拉取镜像</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7.24</code></pre>

<p>拉取完成后可以查看一下是否拉取成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images</code></pre>
<span id="more"></span>
<p>拉取成功镜像后我们就可以通过命令来使用镜像来创建并运行一个mysql容器</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span> mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:5.7.24</code></pre>

<p>如果出现容器号码没有报错就成功了</p>
<p>然后我们就可以查看一下容器是否成功运行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span></code></pre>

<p>安装完成后我们还要设置一下字符编码，而docker中的mysql是默认root用户是可以远程访问的这里就不需要再进行设置了</p>
<p>要更改配置首先要进入容器内</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名或容器id <span class="token function">bash</span></code></pre>

<p>然后我们可以修改&#x2F;etc&#x2F;mysql&#x2F;my.cnf这个配置文件</p>
<p>如果存在像mysql5.7.4这样的没有这个文件夹的话那么就自己先创建一个就好了</p>
<p>然后改为如下配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>
default-character-set<span class="token operator">=</span>utf8

<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
default-storage-engine<span class="token operator">=</span>INNODB
character-set-server<span class="token operator">=</span>utf8
collation-server<span class="token operator">=</span>utf8_general_ci</code></pre>

<p>client的配置一定要在上方，否则会报错</p>
<p>配置好后重启docker容器即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart 容器名或id</code></pre>

<p>查看mysql数据库编码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">show variables like <span class="token string">'%character%'</span><span class="token punctuation">;</span></code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装nginx</title>
    <url>/2021/06/03/docker%E5%AE%89%E8%A3%85nginx/</url>
    <content><![CDATA[<p>首先要使用nginx就要先从docker中拉取镜像，这里可以通过docker-compose的yml的方式进行配置</p>
<p>创建docker-compose.yml文件并写入内容</p>
<span id="more"></span>

<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>           <span class="token comment"># 服务的名称</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token comment"># 指定镜像  本地没有则会自动从docker云镜像拉取</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx  <span class="token comment"># 指定容器名称：--name</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>   <span class="token comment">#  指定端口号的映射</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span></code></pre>

<p>这样我们就创建好了一个nginx的容器</p>
<h2 id="nginx反向代理"><a href="#nginx反向代理" class="headerlink" title="nginx反向代理"></a>nginx反向代理</h2><p>反向代理即客户端直接访问nginx服务器然后nginx再把请求转发到对应的服务器，这样可以有效的隐藏ip</p>
<p>比如liunx不开启8080端口的防火墙那么外网就无法访问liunx内部的tomcat，但是外网可以访问nginx然后nginx再把请求转发到tomcat，这样一来就相当于访问nginx就是访问tomcat而且端口也不需要改变</p>
<p>首先修改yml配置文件，添加一个数据卷映射</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">version: <span class="token string">'3.1'</span>
services:
  nginx:           <span class="token comment"># 服务的名称</span>
    restart: always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    image: nginx  <span class="token comment"># 指定镜像  本地没有则会自动从docker云镜像拉取</span>
    container_name: nginx  <span class="token comment"># 指定容器名称：--name</span>
    ports:
      - <span class="token number">80</span>:80   <span class="token comment">#  指定端口号的映射</span>
    environment:
      TZ: Asia/Shanghai        <span class="token comment"># 指定时区</span>
    volumes:
      - nginx_conf:/etc/nginx/conf.d   <span class="token comment"># 映射数据卷</span>

volumes:
  nginx_conf:
    external: <span class="token boolean">false</span></code></pre>



<p>然后到数据卷的存放位置就可以看到nginx的配置文件default.conf</p>
<p>编辑这个文件，然后整个文件的内容如下</p>
<pre class="language-conf" data-language="conf"><code class="language-conf">server &#123;
    listen       80;
    server_name  localhost;

    location &#x2F; &#123;
        proxy_pass http:&#x2F;&#x2F;192.168.148.2:8080; #这里一定要加分号否则会无法启动
    &#125;
&#125;</code></pre>

<p>proxy_pass 就是代理的地址  listne就是监听的地址，只要访问了nginx的80端口那么就会自动去访问代理地址，也就是做转发的操作</p>
<p>访问192.168.148.2就会自动访问本机的tomcat  </p>
<p>localton路径匹配</p>
<pre class="language-conf" data-language="conf"><code class="language-conf"># 1. 直接匹配
location &#x3D; &#x2F; &#123;
  # 精准匹配，主机名后面不能带任何的字符串
&#125;

# 2. 通用匹配
location &#x2F;images &#123;
  # 匹配所有以&#x2F;xxx开头的路径
&#125;

# 3. 匹配开头路径
location ^~ &#x2F;images&#x2F; &#123;
  # 匹配所有以&#x2F;images开头的路径
&#125;

# 4. 正则匹配
location ~ &#x2F;images &#123;
  # 匹配所有以&#x2F;xxx开头的路径
&#125;

# 5. 匹配后缀
location ~* \.(gif|jpg|png)$ &#123;
  # 匹配以gif或者jpg或者png为结尾的路径
&#125;

# 6. 全部通配
location &#x2F; &#123;
  # 匹配全部路径  
&#125;</code></pre>



<h2 id="nginx负载均衡"><a href="#nginx负载均衡" class="headerlink" title="nginx负载均衡"></a>nginx负载均衡</h2><p>负载均衡策略有三种，分别是轮询，权重，ip</p>
<p>首先找到nginx的配置文件一样是default.conf</p>
<h3 id="轮询"><a href="#轮询" class="headerlink" title="轮询"></a>轮询</h3><p>然后在里面修改为如下配置</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">upstream tomcat <span class="token punctuation">&#123;</span>
  server 192.168.148.2<span class="token punctuation">:</span>8080 ;
  server 192.168.148.2<span class="token punctuation">:</span>8081;
<span class="token punctuation">&#125;</span>


server <span class="token punctuation">&#123;</span>
    listen       80;
    server_name  localhost;

    location / <span class="token punctuation">&#123;</span>
        proxy_pass http<span class="token punctuation">:</span>//tomcat; <span class="token comment">#这里一定要加分号否则会无法启动</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>负载均衡实际上就是在配置文件的基础上加一个upstream 然后配置需要访问的ip，默认是轮询的方式也就是两个ip平均访问，而权重则需要在旁边添加一个比重</p>
<h3 id="权重"><a href="#权重" class="headerlink" title="权重"></a>权重</h3><p>权重实际上就是在后面加上weight  其他的不变  权重大的会被访问的次数更多</p>
<pre class="language-none"><code class="language-none">upstream tomcat &#123;
  server 192.168.148.2:8080 weight&#x3D;权重比例;
  server 192.168.148.2:8081 weight&#x3D;权重比例;
&#125;


server &#123;
    listen       80;
    server_name  localhost;

    location &#x2F; &#123;
        proxy_pass http:&#x2F;&#x2F;tomcat; #这里一定要加分号否则会无法启动
    &#125;
&#125;</code></pre>

<h3 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h3><p>ip_hash则是用户第一次访问的时候访问到哪一个那么以后这个用户就会一直访问到这个服务器，只需要在配置服务的上方添加一条语句ip_hash即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">upstream tomcat <span class="token punctuation">&#123;</span>
  ip_hash<span class="token punctuation">;</span>
  server <span class="token number">192.168</span>.148.2:8080<span class="token punctuation">;</span>
  server <span class="token number">192.168</span>.148.2:8081<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


server <span class="token punctuation">&#123;</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>

    location / <span class="token punctuation">&#123;</span>
        proxy_pass http://tomcat<span class="token punctuation">;</span> <span class="token comment">#这里一定要加分号否则会无法启动</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>





<h2 id="nginx动静分离"><a href="#nginx动静分离" class="headerlink" title="nginx动静分离"></a>nginx动静分离</h2><h3 id="动态资源代理"><a href="#动态资源代理" class="headerlink" title="动态资源代理"></a>动态资源代理</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置如下</span>
location / <span class="token punctuation">&#123;</span>
  proxy_pass 路径<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="静态资源代理"><a href="#静态资源代理" class="headerlink" title="静态资源代理"></a>静态资源代理</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置如下location / &#123;  root 静态资源路径;  index 默认访问路径下的什么资源;  autoindex on; # 代表展示静态资源全的全部内容，以列表的形式展开。&#125;# 先修改nginx的docker-compose.yml文件，添加一个数据卷，映射到Nginx服务器的一个目录 - /opt/docker_nginx/html:/data/html - /opt/docker_nginx/img:/data/img# 添加了index.html和1.jpg静态资源# 修改default.conf配置文件   location /html &#123;      root /data;      index index.html;   &#125;   location /img &#123;      root /data;      autoindex on;   &#125;</span></code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>docker搭建nacos</title>
    <url>/2021/11/23/docker%E6%90%AD%E5%BB%BAnacos/</url>
    <content><![CDATA[<p>nacos有两种连接方式，第一种是不连接数据库运行，第二种是连接数据库运行。</p>
<p>不连接数据库时所有的数据会放在内存中，当nacos重启后数据就会被删除，当nacos连接数据库后，则所有的数据都会存放在数据库当中，重启后数据还是存在的。</p>
<p>首先我们可以从最简单的搭建开始，也就是不连接数据库，进行一个简单尝试，当我们看到nacos的后台界面熟悉了操作后我们再配置数据库连接即可。</p>
<p>这里我们采用docker-compose的方式来启动</p>
<h2 id="配置docker-compose文件"><a href="#配置docker-compose文件" class="headerlink" title="配置docker-compose文件"></a>配置docker-compose文件</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.1"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server<span class="token punctuation">:</span>2.0.3
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone
      <span class="token key atrule">JVM_XMS</span><span class="token punctuation">:</span> 512m
      <span class="token key atrule">JVM_MMS</span><span class="token punctuation">:</span> 320m
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8848<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token punctuation">-</span> 9848<span class="token punctuation">:</span><span class="token number">9848</span>
      <span class="token punctuation">-</span> 9849<span class="token punctuation">:</span><span class="token number">9849</span>
</code></pre>

<p>保存后使用<code>docker-compose up -d</code>启动即可</p>
<p>注意：当nacos客户端升级为2.x版本后，新增了gRPC的通信方式，新增了两个端口。这两个端口在nacos原先的端口上(默认8848)，进行一定偏移量自动生成。即9848，9849</p>
<p>以上就是简单的不配置数据库简单启动nacos单机版的方法</p>
<p>然后我们输入<a href="http://ip:8848/nacos">http://ip:8848/nacos</a> 即可访问nacos</p>
<p>账号和密码都是nacos</p>
<h2 id="nacos连接数据库"><a href="#nacos连接数据库" class="headerlink" title="nacos连接数据库"></a>nacos连接数据库</h2><p>nacos配置数据库文件在&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;application.properties中，所以我们要映射一个数据卷到docker容器中即可</p>
<p>但是这里需要注意的是，nacos连接数据库需要指定数据库的ip，所以需要将nacos和数据库放在同一个网段，这里我们的mysql也是使用docker容器创建，所以我们可以创建一个network，将mysql和nacos放在同一个network中即可，当然我们也可以将nacos容器映射到宿主机同一个ip上，即采用host模式也可以达到同样的效果</p>
<p>我们先创建一个network</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create mysql_default</code></pre>

<p>如果遇到创建network报错的情况可以尝试重启docker服务来解决，我就是这样就可以创建了</p>
<p>然后我们启动mysql，并指定mysql采用我们刚刚创建好的network即可</p>
<p>即在docker-compse添加如下代码</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_default</code></pre>

<p>然后我们还需要在最外层指定这个network是已经存在的，所以还需要在docker-compose文件中添加如下代码</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_default</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>最终mysql的配置文件如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>           <span class="token comment"># 服务的名称</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.24  <span class="token comment"># 指定镜像路径可以是网络路径</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql  <span class="token comment"># 指定容器名称：--name</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 3306<span class="token punctuation">:</span><span class="token number">3306</span>   <span class="token comment">#  指定端口号的映射</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_default  <span class="token comment">#指定网桥</span>
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> <span class="token number">123456</span>   <span class="token comment"># 指定MySQL的ROOT用户登录密码</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_data<span class="token punctuation">:</span>/var/lib/mysql   <span class="token comment"># 映射数据卷</span>
<span class="token key atrule">volumes</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_data</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
    <span class="token key atrule">mysql_default</span><span class="token punctuation">:</span>
      <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>

<p>搭建好mysql后我们还需要导入nacos需要的表，具体的表内容也可以参照官方的GitHub</p>
<p><a href="https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql">https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql</a></p>
<p>如果GitHub进不去可以直接复制下面的sql执行</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">/*
 * Copyright 1999-2018 Alibaba Group Holding Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = config_info   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>config_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'data_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">longtext</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'content'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>md5<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'md5'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_user<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token keyword">COMMENT</span> <span class="token string">'source user'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_ip<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'source ip'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>app_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'租户字段'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>c_desc<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>c_use<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>effect<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>c_schema<span class="token punctuation">`</span></span> <span class="token keyword">text</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_configinfo_datagrouptenant<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'config_info'</span><span class="token punctuation">;</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = config_info_aggr   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>config_info_aggr<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'data_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'group_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>datum_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'datum_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">longtext</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'内容'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>app_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'租户字段'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_configinfoaggr_datagrouptenantdatum<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>datum_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'增加租户字段'</span><span class="token punctuation">;</span>


<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = config_info_beta   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>config_info_beta<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'data_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'group_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>app_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'app_name'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">longtext</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'content'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>beta_ips<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'betaIps'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>md5<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'md5'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_user<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token keyword">COMMENT</span> <span class="token string">'source user'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_ip<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'source ip'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'租户字段'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_configinfobeta_datagrouptenant<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'config_info_beta'</span><span class="token punctuation">;</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = config_info_tag   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>config_info_tag<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'data_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'group_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'tenant_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tag_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'tag_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>app_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'app_name'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">longtext</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'content'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>md5<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'md5'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_user<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token keyword">COMMENT</span> <span class="token string">'source user'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_ip<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'source ip'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_configinfotag_datagrouptenanttag<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tag_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'config_info_tag'</span><span class="token punctuation">;</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = config_tags_relation   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>config_tags_relation<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tag_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'tag_name'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tag_type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'tag_type'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'data_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'group_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'tenant_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>nid<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>nid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_configtagrelation_configidtag<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tag_name<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tag_type<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_tenant_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'config_tag_relation'</span><span class="token punctuation">;</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = group_capacity   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>group_capacity<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'Group ID，空字符表示整个集群'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>quota<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'配额，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>usage<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'使用量'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_size<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'单个配置大小上限，单位为字节，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_aggr_count<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'聚合子配置最大个数，，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_aggr_size<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_history_count<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'最大变更历史数量'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_group_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'集群、各Group容量信息表'</span><span class="token punctuation">;</span>

<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = his_config_info   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>his_config_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>nid<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>group_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>app_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'app_name'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">longtext</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>md5<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_user<span class="token punctuation">`</span></span> <span class="token keyword">text</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>src_ip<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>op_type<span class="token punctuation">`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'租户字段'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>nid<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_gmt_create<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_gmt_modified<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_did<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>data_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'多租户改造'</span><span class="token punctuation">;</span>


<span class="token comment">/******************************************/</span>
<span class="token comment">/*   数据库全名 = nacos_config   */</span>
<span class="token comment">/*   表名称 = tenant_capacity   */</span>
<span class="token comment">/******************************************/</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tenant_capacity<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'Tenant ID'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>quota<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'配额，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>usage<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'使用量'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_size<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'单个配置大小上限，单位为字节，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_aggr_count<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'聚合子配置最大个数'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_aggr_size<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>max_history_count<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'0'</span> <span class="token keyword">COMMENT</span> <span class="token string">'最大变更历史数量'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_tenant_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'租户容量信息表'</span><span class="token punctuation">;</span>


<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>tenant_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>kp<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'kp'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'tenant_id'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'tenant_name'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>tenant_desc<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'tenant_desc'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>create_source<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'create_source'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_create<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'创建时间'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>gmt_modified<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'修改时间'</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_tenant_info_kptenantid<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>kp<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_tenant_id<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COLLATE</span><span class="token operator">=</span>utf8_bin <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'tenant_info'</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>users<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">`</span>enabled<span class="token punctuation">`</span></span> <span class="token keyword">boolean</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>roles<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
	<span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	<span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
	<span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>idx_user_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">ASC</span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span> <span class="token keyword">ASC</span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>permissions<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>resource<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>action<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>uk_role_permission<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>role<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>resource<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>action<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> users <span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">,</span> enabled<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'nacos'</span><span class="token punctuation">,</span> <span class="token string">'$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu'</span><span class="token punctuation">,</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> roles <span class="token punctuation">(</span>username<span class="token punctuation">,</span> role<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'nacos'</span><span class="token punctuation">,</span> <span class="token string">'ROLE_ADMIN'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>我们重新配置一下naocs的docker-compose文件并使用我们创建的network网桥</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3.1"</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nacos</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nacos/nacos<span class="token punctuation">-</span>server<span class="token punctuation">:</span>2.0.3
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nacos
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> mysql_default
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MODE</span><span class="token punctuation">:</span> standalone
      <span class="token key atrule">JVM_XMS</span><span class="token punctuation">:</span> 512m
      <span class="token key atrule">JVM_MMS</span><span class="token punctuation">:</span> 320m
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./application.properties<span class="token punctuation">:</span>/home/nacos/conf/application.properties
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8848<span class="token punctuation">:</span><span class="token number">8848</span>
      <span class="token punctuation">-</span> 9848<span class="token punctuation">:</span><span class="token number">9848</span>
      <span class="token punctuation">-</span> 9849<span class="token punctuation">:</span><span class="token number">9849</span>
<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">mysql_default</span><span class="token punctuation">:</span>
    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></code></pre>



<p>因为我们使用了数据卷的映射，所以我们还需要准备好application.properties这个文件，具体的内容如下；</p>
<pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># spring</span>
<span class="token key attr-name">server.servlet.contextPath</span><span class="token punctuation">=</span><span class="token value attr-value">/nacos</span>
<span class="token key attr-name">server.contextPath</span><span class="token punctuation">=</span><span class="token value attr-value">/nacos</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8848</span>
<span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">mysql</span>
<span class="token key attr-name">nacos.cmdb.dumpTaskInterval</span><span class="token punctuation">=</span><span class="token value attr-value">3600</span>
<span class="token key attr-name">nacos.cmdb.eventTaskInterval</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">nacos.cmdb.labelTaskInterval</span><span class="token punctuation">=</span><span class="token value attr-value">300</span>
<span class="token key attr-name">nacos.cmdb.loadDataAtStart</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">db.num</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://172.22.0.2:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span>
<span class="token key attr-name">db.url.1</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://172.22.0.2:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span>
<span class="token key attr-name">db.user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">db.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span>
<span class="token comment">### The auth system to use, currently only 'nacos' is supported:</span>
<span class="token key attr-name">nacos.core.auth.system.type</span><span class="token punctuation">=</span><span class="token value attr-value">nacos</span>


<span class="token comment">### The token expiration in seconds:</span>
<span class="token key attr-name">nacos.core.auth.default.token.expire.seconds</span><span class="token punctuation">=</span><span class="token value attr-value">18000</span>

<span class="token comment">### The default token:</span>
<span class="token key attr-name">nacos.core.auth.default.token.secret.key</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;</span>

<span class="token comment">### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.</span>
<span class="token key attr-name">nacos.core.auth.caching.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;</span>
<span class="token key attr-name">nacos.core.auth.enable.userAgentAuthWhite</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_AUTH_USER_AGENT_AUTH_WHITE_ENABLE:false&#125;</span>
<span class="token key attr-name">nacos.core.auth.server.identity.key</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_AUTH_IDENTITY_KEY:serverIdentity&#125;</span>
<span class="token key attr-name">nacos.core.auth.server.identity.value</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_AUTH_IDENTITY_VALUE:security&#125;</span>
<span class="token key attr-name">server.tomcat.accesslog.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;</span>
<span class="token key attr-name">server.tomcat.accesslog.pattern</span><span class="token punctuation">=</span><span class="token value attr-value">%h %l %u %t "%r" %s %b %D</span>
<span class="token comment"># default current work dir</span>
<span class="token key attr-name">server.tomcat.basedir</span><span class="token punctuation">=</span>
<span class="token comment">## spring security config</span>
<span class="token comment">### turn off security</span>
<span class="token key attr-name">nacos.security.ignore.urls</span><span class="token punctuation">=</span><span class="token value attr-value">$&#123;NACOS_SECURITY_IGNORE_URLS:/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**&#125;</span>
<span class="token comment"># metrics for elastic search</span>
<span class="token key attr-name">management.metrics.export.elastic.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>
<span class="token key attr-name">management.metrics.export.influx.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span>

<span class="token key attr-name">nacos.naming.distro.taskDispatchThreadCount</span><span class="token punctuation">=</span><span class="token value attr-value">10</span>
<span class="token key attr-name">nacos.naming.distro.taskDispatchPeriod</span><span class="token punctuation">=</span><span class="token value attr-value">200</span>
<span class="token key attr-name">nacos.naming.distro.batchSyncKeyCount</span><span class="token punctuation">=</span><span class="token value attr-value">1000</span>
<span class="token key attr-name">nacos.naming.distro.initDataRatio</span><span class="token punctuation">=</span><span class="token value attr-value">0.9</span>
<span class="token key attr-name">nacos.naming.distro.syncRetryDelay</span><span class="token punctuation">=</span><span class="token value attr-value">5000</span>
<span class="token key attr-name">nacos.naming.data.warmup</span><span class="token punctuation">=</span><span class="token value attr-value">true</span></code></pre>

<p>只需要修改以下几个值即可，其他的保持默认</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">db.url.0  配置数据库的ip端口及数据库名称
db.url.1  配置数据库的ip端口及数据库名称
db.user   配置你的数据库的登录用户名
db.password 配置你的数据库的登录密码</code></pre>

<p>这里注意，因为刚刚我们将nacos放在了和mysql一样的network 下，所以我们还需要获取mysql的容器ip，使用如下命令获取：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect mysql的容器名称 <span class="token operator">|</span><span class="token function">grep</span> IPAddress</code></pre>

<p>然后填写到配置文件中即可，如果填错了那么查看nacos的日志会发现一直报错<code>no datasource set</code></p>
<p>使用如下命令查看启动nacos的实时日志：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> nacos</code></pre>

<p>如果没有报错的话，那么恭喜你到这里搭建nacos单机版就成功了</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>nacos</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot程序启动或退出时执行操作</title>
    <url>/2021/09/25/SpringBoot%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%88%96%E9%80%80%E5%87%BA%E6%97%B6%E6%89%A7%E8%A1%8C%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="启动时"><a href="#启动时" class="headerlink" title="启动时"></a>启动时</h3><h4 id="1-实现CommandLineRunner接口"><a href="#1-实现CommandLineRunner接口" class="headerlink" title="1.实现CommandLineRunner接口"></a>1.实现CommandLineRunner接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandLineRunnerTest</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试CommandLineRunner的示例。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<span id="more"></span>

<h4 id="2-实现ApplicationRunner接口"><a href="#2-实现ApplicationRunner接口" class="headerlink" title="2.实现ApplicationRunner接口"></a>2.实现ApplicationRunner接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationRunnerTest</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">ApplicationArguments</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是测试ApplicationRunner接口"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>@Order注解：如果有多个实现类，而你需要他们按一定顺序执行的话，可以在实现类上加上@Order注解。@Order(value&#x3D;整数值)。SpringBoot会按照@Order中的value值从小到大依次执行。也就是先执行 1 再执行 2</p>
<p>@Component注解：把普通pojo实例化到spring容器中，泛指各种组件，就是说当我们的类不属于各种归类的时候（@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p>
<h3 id="结束时"><a href="#结束时" class="headerlink" title="结束时"></a>结束时</h3><h4 id="1-实现DisposableBean接口"><a href="#1-实现DisposableBean接口" class="headerlink" title="1.实现DisposableBean接口"></a>1.实现DisposableBean接口</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisposableBeanTest</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"springboot程序结束  implements DisposableBean "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="2-通过-PreDistroy注解"><a href="#2-通过-PreDistroy注解" class="headerlink" title="2.通过@PreDistroy注解"></a>2.通过@PreDistroy注解</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExitCode</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"springboot程序结束 执行@PreDestroy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>docker部署jar包</title>
    <url>/2023/09/10/docker%E9%83%A8%E7%BD%B2jar%E5%8C%85/</url>
    <content><![CDATA[<p>由于普通部署jar包的方式较为繁琐，我们使用docker则相对较为简单，例如有多个jar包需要启动，则需要逐个启动，或者使用一个脚本启动，而启动后如果机器断电则无法保证服务能立即启动，当然也可以将需要启动的服务加入自启动，但是如果对于多台服务器都要部署同样的服务则较为繁琐，可能需要安装各种依赖导致部署时间过长，而使用docker则可以在各个机器拉取镜像即可启动，无需额外安装软件。</p>
<span id="more"></span>

<h2 id="1、制作镜像部署jar包"><a href="#1、制作镜像部署jar包" class="headerlink" title="1、制作镜像部署jar包"></a>1、制作镜像部署jar包</h2><p>通常更推荐这种方式来部署，因为如果新构建的镜像如果跑不动则可以立即切换到上一个版本的镜像，但是每次改动代码都要重新构建一个新的镜像。</p>
<h3 id="1-1新建Dockerfile"><a href="#1-1新建Dockerfile" class="headerlink" title="1.1新建Dockerfile"></a>1.1新建Dockerfile</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> Dockerfile</code></pre>

<h3 id="1-2编辑Dockerfile内容"><a href="#1-2编辑Dockerfile内容" class="headerlink" title="1.2编辑Dockerfile内容"></a>1.2编辑Dockerfile内容</h3><p>这里以ruoyi服务举个例子</p>
<pre class="language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">FROM</span> openjdk:8-jdk-alpine</span>
<span class="token instruction"><span class="token keyword">MAINTAINER</span> ruoyi</span>
<span class="token instruction"><span class="token keyword">ADD</span> ruoyi-modules-system.jar /app/system.jar</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 9201</span>
<span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"java"</span>,<span class="token string">"-jar"</span>,<span class="token string">"/app/system.jar"</span>]</span></code></pre>

<p>FROM：以什么镜像为基础镜像</p>
<p>MAINTAINER：作者</p>
<p>ADD：将什么文件复制到容器内部</p>
<p>EXPOSE：镜像所需端口</p>
<p>ENTRYPOINT：运行容器后执行的命令</p>
<h3 id="1-3构建镜像"><a href="#1-3构建镜像" class="headerlink" title="1.3构建镜像"></a>1.3构建镜像</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> ruoyi-system:1.0 <span class="token builtin class-name">.</span></code></pre>

<p>ruoyi-system:镜像名称</p>
<p>1.0:镜像版本号</p>
<h3 id="1-4运行容器"><a href="#1-4运行容器" class="headerlink" title="1.4运行容器"></a>1.4运行容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>ruoyi-system <span class="token parameter variable">-p</span> <span class="token number">9201</span>:9201 ruoyi-system:1.0</code></pre>

<h2 id="2、不构建镜像直接运行jar包"><a href="#2、不构建镜像直接运行jar包" class="headerlink" title="2、不构建镜像直接运行jar包"></a>2、不构建镜像直接运行jar包</h2><p>这种方式的好处就是不需要每次都构建镜像，只需要将jar包上传到服务器重启指定的服务即可，但是无法像构建镜像那样有问题马上回滚到上一个版本。所以生产环境使用第一种方式</p>
<h3 id="2-1拉取基础镜像"><a href="#2-1拉取基础镜像" class="headerlink" title="2.1拉取基础镜像"></a>2.1拉取基础镜像</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull openjdk:8-jdk-alpine</code></pre>

<h3 id="2-2创建docker-compose"><a href="#2-2创建docker-compose" class="headerlink" title="2.2创建docker-compose"></a>2.2创建docker-compose</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> docker-compose.yml</code></pre>

<h3 id="2-3编辑docker-compose内容"><a href="#2-3编辑docker-compose内容" class="headerlink" title="2.3编辑docker-compose内容"></a>2.3编辑docker-compose内容</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">ruoyi-system</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>alpine
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>system
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/ruoyi/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>system.jar<span class="token punctuation">:</span>/usr/local/data/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>system.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/data/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>system.jar
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9201:9201"</span>
  <span class="token key atrule">ruoyi-gateway</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>alpine
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>gateway
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/ruoyi/ruoyi<span class="token punctuation">-</span>gateway.jar<span class="token punctuation">:</span>/usr/local/data/ruoyi<span class="token punctuation">-</span>gateway.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/data/ruoyi<span class="token punctuation">-</span>gateway.jar
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>system
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9080:9080"</span>
  <span class="token key atrule">ruoyi-auth</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>alpine
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>auth
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/ruoyi/ruoyi<span class="token punctuation">-</span>auth.jar<span class="token punctuation">:</span>/usr/local/data/ruoyi<span class="token punctuation">-</span>auth.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/data/ruoyi<span class="token punctuation">-</span>auth.jar
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>system
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9200:9200"</span>
  <span class="token key atrule">ruoyi-job</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span>8<span class="token punctuation">-</span>jdk<span class="token punctuation">-</span>alpine
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ruoyi<span class="token punctuation">-</span>job
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> /root/ruoyi/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>job.jar<span class="token punctuation">:</span>/usr/local/data/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>job.jar
    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /usr/local/data/ruoyi<span class="token punctuation">-</span>modules<span class="token punctuation">-</span>job.jar
    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ruoyi<span class="token punctuation">-</span>system
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">"9203:9203"</span></code></pre>

<p>切记，以容器运行jar必须指定时区，否则程序默认获取到的时间是美国时间</p>
<h3 id="2-4运行容器"><a href="#2-4运行容器" class="headerlink" title="2.4运行容器"></a>2.4运行容器</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span></code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>fcrackzip破解zip</title>
    <url>/2021/03/28/fcrackzip%E7%A0%B4%E8%A7%A3zip/</url>
    <content><![CDATA[<p>前言：fcrackzip只能破解zip文件，如果遇到其他的压缩格式破解不了，那么就有人问了可不可以把后缀改成zip然后破解密码呢，答案是不行，我创建了一个7z的压缩包然后把.7z改成.zip，结果直接报错：<code>found id afbc7a37, &#39;test.zip&#39; is not a zipfile ver 2.xx, skipping no usable files found</code></p>
<p>并且压缩包的名字不能太过复杂，如果有请改为简单的名字，比如test.zip </p>
<p>如果比较复杂可能会不开始破解</p>
<p>如果要破解rar、7z等格式可以尝试rarcrack或者john哈希破解</p>
<span id="more"></span>

<p>教程开始</p>
<p>首先我们先创建一个有密码的压缩包，然后安装fcrackzip</p>
<p>安装：</p>
<p>mac可以通过brew安装，ubuntu可以通过apt-get安装</p>
<p>如果mac没有安装<strong>brew</strong>可以通过如下命令安装<strong>brew</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/bin/zsh <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh<span class="token variable">)</span></span>"</span></code></pre>

<p>这里使用的是国内的gitee的源，所以会比较快</p>
<p>然后我们就可以开始安装了</p>
<p><strong>MAC</strong>安装指令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> fcrackzip</code></pre>

<p><strong>Linux Ubuntu</strong>安装指令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> fcrackzip</code></pre>

<p><strong>Windows安装包：</strong></p>
<p><a href="http://blog.rubypdf.com/2008/10/15/fcrackzip-10-windows-version-releases/">http://blog.rubypdf.com/2008/10/15/fcrackzip-10-windows-version-releases/</a> </p>
<p><strong>部分重要参数说明</strong> </p>
<blockquote>
<dl><dt>-c 指定字符集，字符集 格式只能为 -c ‘aA1!:’<br>a 表示小写字母[a-z]<br>A 表示大写字母[A-Z]<br>1 表示阿拉伯数字[0-9]<br>! 感叹号表示特殊字符[!:$%&amp;&#x2F;()&#x3D;?{[]}+*~#]</dt><dd>表示包含冒号之后的字符（不能为二进制的空字符），例如  a1:$%  表示 字符集包含小写字母、数字、$字符和%百分号</dd></dl></blockquote>
<p>破解zip：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">fcrackzip <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> <span class="token string">'1'</span> <span class="token parameter variable">-l</span> <span class="token number">1</span>-10 <span class="token parameter variable">-u</span> test.zip</code></pre>

<p><strong>参数解释</strong></p>
<blockquote>
<ul>
<li>-b 表示使用暴利破解的方式</li>
<li>-c ‘aA1’ 表示使用大小写字母和数字混合破解的方式</li>
<li>-l 1-10 表示需要破解的密码长度为1到10位</li>
<li>-u 表示只显示破解出来的密码，其他错误的密码不显示出</li>
</ul>
</blockquote>
<p> 使用字典破解</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">fcrackzip <span class="token parameter variable">-D</span> <span class="token parameter variable">-p</span> pwd.txt <span class="token parameter variable">-u</span> test.zip</code></pre>

<blockquote>
<p>-D 表示要使用字典破解</p>
<p>-p 表示要使用哪个字典破解</p>
<p>注：Kali linux自带了一些字典在&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;文件夹下。</p>
</blockquote>
<p>这里注意：fcrackzip只会开启一个线程破解，那么我们可以开启多个fcrackzip去破解，也就相当于多线程。比如我们将破解的区间分成三个</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">fcrackzip <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> <span class="token string">'1'</span> <span class="token parameter variable">-l</span> <span class="token number">1</span>-3 <span class="token parameter variable">-u</span> test.zip

fcrackzip <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> <span class="token string">'1'</span> <span class="token parameter variable">-l</span> <span class="token number">4</span>-6 <span class="token parameter variable">-u</span> test.zip

fcrackzip <span class="token parameter variable">-b</span> <span class="token parameter variable">-c</span> <span class="token string">'1'</span> <span class="token parameter variable">-l</span> <span class="token number">7</span>-10 <span class="token parameter variable">-u</span> test.zip</code></pre>

<p>开启三个命令行窗口。然后分别输入以上命令就可以相当于三个线程进行破解了</p>
<p>如果你想分的更细一些也可以，但是1-6的区间破解的很快，所以我们只需要细分后面的区间即可</p>
<p>实测直接执行<code>fcrackzip -b -c &#39;1&#39; -l 1-10 -u test.zip</code>也就是从存数字的一位破解到十位，然后我设置的密码是七位，用时2分54秒左右，而当我像上面分成三个区间的时候只用时2分35秒，这样可以节省很多的时间，存密码比较好破解，如果密码是数字英文混合的话那就要难很多了，更别提有字符的情况。</p>
]]></content>
      <tags>
        <tag>fcrackzip</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>docker数据卷</title>
    <url>/2021/06/03/docker%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    <content><![CDATA[<p>数据卷可以用来指定容器内部的某个文件夹映射到外部的某个文件夹，外部访问文件夹修改内容后内部容器的文件会自动同步内容</p>
<p>创建数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume create 名称</code></pre>

<span id="more"></span>
<p>创建数据卷后会自动放在本机的&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes中</p>
<p>创建容器时可以指定使用哪个数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-v</span> tomcat_conf:/usr/local/tomcat/conf <span class="token parameter variable">-v</span> tomcat_webapps:/usr/local/tomcat/webapps <span class="token parameter variable">--name</span> tomcat tomcat</code></pre>

<p>当指定的数据卷不存在时就会自动创建</p>
<p>删除容器后不会自动删除数据卷</p>
<p>删除数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">rm</span> 数据卷全名</code></pre>

<p>只能删除没有容器使用的数据卷，正在使用的无法删除</p>
<p>查看所有数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">ls</span></code></pre>

<p>查看所有不在使用的数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">ls</span>   <span class="token parameter variable">--filter</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true</code></pre>

<p>删除所有不在使用的数据卷</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> volume <span class="token function">rm</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> volume <span class="token function">ls</span> <span class="token parameter variable">-qf</span> <span class="token assign-left variable">dangling</span><span class="token operator">=</span>true<span class="token variable">)</span></span></code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg加密解密合成mp4</title>
    <url>/2023/07/28/ffmpeg%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%90%88%E6%88%90mp4/</url>
    <content><![CDATA[<p>由于目前网络传输都是使用ts分段视频，而不是mp4，在网页中也没有下载按钮，所以需要下载网页中的m3u8视频文件和ts分段视频，然后根据m3u8中的ts列表合成为一个mp4视频，我们可以使用ffmpeg下载网页中的ts视频合成mp4，或者自己想要将mp4分解为ts</p>
<span id="more"></span>

<h2 id="1、下载ffmpeg"><a href="#1、下载ffmpeg" class="headerlink" title="1、下载ffmpeg"></a>1、下载ffmpeg</h2><p>官网：<a href="https://ffmpeg.org/download.html">https://ffmpeg.org/download.html</a></p>
<p>或者可以到ffmpeg的官方github下载</p>
<p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">https://github.com/BtbN/FFmpeg-Builds/releases</a></p>
<p>具体可以下载gpl格式的：</p>
<p><a href="https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip">https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip</a></p>
<h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><p>我是将ffmpeg解压后放到C:\Program Files中，可以自行选择路径</p>
<p>然后在环境变量Path中添加：C:\Program Files\ffmpeg\bin</p>
<p>添加完成后重启电脑</p>
<h2 id="3、不使用密钥仅将mp4分解为ts"><a href="#3、不使用密钥仅将mp4分解为ts" class="headerlink" title="3、不使用密钥仅将mp4分解为ts"></a>3、不使用密钥仅将mp4分解为ts</h2><pre class="language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> input.mp4 <span class="token parameter variable">-c</span> copy <span class="token parameter variable">-bsf:v</span> h264_mp4toannexb <span class="token parameter variable">-f</span> segment <span class="token parameter variable">-segment_list</span> playlist.m3u8 <span class="token parameter variable">-segment_time</span> <span class="token number">10</span> output%d.ts</code></pre>

<ol>
<li><code>-bsf:v h264_mp4toannexb</code>：它是FFmpeg中的比特流滤镜选项，用于将H.264视频流格式从MP4转换为Annex B格式。Annex B格式是TS（传输流）格式所使用的格式。</li>
<li><code>-f segment</code>：这个选项告诉FFmpeg将输入文件分割成多个片段。</li>
<li><code>-segment_list playlist.m3u8</code>：通过指定<code>playlist.m3u8</code>，FFmpeg将生成一个包含所有片段信息的M3U8播放列表文件。</li>
<li>output%d.ts 分解的ts文件名称为 output0.ts  output1.ts等  %d表示数字</li>
</ol>
<h2 id="4、使用密钥分解mp4为ts"><a href="#4、使用密钥分解mp4为ts" class="headerlink" title="4、使用密钥分解mp4为ts"></a>4、使用密钥分解mp4为ts</h2><h3 id="4-1-使用python生成key和IV"><a href="#4-1-使用python生成key和IV" class="headerlink" title="4.1 使用python生成key和IV"></a>4.1 使用python生成key和IV</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii
<span class="token keyword">import</span> secrets

key <span class="token operator">=</span> secrets<span class="token punctuation">.</span>token_bytes<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># 生成16个字节作为密钥</span>
iv <span class="token operator">=</span> secrets<span class="token punctuation">.</span>token_bytes<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>   <span class="token comment"># 生成16个字节作为IV</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>iv<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h3 id="4-2创建密钥文件"><a href="#4-2创建密钥文件" class="headerlink" title="4.2创建密钥文件"></a>4.2创建密钥文件</h3><p>需要使用winhex或者使用代码将十六进制写入文件，而不是直接手动创建文件将明文粘贴进去，直接粘贴进去的不算十六进制，这里使用python来创建一个keyfile.key文件</p>
<pre class="language-python" data-language="python"><code class="language-python">hex_data <span class="token operator">=</span> <span class="token string">"893DA3D84435FF5B165C4D5B8089F4BC"</span>
binary_data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_data<span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"keyfile.key"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>binary_data<span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>创建完成后右键属性可以看到是16字节数据，如果直接粘贴到文本文件里是32字节</p>
<h3 id="4-3创建密钥信息文件"><a href="#4-3创建密钥信息文件" class="headerlink" title="4.3创建密钥信息文件"></a>4.3创建密钥信息文件</h3><p>新建一个key_info.txt文件 内容如下：</p>
<pre class="language-ini" data-language="ini"><code class="language-ini">C:/Users/Administrator/Downloads/test/keyfile.key
keyfile.key
103f5d9f91fffe510f272457f8b7545e</code></pre>

<p>1.第一行代表key文件的位置，如果是网络密钥可以使用http网址</p>
<p>2.第二行代表key文件的名称</p>
<p>3.第三行代表IV位移,将刚刚python生成的IV填进去即可</p>
<h3 id="4-4加密"><a href="#4-4加密" class="headerlink" title="4.4加密"></a>4.4加密</h3><pre class="language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-i</span> big_buck_bunny.mp4 <span class="token parameter variable">-hls_time</span> <span class="token number">10</span> <span class="token parameter variable">-hls_key_info_file</span> key_info.txt <span class="token parameter variable">-hls_segment_filename</span> <span class="token string">"file%d.ts"</span> <span class="token parameter variable">-hls_playlist_type</span> vod paylist.m3u8</code></pre>

<p>-i 指定视频文件路径</p>
<p>-hls_time 指定每个分片视频时长，单位秒</p>
<p>-hls_key_info_file 指定密钥信息文件路径</p>
<p>-hls_segment_filename 指定ts分片文件名称</p>
<p>-hls_playlist_type 指定HLS（HTTP Live Streaming）播放列表的类型 vod表示HLS播放列表为点播类型。点播类型的播放列表会保存所有的媒体片段，并按照请求的顺序逐个播放。</p>
<h2 id="5、解密ts合成为mp4"><a href="#5、解密ts合成为mp4" class="headerlink" title="5、解密ts合成为mp4"></a>5、解密ts合成为mp4</h2><p>注意：如果密钥为本地路径，则URI必须为反斜杠，如果m3u8文件和ts视频放在一起则可以不写绝对路径，如果写建议也写成反斜杠</p>
<p>下面是我的m3u8文件示例：</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#EXTM3U</span>
<span class="token comment">#EXT-X-VERSION:3</span>
<span class="token comment">#EXT-X-TARGETDURATION:14</span>
<span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="token comment">#EXT-X-PLAYLIST-TYPE:VOD</span>
<span class="token comment">#EXT-X-KEY:METHOD=AES-128,URI="C:/Users/Administrator/Downloads/test/keyfile.key",IV=0x103f5d9f91fffe510f272457f8b7545e</span>
<span class="token comment">#EXTINF:10.416667,</span>
file0.ts
<span class="token comment">#EXTINF:12.625000,</span>
file1.ts
<span class="token comment">#EXTINF:8.958333,</span>
file2.ts
<span class="token comment">#EXTINF:10.416667,</span>
file3.ts
<span class="token comment">#EXTINF:13.666667,</span>
file4.ts
<span class="token comment">#EXTINF:4.000000,</span>
file5.ts
<span class="token comment">#EXT-X-ENDLIST</span></code></pre>



<p>解密&#x2F;合成mp4：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-allowed_extensions</span> ALL <span class="token parameter variable">-i</span> paylist.m3u8 <span class="token parameter variable">-c</span> copy output.mp4</code></pre>

]]></content>
      <tags>
        <tag>ffmpeg</tag>
        <tag>mp4</tag>
        <tag>ts</tag>
        <tag>m3u8</tag>
      </tags>
  </entry>
  <entry>
    <title>git配置ssh</title>
    <url>/2023/06/30/git%E9%85%8D%E7%BD%AEssh/</url>
    <content><![CDATA[<p>git是现在代码管理的一个常用工具，采用两种传输方式 http ssh </p>
<p>SSH 比较安全可靠，也不需要每次都输入账号密码，所以我们在使用git时一般采用ssh,下面介绍ssh简单的配置</p>
<span id="more"></span>

<h2 id="1、生成公钥私钥"><a href="#1、生成公钥私钥" class="headerlink" title="1、生成公钥私钥"></a>1、生成公钥私钥</h2><pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"your_email@example.com"</span></code></pre>

<p>-t 指定生成的密钥类型</p>
<p>-C 注释</p>
<h2 id="2、上传公钥"><a href="#2、上传公钥" class="headerlink" title="2、上传公钥"></a>2、上传公钥</h2><p>如果是windows则密钥放在C:\Users\你的用户名\.ssh</p>
<p>如果是liunx则密钥放在 &#x2F;home&#x2F;你的用户名&#x2F;.ssh</p>
<p>将id_rsa.pub里面的内容复制后粘贴到github或者gitee仓库配置中</p>
<h2 id="3、配置账户信息"><a href="#3、配置账户信息" class="headerlink" title="3、配置账户信息"></a>3、配置账户信息</h2><p>如果我们需要上传文件到远程仓库中则必须配置邮箱和用户名，否则无法进行git上传操作</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">配置用户邮箱（填自己的邮箱）
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email “your_email@example.com”</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">配置用户名
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name “yourname”</code></pre>

<h2 id="4、访问服务器测试配置是否正常"><a href="#4、访问服务器测试配置是否正常" class="headerlink" title="4、访问服务器测试配置是否正常"></a>4、访问服务器测试配置是否正常</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com</code></pre>

<p>如果你的地址不是github则将后面的github.com替换成你想测试的地址，比如gitee.com</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+git搭建个人博客</title>
    <url>/2021/11/22/hexo+git%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>首先要搭建好node，如果搭建node可以参照哦nvm管理node的教程</p>
<p>然后我们通过官方教程拉取hexo</p>
<p>全局安装hexo</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-cli <span class="token parameter variable">-g</span></code></pre>

<p>初始化一个hexo</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo init blog</code></pre>

<p>进入blog目录安装所需依赖</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre>

<p>下载主题:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p>
<p>下载完成后将下载好的主题文件夹重命名好之后放进blog 的themes目录下即可</p>
<h2 id="指定主题"><a href="#指定主题" class="headerlink" title="指定主题"></a>指定主题</h2><p>在blog目录下_config.yml文件中找到theme</p>
<p>然后写上你的主题的文件夹名称</p>
<h2 id="配置语言"><a href="#配置语言" class="headerlink" title="配置语言"></a>配置语言</h2><p>默认下载好的hexo默认语言是英语，可以在_config.yml文件中找到language</p>
<p>默认是en，我们改为zh-CN即可</p>
<p>具体语言如下：</p>
<table>
<thead>
<tr>
<th>语言</th>
<th align="center">代码</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>English</td>
<td align="center">en</td>
<td>language: en</td>
</tr>
<tr>
<td>简体中文</td>
<td align="center">zh-Hans</td>
<td>language: zh-Hans</td>
</tr>
<tr>
<td>Français</td>
<td align="center">fr-FR</td>
<td>language: fr-FR</td>
</tr>
<tr>
<td>Português</td>
<td align="center">pt</td>
<td>language: pt<code>or</code>language: pt-BR</td>
</tr>
<tr>
<td>Português</td>
<td align="center">zh-hk<code>或者</code>zh-tw</td>
<td>language: zh-hk</td>
</tr>
<tr>
<td>Русский язык</td>
<td align="center">ru</td>
<td>language: zh-hk</td>
</tr>
<tr>
<td>Deutsch</td>
<td align="center">de</td>
<td>language: de</td>
</tr>
<tr>
<td>日本語</td>
<td align="center">ja</td>
<td>language: ja</td>
</tr>
<tr>
<td>Indonesian</td>
<td align="center">id</td>
<td>language: id</td>
</tr>
<tr>
<td>Korean</td>
<td align="center">ko</td>
<td>language: ko</td>
</tr>
</tbody></table>
<p>如果该主题不会自动显示更多内容按钮则需要在每一篇文章中添加如下代码</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!-- more --></span></code></pre>



<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><p>我们这里选择gitee来演示，因为gitee比较快</p>
<p>首先到gitee中创建好一个仓库用来存放你的博客，然后在你的电脑中配置好和gitee连接的ssh</p>
<p>然后在blog目录下的_config.yml文件中最底下添加一些内容</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span>
<span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>
<span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@gitee.com<span class="token punctuation">:</span>xxxx/xxx.git <span class="token comment">#这里复制你的仓库ssh地址</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre>

<p>然后在blog目录下安装git插件即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre>

<p>上传到git</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo d</code></pre>

]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>idea免费无限使用的更替ja-netfilter</title>
    <url>/2023/06/30/idea%E5%85%8D%E8%B4%B9%E6%97%A0%E9%99%90%E4%BD%BF%E7%94%A8%E7%9A%84%E6%9B%B4%E6%9B%BFja-netfilter/</url>
    <content><![CDATA[<p>前言：由于之前IDE Eval Reset插件只能破解idea2021.2版本及以下，但是对于想要使用最新版本的铁子就不太友好，如果追求稳定可以使用之前的IDE Eval Reset插件进行无线续期，如果想要使用新版本idea的可以尝试使用这个新的插件ja-netfilter</p>
<span id="more"></span>

<h2 id="1、下载插件"><a href="#1、下载插件" class="headerlink" title="1、下载插件"></a>1、下载插件</h2><p>官方下载地址：<a href="https://gitee.com/ja-netfilter/ja-netfilter/releases">https://gitee.com/ja-netfilter/ja-netfilter/releases</a></p>
<p>我自己也复制了一份地址，防止后续无法下载：<a href="https://gitee.com/luoqingBlog/ja-netfilter/releases">https://gitee.com/luoqingBlog/ja-netfilter/releases</a></p>
<h2 id="2、安装idea"><a href="#2、安装idea" class="headerlink" title="2、安装idea"></a>2、安装idea</h2><p>我目前使用的是idea2023.1.3版本可以用，如果以后下载的版本无法使用可以使用这个版本</p>
<p><a href="https://download.jetbrains.com.cn/idea/ideaIU-2023.1.3.exe">https://download.jetbrains.com.cn/idea/ideaIU-2023.1.3.exe</a></p>
<h2 id="3、添加插件至vmoptions"><a href="#3、添加插件至vmoptions" class="headerlink" title="3、添加插件至vmoptions"></a>3、添加插件至vmoptions</h2><p>打开idea所在文件目录，可以找到idea64.exe.vmoptions文件，编辑，在最后一行加上包路径</p>
<p>-javaagent:C:\Users\Administrator\Downloads\jetbra-1126574a2f82debceb72e7f948eb7d4f616ffddf\jetbra\ja-netfilter.jar</p>
<p>路径根据自己下载的包路径替换</p>
<h2 id="4、执行配置环境变量脚本"><a href="#4、执行配置环境变量脚本" class="headerlink" title="4、执行配置环境变量脚本"></a>4、执行配置环境变量脚本</h2><p>打开jetbra文件夹下有一个scripts文件夹，双击install-current-user.vbs安装环境变量，macos双击install.sh安装</p>
<h2 id="5、激活idea"><a href="#5、激活idea" class="headerlink" title="5、激活idea"></a>5、激活idea</h2><p>打开网址：<a href="https://3.jetbra.in/">https://3.jetbra.in/</a></p>
<p>进入随便一个可用网址，选择对应产品下的Copy to clipboard即可复制激活码</p>
<p>打开idea，选择Activation code，填入复制的激活码激活即可使用</p>
]]></content>
      <tags>
        <tag>idea</tag>
        <tag>ja-netfilter</tag>
      </tags>
  </entry>
  <entry>
    <title>idea无限试用</title>
    <url>/2021/11/07/idea%E6%97%A0%E9%99%90%E8%AF%95%E7%94%A8/</url>
    <content><![CDATA[<p>按照以前的破解方式，我们会在安装好idea后点击试用，然后将破解的jar包丢进idea选择重启就可以破解到2089年了，但是这样的破解方式只能用在老版本的idea上，在新版的idea中，只要官网发布一次更新，那么破解的jar包就会失效，只能去寻找新的jar包继续破解，但是过不了几天就要找新的破解包的方式不免让我们觉得厌烦，那么我们想试用新版本但是又不想频繁的去寻找jar包应该要怎么做呢，其实在前几年就有人想出了idea无限试用的方法，idea安装后会有30天的试用期限，如果我们把这个信息删除那么不就又可以试用30天了吗。后来，又有人专门为idea做了一款插件，只要在idea中装上这个插件就可以达到无限试用的效果。</p>
<span id="more"></span>

<p>首先这里需要注意，2021.2.3版本开始，官方已经取消了试用的功能，也就是说你想要试用idea就必须登录账号，但是我们破解需要先进入idea才可以安装插件，所以我们可以将idea降级到2021.2.3版本之前即可，比如2021.2.2这个版本，然后我们选择试用30天，接着升级到最新版本即可，虽然2021.2.3版本没有了试用的功能，但是我们可以在之前的版本获得试用资格，然后升级最新版，最新版就可以知道我们还是有试用的天数的，就不会进行拦截。</p>
<p>我们在idea的插件管理中添加一个插件的地址，<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a> 我们在搜索中搜索evel就会出现一个名叫IDE Eval Rest的插件，我们选择安装即可，安装完成后可以不用重启idea，我们直接点击主页的help，然后就会出现eval reset的选项，点击后可以选择重置也可以勾选自动重置，然后选择重启idea即可重置25天试用期，当我们勾选了自动重置后当我们每次重新打开idea就会自动重置使用时间，不用我们手动选择重置。是不是很方便呢。</p>
<p>如果没有网络应该如何安装呢，我们可以直接进入<a href="https://plugins.zhile.io/">https://plugins.zhile.io</a> 这个网站，然后选择网站内容中的下载安装即可下载idea插件的本地安装jar包，然后去idea中选择插件，并选择从本地磁盘安装插件即可选择jar包安装插件。</p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>idea配置默认maven的jdk版本</title>
    <url>/2021/05/19/idea%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4maven%E7%9A%84jdk%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>前言：每一次我们使用idea创建一个项目时都默认使用的是jkd1.5，那么我们就会发现在代码的编写过程中很多新语法都无法使用，点击配置成1.8之后就只有这一个项目是生效的，再新建一个项目结果又要重新配置特别麻烦，那么有没有一种只要配置一次那么之后创建的每一个版本都使用我设置好的这一个版本</p>
<p>首先我们在maven文件夹的配置文件settings.xml中添加下以下配置</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jdk-1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activation</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeByDefault</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeByDefault</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdk</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdk</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activation</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>  
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.compilerVersion</span><span class="token punctuation">></span></span>  
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>   
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span></code></pre>

<span id="more"></span>
<p>我们也可以在settings.xml中找到<profile> 这个标签，里面的内容已经注释了，所以不会生效，我们需要添加上让他指定编译版本为JDK1.8</p>
<p>然后我们回到idea在启动idea的时候会有一个idea的项目显示界面，我使用的idea是2019.3.5版本，如下</p>
<p><img src="C:\myImg\idea界面.png" loading="lazy"></p>
<p>然后点击又下角的配置</p>
<p>然后选择第一个叫首选项的设置，在这里配置的所有内容都会应用在新创建的项目上</p>
<p>我们先把maven所使用的jdk改为1.8</p>
<p><img src="C:\myImg\mavenrunner.png" alt="image-20210519173108546" loading="lazy"></p>
<p>然后我们再点击java编译器，把版本改为8，因为下面有说明会将所有的模块更改为我们设置的版本</p>
<p><img src="C:\myImg\javacompie.png" alt="image-20210519173324066" loading="lazy"></p>
<p>这时我们新建一个项目就可以发现所有的设置已经更改为1.8了</p>
]]></content>
      <tags>
        <tag>idea</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>idea连接postgresql数据库报错：UNION的类型char和text不匹配</title>
    <url>/2024/07/01/idea%E8%BF%9E%E6%8E%A5postgresql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%A5%E9%94%99%EF%BC%9AUNION%E7%9A%84%E7%B1%BB%E5%9E%8Bchar%E5%92%8Ctext%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>报错内容：</p>
<p>Error encountered when performing Introspect database igistet schema igissit (details):</p>
<p>错误：UNION 的类型”char”和text不匹配</p>
<p>位置：768.</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>idea连接数据库时，点击高级，勾选“使用JDBC元数据内省”即可。</p>
]]></content>
      <tags>
        <tag>idea</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>isEmpty()和isBank()的区别</title>
    <url>/2021/10/02/isEmpty-%E5%92%8CisBank-%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>1 public static boolean isEmpty(String str)</p>
<p>   判断某字符串是否为空，为空的标准是 str&#x3D;&#x3D;null 或 str.length()&#x3D;&#x3D;0</p>
<p>   　　下面是 StringUtils 判断是否为空的示例：</p>
<p>   　　StringUtils.isEmpty(null) &#x3D; true</p>
<p>   　　StringUtils.isEmpty(“”) &#x3D; true</p>
<p>   　　StringUtils.isEmpty(“ “) &#x3D; false &#x2F;&#x2F;注意在 StringUtils 中空格作非空处理</p>
<p>   　　StringUtils.isEmpty(“   “) &#x3D; false</p>
<p>   　　StringUtils.isEmpty(“bob”) &#x3D; false</p>
<p>   　　StringUtils.isEmpty(“ bob “) &#x3D; false</p>
   <span id="more"></span>

<p>2 public static boolean isNotEmpty(String str)</p>
<p>　　判断某字符串是否非空，等于 !isEmpty(String str)</p>
<p>　　下面是示例：</p>
<p>　　StringUtils.isNotEmpty(null) &#x3D; false</p>
<p>　　StringUtils.isNotEmpty(“”) &#x3D; false</p>
<p>　　StringUtils.isNotEmpty(“ “) &#x3D; true</p>
<p>　　StringUtils.isNotEmpty(“         “) &#x3D; true</p>
<p>　　StringUtils.isNotEmpty(“bob”) &#x3D; true</p>
<p>　　StringUtils.isNotEmpty(“ bob “) &#x3D; true</p>
<p>3 public static boolean isBlank(String str)</p>
<p>　　判断某字符串是否为空或长度为0或由空白符(whitespace) 构成</p>
<p>　　下面是示例：</p>
<p>　　StringUtils.isBlank(null) &#x3D; true</p>
<p>　　StringUtils.isBlank(“”) &#x3D; true</p>
<p>　　StringUtils.isBlank(“ “) &#x3D; true</p>
<p>　　StringUtils.isBlank(“        “) &#x3D; true</p>
<p>　　StringUtils.isBlank(“\t \n \f \r”) &#x3D; true   &#x2F;&#x2F;对于制表符、换行符、换页符和回车符</p>
<p>　　StringUtils.isBlank()   &#x2F;&#x2F;均识为空白符</p>
<p>　　StringUtils.isBlank(“\b”) &#x3D; false   &#x2F;&#x2F;“\b”为单词边界符</p>
<p>　　StringUtils.isBlank(“bob”) &#x3D; false</p>
<p>　　StringUtils.isBlank(“ bob “) &#x3D; false</p>
<p>4 public static boolean isNotBlank(String str)</p>
<p>　　判断某字符串是否不为空且长度不为0且不由空白符(whitespace) 构成，等于 !isBlank(String str)</p>
<p>　　下面是示例：</p>
<p>　　StringUtils.isNotBlank(null) &#x3D; false</p>
<p>　　StringUtils.isNotBlank(“”) &#x3D; false</p>
<p>　　StringUtils.isNotBlank(“ “) &#x3D; false</p>
<p>　　StringUtils.isNotBlank(“         “) &#x3D; false</p>
<p>　　StringUtils.isNotBlank(“\t \n \f \r”) &#x3D; false</p>
<p>　　StringUtils.isNotBlank(“\b”) &#x3D; true</p>
<p>　　StringUtils.isNotBlank(“bob”) &#x3D; true</p>
<p>　　StringUtils.isNotBlank(“ bob “) &#x3D; true</p>
<p>总结：isEmpty()会判断null或者空字符串，但是isBank()会多判断字符串里面是否有空格或者换行符等特殊字符，如果有那么将这些字符也看作是空的，如果全是空格则也认为是空字符串，所以一般来说用的比较多的应该是isEmpty()</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jar启动报错Input length = 1</title>
    <url>/2023/07/09/jar%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99Input/</url>
    <content><![CDATA[<p>前言：在使用idea启动项目时设置了全局编码和文件编码都是utf-8启动正常，但是打成jar包在windows环境启动报错 <code>org.yaml.snakeyaml.error.YAMLException: java.nio.charset.MalformedInputException: Input length = 1</code></p>
<p>原因是windows默认的编码是gbk，使用java -jar启动jar包时会默认使用系统环境编码，所以导致和配置文件的UTF-8不一致</p>
<span id="more"></span>

<h2 id="1、启动时指定编码"><a href="#1、启动时指定编码" class="headerlink" title="1、启动时指定编码"></a>1、启动时指定编码</h2><p>使用java -jar命令时指定文件编码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> <span class="token parameter variable">-Dfile.encoding</span><span class="token operator">=</span>utf-8 xx.jar</code></pre>

<h2 id="2、修改系统环境编码"><a href="#2、修改系统环境编码" class="headerlink" title="2、修改系统环境编码"></a>2、修改系统环境编码</h2><p>一般情况下不要修改windows的系统编码，默认为gbk即可，建议使用第一种方式指定启动编码。</p>
<p>而liunx系统一般情况下是UTF-8编码，所以使用java -jar命令启动不会有问题。</p>
<p>查询liunx系统编码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$LANG</span></code></pre>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jdk8新特性</title>
    <url>/2021/10/02/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>jdk8自带了一个jjs的脚本，如果是windows安装，可以在自己安装好的jdk目录下看到有一个jjs.exe的脚本</p>
<p>如果是mac则可以在jdk安装目录下看到有一个jjs的可执行脚本</p>
<p>然后我们写一个js脚本，控制台输出一句话试试,这里注意除了输出语句不是console.log其他的都是一样的</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>然后使用命令执行这个脚本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">jjs hello.js</code></pre>

<span id="more"></span>

<h2 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h2><p>当我们在编写一个匿名对象时，需要在new右边写上方法体，如下</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>而这时候，可以看到里面是只有一个方法的，就叫compare，返回值是int类型，这时候我们就可以使用lambda表达式，因为这里就一个方法，我就不需要知道你叫什么方法名，你肯定是调用这个叫做compare的方法，所以我们可以直接写出参数，和方法体</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span><span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>这里注意，在左边接收的时候是指定了范型是Integer类型，所以右边肯定是两个Integer，不可能是别的，所以也可以直接省略</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>最后注意这里方法体里面只有一条语句，并且方法的返回值就是int，所以这里也不用写，因为我就一条语句，肯定就是返回这个语句，不需要写return</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> a <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span> <span class="token operator">-></span> o1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>创建的这个匿名对象所调用的方法在另一个类中刚好有功能相同的方法则可以直接通过类名::方法名的方式调用</p>
<p>但是其实程序并不能识别到你引用的方法是不是和当前方法的功能是否一致，它只会识别你要引用的方法是不是返回值和参数类型是否一致，来举个例子</p>
<p>我现在自定义一个接口如下</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mylambda</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>然后我们在主方法中创建一个这个接口的匿名函数</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Mylambda</span> mylambda <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mylambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      s <span class="token operator">=</span> s<span class="token operator">+</span><span class="token string">"1"</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>这里可以看到我在里面随便写了一个字符串的拼接</p>
<p>然后我们在创建一个静态的方法，和接口的test方法的返回值和参数列表一致</p>
<p>也就是没有返回值和一个字符串入参</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用了test。hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>然后我们就把刚刚创建的匿名函数改造成这个方法的引用</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Mylambda</span> mylambda <span class="token operator">=</span> test<span class="token operator">::</span><span class="token function">hello</span><span class="token punctuation">;</span></code></pre>

<p>这样虽然改变了我们之前创建 的匿名函数的功能，但是这个写法不会报错，也就是说我从一个字符串拼接转成了输出一个字符串语句，虽然这个引用是不对的，但是编译器不会报错，因为它只识别返回值是否相同和参数是否相同，如果一致那他就认为是同一个方法就可以进行引用。</p>
<p>当然上面是一个错误的例子，只是希望更好的说明什么是方法的引用。也就是要创建一个匿名函数时，可以引用另一个静态或非静态方法来替换。</p>
<p>下面举一个正确的例子</p>
<p>首先我们创建一个匿名对象</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> o1<span class="token punctuation">,</span> <span class="token class-name">Integer</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span>o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>然后由于这个方法和Integer.compare(o1,o2)这个静态方法的功能是一样的，所以我们可以直接引用这个Integer的compare方法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> comparator <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">compare</span><span class="token punctuation">;</span></code></pre>

<h2 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h2><p>stream流可以对集合数组进行操作，最后返回结果</p>
<h3 id="stream流的过滤-filter"><a href="#stream流的过滤-filter" class="headerlink" title="stream流的过滤 filter"></a>stream流的过滤 filter</h3><p>首先如果有一个需求，需要在一个集合中塞选出大于50的数，然后放到另一个集合中，那么我们最原始的方法应该是如下这样</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> integer <span class="token operator">:</span> integers<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>integer<span class="token operator">></span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        integers1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>而这时候我们使用流过滤的话就可以把循环变为一条语句</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-></span> integer <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integers1<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="stream流的切片-limit"><a href="#stream流的切片-limit" class="headerlink" title="stream流的切片 limit"></a>stream流的切片 limit</h3><p>还是刚刚的数据，如果我们只想要三个数据应该怎么做呢，只需要在过滤完成后进行limit，然后再添加就好了，这样最终就只能添加指定的个数</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-></span> integer <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integers1<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="stream流的跳过-skip"><a href="#stream流的跳过-skip" class="headerlink" title="stream流的跳过 skip"></a>stream流的跳过 skip</h3><p>这个跟切片有点像，指定多少个元素跳过，我们来试试前面的2个跳过不保存</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-></span> integer <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integers1<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>这样我们就只能获取到两个数之后的数了</p>
<h3 id="stream流的去重-distinct"><a href="#stream流的去重-distinct" class="headerlink" title="stream流的去重 distinct"></a>stream流的去重 distinct</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"马云"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"马云"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"马云"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>去重会根据hashcode和equals进行判断，也可以对对象进行去重,但是要注意要重写对象的equals方法和hashcode方法才可以去重</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">distinct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="stream流操作每一个值"><a href="#stream流操作每一个值" class="headerlink" title="stream流操作每一个值"></a>stream流操作每一个值</h3><p>上面说的过滤是对符合要求的值进行一个操作，但是我们现在的要求是对集合中每一个元素进行操作的话那么使用过滤就多余了，我们可以使用map进行操作</p>
<p>现在我们将集合中所有字符串转大写</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"bb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"cc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> strings1 <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h3 id="stream流排序sorted"><a href="#stream流排序sorted" class="headerlink" title="stream流排序sorted"></a>stream流排序sorted</h3><p>这是自动排序</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>也可以根据自己定义的方法进行排序，例如对对象进行排序</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps1 <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="stream流终止操作"><a href="#stream流终止操作" class="headerlink" title="stream流终止操作"></a>stream流终止操作</h2><p>终止操作即获取最终的结果，比如上面的foreach</p>
<h3 id="allMatch-匹配结果集是否所有都符合某个规则"><a href="#allMatch-匹配结果集是否所有都符合某个规则" class="headerlink" title="allMatch 匹配结果集是否所有都符合某个规则"></a>allMatch 匹配结果集是否所有都符合某个规则</h3><p>比如一个结果集内我们看看所有的对象的年龄是否都大于18</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> b <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allMatch</span><span class="token punctuation">(</span>emp <span class="token operator">-></span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//返回false</span></code></pre>

<h3 id="anyMatch-结果集中是否有一个符合某个规则"><a href="#anyMatch-结果集中是否有一个符合某个规则" class="headerlink" title="anyMatch  结果集中是否有一个符合某个规则"></a>anyMatch  结果集中是否有一个符合某个规则</h3><p>还是刚刚的例子，有没有一个是大于18岁的</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> b <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">anyMatch</span><span class="token punctuation">(</span>emp <span class="token operator">-></span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span></code></pre>

<h3 id="noneMatch-检查是否没有匹配的元素"><a href="#noneMatch-检查是否没有匹配的元素" class="headerlink" title="noneMatch 检查是否没有匹配的元素"></a>noneMatch 检查是否没有匹配的元素</h3><p>还是上面的例子，我们检查是否没有大于18岁的，返回肯定是false</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">boolean</span> b <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>emp <span class="token operator">-></span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span></code></pre>

<h3 id="findFirst-返回流操作后的第一个元素"><a href="#findFirst-返回流操作后的第一个元素" class="headerlink" title="findFirst 返回流操作后的第一个元素"></a>findFirst 返回流操作后的第一个元素</h3><p>注意，这里返回的是Optional类型，然后使用get就可以获得里面的元素了</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Emp</span> emp <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="findAny-返回流结果集中任意一个元素"><a href="#findAny-返回流结果集中任意一个元素" class="headerlink" title="findAny 返回流结果集中任意一个元素"></a>findAny 返回流结果集中任意一个元素</h3><p>这里要注意！stream流要换成parallelStream并行流，否则使用findAny一直都会返回第一个</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> first <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAny</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Emp</span> emp <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="count-返回流结果集中的个数"><a href="#count-返回流结果集中的个数" class="headerlink" title="count 返回流结果集中的个数"></a>count 返回流结果集中的个数</h3><p>这个没什么好讲的，就是过滤之后计算个数</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">long</span> count <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="max-返回指定规则中的最大值"><a href="#max-返回指定规则中的最大值" class="headerlink" title="max 返回指定规则中的最大值"></a>max 返回指定规则中的最大值</h3><p>这里注意 使用max返回的是Optional 也是要通过get获取原先的元素</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>min  这个应该也不用讲，和max是一样的操作</p>
<h3 id="foreach-迭代"><a href="#foreach-迭代" class="headerlink" title="foreach 迭代"></a>foreach 迭代</h3><p>可以遍历流中的每一个元素并进行一定的操作  这个和for是一样的</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="reduce-归约"><a href="#reduce-归约" class="headerlink" title="reduce 归约"></a>reduce 归约</h3><p>当我们想操作一个集合然后获取最终结果时，我们必须在外面定义一个变量，然后将循环出的变量叠加到外部的变量，但是在匿名内部类来说如果你不是一个final类型的变量就是不可以操作的</p>
<p>我们可以使用归约来进行操作，演示一个相加</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Integer</span> integer <span class="token operator">=</span> emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Emp</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="收集collect"><a href="#收集collect" class="headerlink" title="收集collect"></a>收集collect</h3><p>可以将最终结果转换为我们想要的某个结果集</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
emps<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

emps<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>emp <span class="token operator">-></span> emp<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h2><p>可以最大限度减少空指针</p>
<p>获取Optional</p>
<h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><p>这里要保证传入的对象是非空的，否则会报空指针</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emp1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h3><p>这里传入的对象可以为空</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emp1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h3><p>如果传入的对象是一个null那么就赋值为括号里的值，否则为原先的值</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Emp</span> emp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Emp</span><span class="token punctuation">></span></span> emp1 <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>emp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Emp</span> emp2 <span class="token operator">=</span> emp1<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Emp</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

]]></content>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>idea安装后无法打开解决方案</title>
    <url>/2021/10/01/idea%E5%AE%89%E8%A3%85%E5%90%8E%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>首先可以尝试安装完成后双击打不开就重启电脑，如果还是不行可以尝试以下方案。</p>
<p>C:\Users\你的用户名\AppData\idea目录</p>
<p>然后找到idea64.exe.vmoptions</p>
<p>编辑，这里最好使用notepad++这样的专业工具编辑，防止出现使用记事本而编码不同步的问题</p>
<p>然后在这个文件里应该在最后一行可以找到一个-javaagent:开头的</p>
<p>例如：-javaagent:D:\01.Software\IntelliJIDEA\JetbrainsCrack-2.8-release-enc.jar</p>
<p>删除这一行，然后保存就可以打开idea了，这是因为之前在电脑上使用过破解包，但是还是不清楚为什么安装新版idea会有这一行，删掉破解就可以了</p>
]]></content>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>kali最新版如何开启root及ssh</title>
    <url>/2021/03/23/kali%E6%9C%80%E6%96%B0%E7%89%88%E5%A6%82%E4%BD%95%E5%BC%80%E5%90%AFroot%E5%8F%8Assh/</url>
    <content><![CDATA[<h2 id="修改root用户密码"><a href="#修改root用户密码" class="headerlink" title="修改root用户密码"></a>修改root用户密码</h2><p>kali从2020.1版本开始，该操作系统的默认用户将不再是root，而改为和其他liunx系统一样的普通用户，那么我就是要进入root界面或者只使用root用户呢？</p>
<p>首先我们先按照安装时系统设置好的用户进入系统，然后打开命令行，输入</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span></code></pre>

<p>然后就会叫你输入当前账户的密码，输入完了之后就会进入root用户</p>
<p>在root用户下输入</p>
<span id="more"></span>

<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">passwd</span> root</code></pre>

<p>然后就会提示你输入新密码，回车之后再确认一遍密码就提示修改成功了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">└─<span class="token comment"># passwd root                     </span>
新的 密码：
重新输入新的 密码：
passwd：已成功更新密码</code></pre>

<p>现在注销当前用户，然后以root的用户名和密码登录就可以保持root身份了</p>
<h2 id="开启ssh"><a href="#开启ssh" class="headerlink" title="开启ssh"></a>开启ssh</h2><p>打开终端输入命令编辑ssh文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/ssh/sshd_config</code></pre>

<p>然后找到里面的#PermitRootLogin prohibit-password，把前面的#去掉，并且将“prohibit-password”修改为YES</p>
<p>再往下找，找到PasswordAuthentication这一行，将前面的#号注释去掉，如果后面写的是no，需要修改成yes</p>
<p>最后保存退出，然后再输入<code>/etc/init.d/ssh restart</code>或者<code>service ssh start</code>即可开启ssh连接啦</p>
<p>不要忘记把ssh设置为开机自启，不然每次打开kali都要输入启动ssh的命令</p>
<p>把ssh加入开机自启</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">update-rc.d <span class="token function">ssh</span> <span class="token builtin class-name">enable</span></code></pre>

]]></content>
      <tags>
        <tag>kali</tag>
        <tag>ssh</tag>
        <tag>root</tag>
      </tags>
  </entry>
  <entry>
    <title>logback自定义过滤日志</title>
    <url>/2024/07/01/logback%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>最近有一个系统蜜罐需求，即设置一些假接口以供访问，当接口被访问时即有可能系统正在被扫描，需要将访问的路径和ip地址输出到指定日志文件中以便观察。由于输出日志写在了util中但是不可能将所有的util日志都当作是攻击日志，所以需要过滤指定内容的日志输出到蜜罐日志文件中。</p>
<span id="more"></span>

<h2 id="定义日志输出util"><a href="#定义日志输出util" class="headerlink" title="定义日志输出util"></a>定义日志输出util</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">IP_UNKNOWN</span> <span class="token operator">=</span> <span class="token string">"unknown"</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">IP_LOCAL</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">IP_LEN</span> <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * 获取客户端真实ip
     * @param request request
     * @return 返回ip
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getIP</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ipAddress <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">IP_UNKNOWN</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ipAddress <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">IP_UNKNOWN</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ipAddress <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"WL-Proxy-Client-IP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token constant">IP_UNKNOWN</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ipAddress <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>address <span class="token operator">-></span> address<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">IP_LOCAL</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ipAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 根据网卡取本机配置的IP</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">InetAddress</span> inet <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ipAddress <span class="token operator">=</span> inet<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownHostException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// ignore</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 对于通过多个代理的情况，第一个IP为客户端真实IP,多个IP按照','分割</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ipAddress <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> ipAddress<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token constant">IP_LEN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> index <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                ipAddress <span class="token operator">=</span> ipAddress<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> ipAddress<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printServerLog</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token class-name">String</span> target <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toASCIIString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> clientIp <span class="token operator">=</span> <span class="token function">getIp</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"HoneyPotLog: clientIp=&#123;&#125;,uri=&#123;&#125;,target=&#123;&#125;"</span><span class="token punctuation">,</span>clientIp<span class="token punctuation">,</span>uri<span class="token punctuation">,</span>clientIp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="定义蜜罐接口"><a href="#定义蜜罐接口" class="headerlink" title="定义蜜罐接口"></a>定义蜜罐接口</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HoneyPotController</span><span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/admin"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">WebUtil</span><span class="token punctuation">.</span><span class="token function">printServerLog</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/config"</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">WebUtil</span><span class="token punctuation">.</span><span class="token function">printServerLog</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="自定义logback过滤器"><a href="#自定义logback过滤器" class="headerlink" title="自定义logback过滤器"></a>自定义logback过滤器</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HoneyPotLogFilter</span> <span class="token keyword">extends</span> <span class="token class-name">Filter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ILoggingEvent</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">FilterReply</span> <span class="token function">decide</span><span class="token punctuation">(</span><span class="token class-name">ILoggingEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">startWith</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>getMessage<span class="token punctuation">,</span><span class="token string">"HoneyPotLog: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token class-name">FilterReply</span><span class="token punctuation">.</span><span class="token constant">ACCEPT</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token class-name">FilterReply</span><span class="token punctuation">.</span><span class="token constant">DENY</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="使用自定义过滤器"><a href="#使用自定义过滤器" class="headerlink" title="使用自定义过滤器"></a>使用自定义过滤器</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/test/logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HONEYPOT_FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span><span class="token punctuation">></span></span>$&#123;LOG_HOME&#125;/honeypot.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%X&#123;traceId&#125;] %-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!--使用自定义过滤器--></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.test.gateway.filter.logback.HoneyPotLogFilter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.FixedWindRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>$&#123;LOG_HOME&#125;/honeypot.log.%i.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>minIndex</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>minIndex</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxIndex</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxIndex</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>triggeringPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>50MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>triggeringPolicy</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>HONEYPOT_FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>
]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>mac、windows配置maven</title>
    <url>/2021/05/11/mac%E3%80%81windows%E9%85%8D%E7%BD%AEmaven/</url>
    <content><![CDATA[<p>首先下载好maven的压缩包，这里以apache-maven-3.5.4为例</p>
<p>解压缩后把apache-maven-3.5.4这个文件夹放到一个自己可以比较容易找到的地方，因为后面配置idea要使用到这个文件夹</p>
<p>然后先说mac端的配置，比较简单</p>
<span id="more"></span>

<p>首先进入终端，然后切换到根目录</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~</code></pre>

<p>然后mac下一般都会有一个叫.bash_profile的普通文件，这个是用来配置环境变量的文件，都已经要安装maven了肯定要配置jdk的环境变量，所以这里就默认你们是有这个文件，不知道有没有的可以通过命令查看当前目录下是否存在此文件，如果没有这个文件可以自己创建一个名为.bash_profile的文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-a</span></code></pre>

<p>mac可以使用open命令以文本编辑器的方式打开文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> .bash_profile</code></pre>

<p>然后在里面加上以下内容</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/Users/xxx/apache-maven-3.5.4 //这里是你的maven存放的路径，自己改
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$MAVEN_HOME</span>/bin</code></pre>

<p>到这里maven的环境变量也就配置好了  环境变量可能不会立即生效，所以要应用一下文件，使用以下命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> .bash_profile</code></pre>

<p>我们再查看一下maven是否配置成功 使用以下命令查看maven的版本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mvn <span class="token parameter variable">-v</span></code></pre>

<p>如果出现以下提示就说明配置成功了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">Apache Maven <span class="token number">3.5</span>.4 <span class="token punctuation">(</span>1edded0938998edf8bf061f1ceb3cfdeccf443fe<span class="token punctuation">;</span> <span class="token number">2018</span>-06-18T02:33:14+08:00<span class="token punctuation">)</span>
Maven home: /Users/luoqing/apache-maven-3.5.4
Java version: <span class="token number">1.8</span>.0_281, vendor: Oracle Corporation, runtime: /Library/Java/JavaVirtualMachines/jdk1.8.0_281.jdk/Contents/Home/jre
Default locale: zh_CN, platform encoding: UTF-8
OS name: <span class="token string">"mac os x"</span>, version: <span class="token string">"10.16"</span>, arch: <span class="token string">"x86_64"</span>, family: <span class="token string">"mac"</span></code></pre>



<p>再说一下windows配置maven，其实百度都可以直接搜的到</p>
<p>这里直接跳到压缩包已经解压好了并且apache-maven-3.5.4已经放到了自己可以方便找到的路径</p>
<p>然后我们先复制好apache-maven-3.5.4所在的路径，去设置环境变量，都已经学习maven了不会连环境变量都还不会配置吧，这里默认你们都会</p>
<p>然后在环境变量中添加一个系统变量 名字叫MAVEN_HOME 变量值是你maven文件夹所在路径 这里我的路径是C:\Users\Administrator\Desktop\apache-maven-3.5.4</p>
<p><img src="C:\myImg\maven环境变量.png" loading="lazy"></p>
<p>然后再去Path中添加一个新的环境变量  不管是上面或者是下面的Path都可以用，懂的都懂，然后点新建，值设置为 <code>%MAVEN_HOME%\bin</code> 然后一直点确定就可以了</p>
<p>设置完成之后再去cmd以管理员的身份输入</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mvn <span class="token parameter variable">-v</span></code></pre>

<p>如果和上面mac的类似有版本号的信息输出就是配置成功了</p>
<p>然后我们就可以去配置maven的远程仓库和本地仓库</p>
<p>远程仓库顾名思义就是要从远程拉取jar包到我们本地</p>
<p>本地仓库就是用来存储从远程仓库下载好的jar包</p>
<p>那有的人就会说了，这不跟我自己去网上下载一个然后放在我的文件夹里一样吗，</p>
<p>是的，确实有相似的地方，但是maven可以自己自动从网络拉取我们所需要的jar包，而不用我们一个一个的去找，maven还有很多优点这里就不一一例举了，想要了解更多可以直接百度</p>
<p>我们开始配置maven的远程仓库，打开maven的conf目录下可以看到有一个settings.xml 通过文本编辑器打开  然后我们定位到  <mirrors></p>
<p>这个是官方的远程仓库地址，可以看到里面的远程仓库地址默认是已经被注释了，然后我们就在他  <mirrors>标签的下方位置添加一个阿里云的maven远程仓库  注意不要写在注释里面了，不然不生效</p>
<p>我们添加一个标签如下</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre>

<p>这里我们就配置好maven的阿里云远程仓库了</p>
<p>我们再配置一下本地仓库的位置，指定一下maven下载的jar包到我们创建好的文件夹中</p>
<p>我们定位到标签  <localRepository>&#x2F;path&#x2F;to&#x2F;local&#x2F;repo</localRepository> 然后可以看到里面也是已经被注释了  我们在他注释的下方添加一个本地仓库的地址，这里你们填写你们自己的绝对路径，这里我做一个演示</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localRepository</span><span class="token punctuation">></span></span>/Users/xxx/maven_file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localRepository</span><span class="token punctuation">></span></span></code></pre>

<p>到这里就已经设置好了远程仓库和本地仓库，然后保存即可</p>
]]></content>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>mac启动springboot项目慢解决方案</title>
    <url>/2021/07/29/mac%E5%90%AF%E5%8A%A8springboot%E9%A1%B9%E7%9B%AE%E6%85%A2%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>首先查看自己本机的网络地址，点击系统设置，找到共享 然后就可以看到有这么一句话<code>您的本地网络上的电脑可以通过以下地址访问您的电脑：</code></p>
<p>下面就是你的电脑地址.local</p>
<p><img src="/../../../../myImg/mac%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" loading="lazy"></p>
<span id="more"></span>

<p>然后复制这段地址包括.local</p>
<p><code>luoqingdeMacBook-Pro.local</code></p>
<p>再打开本机的hosts，准备修改本地ip映射</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/hosts</code></pre>

<p>原内容如下：</p>
<pre class="language-none"><code class="language-none">##
# Host Database
#
# localhost is used to configure the loopback interface
# when the system is booting.  Do not change this entry.
##
127.0.0.1             localhost
255.255.255.255     broadcasthost
::1                 localhost </code></pre>

<p>修改成如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">##</span>
<span class="token comment"># Host Database</span>
<span class="token comment">#</span>
<span class="token comment"># localhost is used to configure the loopback interface</span>
<span class="token comment"># when the system is booting.  Do not change this entry.</span>
<span class="token comment">##</span>
<span class="token number">127.0</span>.0.1             localhost 你的机器名.local
<span class="token number">255.255</span>.255.255     broadcasthost
::1                 localhost 你的机器名.local</code></pre>

<p>只需要在127和::1这两个地址后面映射的localhost后面加个空格然后粘贴刚刚我们复制的本地地址即可</p>
]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装node、npm、hexo</title>
    <url>/2021/10/04/mac%E5%AE%89%E8%A3%85node%E3%80%81npm%E3%80%81hexo/</url>
    <content><![CDATA[<p>在mac中按照正常的安装node的方法来说是无法安装hexo的，所以我们要先安装nvm来安装node和hexo</p>
<p>首先我们安装nvm</p>
<p>官网：<a href="https://github.com/nvm-sh/nvm#installing-and-updating">https://github.com/nvm-sh/nvm#installing-and-updating</a></p>
<p>按照官方的安装方法来安装</p>
<p>先下载并安装好index脚本</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh <span class="token operator">|</span> <span class="token function">bash</span></code></pre>

<p>如果上面的命令执行了几次都是报错443无法连接的话那我们可以先把index脚本下载到电脑中然后自己手动执行</p>
   <span id="more"></span>

<p>执行完成后可以使用以下命令查看</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> nvm</code></pre>

<p>如果出现nvm这几个英文那么就成功了，如果什么都没有显示是空的话那么说明环境变量没有配置好</p>
<p>按照官方的话将下面的命令直接粘贴到环境变量的文件中，如果是11.0.1系统及之后的那么就要放在.zshrc这个文件中，具体可以参照mac如何配置环境变量的帖子</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$&#123;XDG_CONFIG_HOME-&#125;</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">HOME</span>&#125;</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">$&#123;XDG_CONFIG_HOME&#125;</span>/nvm"</span><span class="token variable">)</span></span>"</span>
<span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span></code></pre>

<p>配置好环境变量后再次尝试使用上面的命令检查是否出现nvm，出现了后就可以进行下一步，也可以使用<code>nvm -v</code>这个命令来看nvm有没有配置好</p>
<p>安装完成nvm后就可以使用以下命令安装node</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nvm <span class="token function">install</span> <span class="token function">node</span></code></pre>

<p>安装完成node后可以使用<code>node -v</code>进行验证</p>
<p>最后一步就可以安装hexo博客了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre>

]]></content>
      <tags>
        <tag>node</tag>
        <tag>hexo</tag>
        <tag>mac</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>liunx配置环境变量</title>
    <url>/2021/10/04/liunx%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>首先在liunx中有两种环境变量，一种是系统级别的环境变量，一种是用户级别的环境变量</p>
<p>系统级别的环境变量配置在&#x2F;etc&#x2F;profile中</p>
<p>我们可以编辑这个文件来配置环境变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/Users/luoqing/apache-maven-3.5.4/bin:/usr/local/mysql/bin</code></pre>

<p>保存后所有的用户都会应用这个环境变量</p>
<p>当然我们也可以配置当前用户生效的环境变量，其他用户我们可以不用管</p>
<p>当前用户的环境变量在用户的home目录下的.bash_profile这个文件</p>
<p>如果不知道当前用户的home目录在那里可以使用 <code>echo $HOME</code>来查看</p>
<p>如果没有.bash_profile这个文件那么我们新建一个就可以了</p>
<p>然后可以使用<code>echo $PATH</code>来查看环境变量中是否存在我们配置好的路径</p>
]]></content>
      <tags>
        <tag>liunx</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装vnc_server</title>
    <url>/2021/05/19/mac%E5%AE%89%E8%A3%85vnc-server/</url>
    <content><![CDATA[<p>首先下载mac端的vnc Server</p>
<p><a href="http://www.pc6.com/mac/165577.html">http://www.pc6.com/mac/165577.html</a></p>
<p>然后进行安装，安装完成之后需要点击输入密钥进行激活，其实输入的是过期的密钥也可以进入vnc Server 下面提供几个可用的密钥</p>
<pre class="language-asciiarmor" data-language="asciiarmor"><code class="language-asciiarmor">5D7L8-ZQXSA-2L5D4-4UFB4-PWDLA
77NVU-D9G5T-79ESS-V9Y6X-JMVGA</code></pre>

<span id="more"></span>
<p>激活后如果要设置为对方不可控制你的电脑只能观看那么可以打开vnc菜单中的options</p>
<p>然后第一个选项中的Encryption就是远程连接的方式，可以更改为密码连接，然后就会提示输入一个密码这个密码就可以用来连接我们的mac端vnc了</p>
<p>我们再点击到第二个选项，Users&amp;Permissions</p>
<p>这里可以添加用户和设置访问权限，我们可以点击第一个Global permission 也就是全局权限，我们将下面的Permission的所有权限取消就没有访问权限了，别人就只能看着你操作了，如果你不想全部取消那么你可以到百度翻译一下看看都是什么意思，然后把自己需要的选项打勾就可以了</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>vnc</tag>
      </tags>
  </entry>
  <entry>
    <title>mac配置系统环境变量</title>
    <url>/2021/07/29/mac%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>首先要了解mac环境变量的配置文件在哪里</p>
<p>在mac10.15.1之前也就是版本为catalina之前的版本都是将用户的环境变量保存在.bash_profile这个文件中，而环境变量的配置文件则保存在用户的根目录，也就是～目录，我们直接使用命令切换到这个目录即可查看到环境变量的文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~</code></pre>

<p>当然当你打开终端的时候默认是在～目录的，所以可以不用切换，如果到了用户目录下但是如果你在此目录下没有发现这个文件可以使用<code>ls -a</code>这个命令来查看隐藏文件，如果还是没有那么你可以创建一个这个名称的文件即可命令如下</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> .bash_profile</code></pre>
<span id="more"></span>
<p>然后你就可以使用vi或者文本编辑器对其进行修改操作，这里演示添加一个maven的环境变量和mysql的环境变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/Users/luoqing/apache-maven-3.5.4/bin:/usr/local/mysql/bin</code></pre>

<p>可以看到如果需要添加多个变量的话只需要在上一个环境变量路径的末尾添加:然后追加你的新环境变量路径即可</p>
<p>最后再使用source命令使你的环境变量立即生效</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> .bash_profile</code></pre>



<p>上面就是mac10.15.1系统版本之前的环境变量配置，但是如果你是10.15.1版本及以后那么新的系统环境变量的文件名称默认改为了.zshrc 和上面一样你只需要将.bash_profile这个文件里的环境变量全部转移到新的文件然后删除.bash_profile即可最后再使用source命令使你的环境变量生效</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>环境变量</tag>
      </tags>
  </entry>
  <entry>
    <title>mac配置mysql字符编码</title>
    <url>/2021/06/03/mac%E9%85%8D%E7%BD%AEmysql%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>安装mysql后使用</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">show variables like <span class="token string">'%character%'</span><span class="token punctuation">;</span></code></pre>

<p>查看到字符编码中有filesystem和server两个都不是utf8编码，那么由于mac是属于unix系统所以和liunx的配置mysql编码的方式会比较相似，同样我们先切换到etc下</p>
<span id="more"></span>

<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /etc</code></pre>

<p>然后我们查看到并没有因为安装了mysql后就自动生成my.cnf这个配置文件，那么我们可以手动创建一个</p>
<p>首先我们要将mysql停止</p>
<p>然后在&#x2F;etc下创建一个my.cnf文件并进入编辑模式，由于不是管理员不可以操作系统级别的文件夹，所以还需要切换用户为root</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">su</span></code></pre>

<p>然后我们就可以开始编辑了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> my.cnf</code></pre>

<p>输入i进入插入模式，插入如下内容</p>
<pre class="language-cnf" data-language="cnf"><code class="language-cnf">[client]
default-character-set&#x3D;utf8

[mysqld]
default-storage-engine&#x3D;INNODB
character-set-server&#x3D;utf8
collation-server&#x3D;utf8_general_ci</code></pre>

<p>然后wq保存退出，并启动mysql，在使用<code>show variables like &#39;%character%&#39;;</code></p>
<p>查看字符编码就可以看到已经全都是utf8编码了</p>
]]></content>
      <tags>
        <tag>mysql</tag>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql解决乱码</title>
    <url>/2021/09/05/mysql%E8%A7%A3%E5%86%B3%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>首先我们要知道编码都是在mysql的my.ini配置文件中配置的，所以我们可以在安装好mysql后就对其配置文件进行更改，也可以后期更改，但是要注意，改配置文件之前请先关闭mysql服务，然后再更改my.ini，最后启动服务，如果你在mysql服务还在运行中的时候就修改配置文件就会导致你的mysql无法关闭以及重新启动，这里切记！</p>
<span id="more"></span>

<p>我们先讲一下win10中解决乱码问题</p>
<h2 id="win10"><a href="#win10" class="headerlink" title="win10"></a>win10</h2><p>首先我们在官网下载好mysql的exe安装文件进行安装完成后我们可以自己找到对应的安装路径，这里我比较喜欢安装软件就默认放在c盘，所以我们就拿默认的路径做个例子，mysql5.7的安装路径在C:\Program Files\MySQL\MySQL Server 5.7，我们进入这个目录下可以发现并没有my.ini这个配置文件的存在，如果有我们就可以直接进行更改，那么如果没有应该怎么办呢，他自己不会生成那我们就帮他创建一个一摸一样的名字的文件咯，所以我们在此路径下新建一个文件命名为my.ini，然后我们要对这个文件进行编辑，这里注意，尽量使用Notepad++这样的专业编辑工具，千万不要直接拿记事本进行编辑，出现编码的问题导致无法启动服务，如果你说记事本都可以代替专业软件那还需要专门开发一个这样的软件干嘛，所以大家尽量使用专业的编辑工具对配置类的文件进行编辑</p>
<p>第一步：关闭mysql服务</p>
<p>第二步：创建my.ini文件</p>
<p>这里我们新建完成my.ini后因为是一个新的文件里面是没有任何内容的所以我们在里面直接新增内容即可</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>
<span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token key attr-name">collation-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8_general_ci</span></code></pre>

<p>然后保存启动mysql服务即可，如果这里成功启动mysql就说明成功一半了，我们还需要登录mysql看一看配置文件到底有没有生效</p>
<p>我们使用mysql -u root -p进行登录</p>
<p>然后mysql界面执行status,如果出现以下的配置都是utf8那么就成功了</p>
<p>Server characterset:    utf8<br>Db     characterset:    utf8<br>Client characterset:    utf8<br>Conn.  characterset:    utf8</p>
<h2 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h2><p>其实不管是什么系统都像上面说的只需要修改配置文件即可，所以我们也就是需要知道mac安装完成mysql后配置文件放在什么地方，然后对其进行更改即可</p>
<p>mac的路径是：&#x2F;etc&#x2F;my.cnf</p>
<p>这里也是一样，如果说我们切换到&#x2F;etc目录并没有发现my.cnf这个文件存在我们也是一样创建一个就可以了</p>
<p>还是一样的操作</p>
<p>第一步：停止mysql服务</p>
<p>第二步：创建或编辑my.cnf文件，这里为什么说创建或编辑呢，因为如果文件存在那就编辑，如果不存在那就需要创建</p>
<p>第三部：写入内容，这里的内容还是一样的</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">client</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default-character-set</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>

<span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">mysqld</span><span class="token punctuation">]</span></span>
<span class="token key attr-name">default-storage-engine</span><span class="token punctuation">=</span><span class="token value attr-value">INNODB</span>
<span class="token key attr-name">character-set-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8</span>
<span class="token key attr-name">collation-server</span><span class="token punctuation">=</span><span class="token value attr-value">utf8_general_ci</span></code></pre>

<p>最后再重启服务就可以了</p>
<p>然后还是像上面一样使用status查看状态，如果都是utf8那么就生效了</p>
<h2 id="liunx"><a href="#liunx" class="headerlink" title="liunx"></a>liunx</h2><p>liunx的教程跟mac是一样的，配置文件也是放在&#x2F;etc&#x2F;my.cnf下，如果没有则自己创建一个</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>nacos版本不一致报错</title>
    <url>/2024/06/03/nacos%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>在启动微服务项目时明明配置没有问题但是却一直报错：Server check fail，please check server 127.0.0.1,port 9848 is available，error&#x3D;{}</p>
<p>还有：java.util.concurrent.TimeoutException: Waited 3000 milliseconds</p>
<span id="more"></span>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>引入的springcloud和springcloudAlibaba版本分别为：2021.0.5、2021.0.4.0</p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><p>将springcloudAlibaba版本修改为2021.1即可正常启动，特此记录一下</p>
]]></content>
      <tags>
        <tag>nacos</tag>
        <tag>springcloud</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql忘记密码</title>
    <url>/2021/10/05/mysql%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>首先我们先停止mysql服务</p>
<p>windows</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net stop mysql</code></pre>

<p>liunx</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql stop</code></pre>

<p>如果是docker容器那么直接将这个mysql容器停止就好了，但是记住创建容器的时候要将&#x2F;etc&#x2F;mysql这个文件夹映射为数据卷，因为我们要对其配置文件进行修改</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop mysql</code></pre>

<p>mac可以直接在设置里的可视化界面中停止</p>
<p>然后我们找到mysql的配置文件my.cnf进行修改</p>
   <span id="more"></span>

<p>在[mysqld]这个标签下添加如下内容</p>
<pre class="language-cnf" data-language="cnf"><code class="language-cnf">skip-host-cache
skip-name-resolve
skip-grant-tables</code></pre>

<p>记住，这里一定要停止之后再修改配置文件，不然有可能会导致无法启动</p>
<p>修改完成后就可以再启动mysql服务了，然后再登录mysql直接不用输入密码就可以进入，当然我们不可能长久使用这样无密码登录的环境，我们再使用如下命令进行密码的修改，各个版本修改密码的命令可能会有不同，下面提供mysql5.7版本修改密码的命令，其他版本自己百度找就好了</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; use mysql;
mysql&gt; update user set authentication_string&#x3D;password(&#39;这里填密码&#39;) where user&#x3D;&#39;root&#39;;
mysql&gt; flush privileges;
mysql&gt; exit;</code></pre>



<p>修尬完成密码后关闭mysql服务，然后去配置文件中将上面添加的三行跳过密码的配置删除然后重启mysql服务就可以使用新密码登录了</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>shell脚本</title>
    <url>/2021/10/04/shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h3 id="shell脚本规范"><a href="#shell脚本规范" class="headerlink" title="shell脚本规范"></a>shell脚本规范</h3><ul>
<li><p>文件的拓展名必须是.sh</p>
</li>
<li><p>文件首行必须使用#!  指定script脚本的shell运行环境</p>
<p>我们的环境中有很多种运行环境，可以在&#x2F;etc&#x2F;shells看具体的环境</p>
<p>需要查看当前正在使用的shell环境也可以使用如下脚本,注意要大写</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$SHELL</span></code></pre>
</li>
<li><p>参数和命令之间多个空格会被认为是一个空格</p>
</li>
<li><p>tab键也认为是一个空格</p>
</li>
<li><p>空白行会被忽略</p>
</li>
</ul>
<span id="more"></span>

<h3 id="脚本执行的方式"><a href="#脚本执行的方式" class="headerlink" title="脚本执行的方式"></a>脚本执行的方式</h3><p>第一种:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sh</span> hello.sh</code></pre>

<p>第二种</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> hello.sh</code></pre>

<p>第三种 相对路径</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./hello.sh</code></pre>

<p>第四种 绝对路径</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">/root/hello.sh</code></pre>

<p>第五种 环境变量</p>
<p>​		首先我们查看我们系统的环境变量有那些路径</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span></code></pre>

<p>然后随意放在一个的bin目录下即可直接执行，比如放在&#x2F;usr&#x2F;local&#x2F;bin目录下，然后在任意地方输入脚本名称即可执行</p>
<h3 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h3><ul>
<li>变量名只能使用英文字母、数字、下划线。首个字符不能以数字开头</li>
<li>中间不能有空格</li>
<li>不能使用标点符号</li>
<li>不能使用关键字</li>
<li>定义变量名称直接使用x&#x3D;1这种形式</li>
<li>等于号左右不能有空格</li>
<li>执行结果赋值给变量时&#96;&#96;</li>
<li>调用变量时必须加$     $a  或者${a}</li>
</ul>
<p>变量a与变量A不是同一个变量，有大小写的区分</p>
<p>列出所有变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span></code></pre>

<p>删除变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> a</code></pre>

<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> 秒 <span class="token parameter variable">-p</span> <span class="token string">"请输入你的名字："</span> NAME

输出 <span class="token builtin class-name">echo</span> <span class="token variable">$NAME</span>

执行的时候也可以跟输入

比如 <span class="token function">sh</span> hello.sh job

然后在shell脚本中接收第一个参数：a<span class="token operator">=</span><span class="token variable">$1</span></code></pre>

<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><pre class="language-bash" data-language="bash"><code class="language-bash">定义变量a

<span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">6</span>

<span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">2</span>

计算：echo <span class="token variable"><span class="token variable">$((</span>a<span class="token operator">+</span>b<span class="token variable">))</span></span>

除法：echo <span class="token variable"><span class="token variable">$((</span>a<span class="token operator">/</span>b<span class="token variable">))</span></span></code></pre>

<h3 id="计算字符串的长度"><a href="#计算字符串的长度" class="headerlink" title="计算字符串的长度"></a>计算字符串的长度</h3><p>首先一定要定义一个变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span>nihao

然后取长度

<span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>a&#125;</span></code></pre>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>在bash中只有一位数组</li>
<li>数组下标从0开始</li>
<li>每个元素使用空格隔开</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">数组定义：a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">)</span>

也可以这样定义：a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span>

取值：<span class="token variable">$&#123;a<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span>  <span class="token variable">$&#123;a<span class="token punctuation">[</span>1<span class="token punctuation">]</span>&#125;</span>

获取数组所有元素   <span class="token variable">$&#123;a<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span>

获取数组长度  <span class="token variable">$&#123;<span class="token operator">#</span>a<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span></code></pre>



<h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token number">5</span>
<span class="token keyword">fi</span></code></pre>

<p>注意 判断等式的两边一定要有一个空格，否则会报错 等号两边也一定要有空格，否则一直会执行第一个if里的语句</p>
<p>if多条件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">5</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token number">1</span>
<span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token variable">$a</span> <span class="token operator">==</span> <span class="token number">6</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
 <span class="token builtin class-name">echo</span> <span class="token number">2</span>
<span class="token keyword">else</span>
 <span class="token builtin class-name">echo</span> <span class="token number">3</span>
<span class="token keyword">fi</span></code></pre>

<h3 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable">$1</span>
<span class="token keyword">case</span> <span class="token variable">$a</span> <span class="token keyword">in</span>
admin<span class="token punctuation">)</span>
 <span class="token builtin class-name">echo</span> welcome
 <span class="token punctuation">;</span><span class="token punctuation">;</span>
other<span class="token punctuation">)</span>
 <span class="token builtin class-name">echo</span> hello
 <span class="token punctuation">;</span><span class="token punctuation">;</span>
*<span class="token punctuation">)</span>
 <span class="token builtin class-name">echo</span> hi
 <span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token keyword">esac</span></code></pre>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>循环一百次</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">&#125;</span>
<span class="token keyword">do</span>
 <span class="token builtin class-name">echo</span> <span class="token variable">$n</span>
<span class="token keyword">done</span></code></pre>

<p>循环指定列表</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>
<span class="token keyword">do</span>
 <span class="token builtin class-name">echo</span> <span class="token variable">$n</span>
<span class="token keyword">done</span></code></pre>

<p> 第二种for方式</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">for</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
 <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>a<span class="token operator">+</span>i<span class="token variable">))</span></span>
<span class="token keyword">done</span></code></pre>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$index</span> <span class="token parameter variable">-le</span> <span class="token number">100</span> <span class="token punctuation">]</span>
<span class="token keyword">do</span>
 <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>sum<span class="token operator">+</span>index<span class="token variable">))</span></span>
 <span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$sum</span></code></pre>

<p>这里注意 《&#x3D;符号用的是-le 这里无法直接使用符号</p>
<p>第二种方式 这里就可以使用符号</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>
<span class="token keyword">while</span> <span class="token variable"><span class="token punctuation">((</span>$index<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">))</span></span>
<span class="token keyword">do</span>
 <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>sum<span class="token operator">+</span>index<span class="token variable">))</span></span>
 <span class="token assign-left variable">index</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>
<span class="token keyword">done</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$sum</span></code></pre>

<h3 id="function-函数"><a href="#function-函数" class="headerlink" title="function 函数"></a>function 函数</h3><p>直接通过名字即可调用</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">function</span> <span class="token function-name function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
 <span class="token builtin class-name">echo</span> hello
<span class="token punctuation">&#125;</span>
hello</code></pre>



<h3 id="检查脚本语法是否有错误，不执行脚本"><a href="#检查脚本语法是否有错误，不执行脚本" class="headerlink" title="检查脚本语法是否有错误，不执行脚本"></a>检查脚本语法是否有错误，不执行脚本</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-n</span> hello.sh</code></pre>

]]></content>
      <tags>
        <tag>liunx</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>rarcrack破解多种格式压缩包</title>
    <url>/2021/03/28/rarcrack%E7%A0%B4%E8%A7%A3%E5%A4%9A%E7%A7%8D%E6%A0%BC%E5%BC%8F%E5%8E%8B%E7%BC%A9%E5%8C%85/</url>
    <content><![CDATA[<p>首先我们要把rarcrack下载好，因为这个软件在kali中也没有自带。 这里提供一个我复制的GitHub的克隆仓库给大家使用：</p>
<p><a href="https://gitee.com/luoqingBlog/rarcrack.git">https://gitee.com/luoqingBlog/rarcrack.git</a></p>
<p>点击下载zip即可，也可以使用git工具的clone。</p>
<p>下载完成后解压得到里面的文件，然后在mac或者Ubuntu上编译此文件</p>
<p>直接cd切换到文件夹当中然后使用make即可，mac并没有自带编译工具，所以要先去下载安装</p>
<p>编译</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span></code></pre>

<span id="more"></span>
<p>编译完成后问价夹里会多一个rarcrack可运行程序，mac版本尽量保持在mac10.x</p>
<p>我的系统是bigsur11.0.1  使用make编译完成后无法使用。尽管可以使用也是密码只破解了几次就结束了程序，这个问题我在kali中使用apt-get安装rarcrack之后也是这个样子，但是在kali中使用aapt-get rarcrack命令安装的可以破解rar的类型文件，但是其他文件类型都不行，密码走了四行就停止了</p>
<p>所以只有一个主意事项，mac版本尽量低于11.0</p>
<p>这里我使用的是kali的最新版本2021来做测试，因为kali和Ubuntu一样使用的是同一个发行版本，命令也不尽相同。</p>
<p>编译完成后我们就可以使用rarcrack来破解zip、rar、7z等格式的压缩包了，但是这里注意到是rarcrack只能使用暴力破解方式，也就是穷举法，是不支持自己使用字典破解的。</p>
<p>破解</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./rarcrack <span class="token parameter variable">--threads</span> <span class="token number">12</span> <span class="token parameter variable">--type</span> <span class="token function">zip</span> test.zip</code></pre>

<p>这里我指定使用文件夹下的rarcrack程序进行破解，这里一定要加上.&#x2F;。 因为这样才会识别是使用你当前文件夹里的程序，而直接输入rarcrack的话会提示你找不到这个命令，因为你没有安装这个程序</p>
<p>参数解释</p>
<blockquote>
<p>–threads 线程数。 最大不超过12。 超过也默认12</p>
<p>–type   要破解的压缩包类型。 可选zip rar  7z</p>
</blockquote>
<p>在运行破解命令之后马上按CTRL+C停止命令。 因为我们要缩小破解的范围</p>
<p>在压缩包的统计目录下会自动生成一个和压缩包同名的文件并且后缀为.xml</p>
<p>我们使用记事本打开此文件，然后把<abc></abc>中间的字符串改成0123456789，这里的意思是指定纯数字破解，然后再把 <current></current>中间的内容改为0，表示从0开始破解 然后我们保存在运行一遍破解命令<code>./rarcrack --threads 12 --type zip test.zip</code>就会自动读取你的xml配置文件然后从0开始破解数字</p>
<p>我们可以使用<code>top -H</code>来查看当前运行的程序，可以看到rarcrack一共有12个正在运行</p>
<p>最后破解成功了就会显示</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">GOOD: password cracked: <span class="token string">'100'</span></code></pre>

<p>这里成功破解出了密码是100</p>
<p>如果要破解的文件是zip。可以使用fcrackzip来破解。 因为速度要快很多。其他格式就可以使用rarcrack来破解。但是时间较长。</p>
]]></content>
      <tags>
        <tag>rarcrack</tag>
        <tag>zip</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx部署vue项目</title>
    <url>/2021/11/22/nginx%E9%83%A8%E7%BD%B2vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>首先我们先本地启动这个vue的项目，mac和liunx建议先安装nvm，然后通过nvm安装nodejs即可。</p>
<p>启动vue项目，首先切换到项目的根路径，也就是有package.json文件的地方</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> mall-admin-web-master</code></pre>

<p>然后安装运行所需要的依赖</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre>

<p>安装完成后本地运行查看</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev</code></pre>

<p>这个dev是在package.json这里面配置的启动名称，一般vue项目也是这个</p>
<p>启动完成后使用<a href="http://localhost:8090可以进行本地访问">http://localhost:8090可以进行本地访问</a></p>
<p>但是这只是本地访问，你使用你自己的外网ip进行访问可以看到是访问不通的，我们需要搭建一个nginx服务器来转发到这个网页即可</p>
<p>然后在使用打包命令对所有要部署在nginx的静态文件打包</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run build</code></pre>

<p>打包完成后项目下会多出一个dist文件夹，这里面放的就是所有的静态文件，<br>把这个文件夹所有的静态文件放到nginx的静态页面路径下即可访问</p>
<p>&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html</p>
]]></content>
      <tags>
        <tag>nginx</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>pyinstaller打包python可执行文件</title>
    <url>/2024/02/05/pyinstaller%E6%89%93%E5%8C%85%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>pyinstaller是一个第三方库，它能够在Windows、Linux、 Mac OS X 等操作系统下将 Python 源文件打包，通过对源文件打包， Python 程序可以在没有安装 Python 的环境中运行，也可以作为一个 独立文件方便传递和管理。</p>
<p>PyInstaller支持Python 2.7和Python 3.3+。可以在Windows、Mac OS X和Linux上使用，但是并不是跨平台的，而是说你要是希望打包成.exe文件，需要在Windows系统上运行PyInstaller进行打包工作；打包成mac app，需要在Mac OS上使用。</p>
<span id="more"></span>

<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pyinstaller</code></pre>

<p>该命令会将所需要的依赖安装到python安装目录的script文件夹中，如果你安装python时已经配置了python的环境变量，应该会有script文件夹的环境变量配置，可以直接在cmd中使用pyinstaller命令</p>
<p>环境变量示例：C:\Users\Administrator\AppData\Local\Programs\Python\Python38\Scripts\</p>
<h2 id="二、参数帮助"><a href="#二、参数帮助" class="headerlink" title="二、参数帮助"></a>二、参数帮助</h2><table>
<thead>
<tr>
<th>可选参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-F</td>
<td>生成单个的可执行文件</td>
</tr>
<tr>
<td>-h</td>
<td>查看该模块的帮助信息</td>
</tr>
<tr>
<td>-v</td>
<td>查看该模块的版本信息</td>
</tr>
<tr>
<td>-D</td>
<td>创建一个包含可执行文件的单文件夹捆绑包</td>
</tr>
<tr>
<td>-n</td>
<td>指定项目（产生的 spec）名字。如果省略该选项，那么第一个脚本的主文件名将作为 spec 的名字</td>
</tr>
<tr>
<td>-d</td>
<td>产生 debug 版本的可执行文件</td>
</tr>
<tr>
<td>-w</td>
<td>指定程序运行时不显示命令行窗口（仅对 Windows 有效）</td>
</tr>
<tr>
<td>-c</td>
<td>定使用命令行窗口运行程序（仅对 Windows 有效）</td>
</tr>
<tr>
<td>-o</td>
<td>指定 spec 文件的生成目录。如果没有指定，则默认使用当前目录来生成 spec 文件</td>
</tr>
</tbody></table>
<h2 id="三、生成可执行文件"><a href="#三、生成可执行文件" class="headerlink" title="三、生成可执行文件"></a>三、生成可执行文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash">pyinstaller <span class="token parameter variable">-F</span> <span class="token parameter variable">-w</span> main.py</code></pre>

<p>main.py就是程序启动的类，自行替换</p>
<p>打包完成后会在当前目录下生成两个目录和一个spec文件</p>
<p>分别是build、dist、main.spec</p>
<p>其中dist保存了打包后的可执行文件，spec则是打包时可选的配置文件</p>
<h2 id="四、打包资源文件"><a href="#四、打包资源文件" class="headerlink" title="四、打包资源文件"></a>四、打包资源文件</h2><p>打包后可执行文件中只有.py文件，程序中的配置文件和资源文件都没有，需要通过spec将所需要打包的文件配置进去。</p>
<p>sepc中datas选项即为配置文件映射，其格式为[(‘源文件’,’打包后的目录’),(‘源文件’,’打包后的目录’)]</p>
<p>我的根目录中有两种类型的文件需要打包，我们创建一个数组如下：</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml">resource_data = <span class="token punctuation">[</span>
('<span class="token important">*.json'</span><span class="token punctuation">,</span>'.')<span class="token punctuation">,</span>
('<span class="token important">*.yml'</span><span class="token punctuation">,</span>'.')
<span class="token punctuation">]</span>

a = Analysis(
    <span class="token punctuation">[</span><span class="token string">'main.py'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    pathex=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    binaries=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    datas=resource_data<span class="token punctuation">,</span>
    hiddenimports=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    hookspath=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
    hooksconfig=<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    runtime_hooks=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
    excludes=<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    win_no_prefer_redirects=False<span class="token punctuation">,</span>
    win_private_assemblies=False<span class="token punctuation">,</span>
    cipher=block_cipher<span class="token punctuation">,</span>
    noarchive=False<span class="token punctuation">,</span>
)</code></pre>

<h2 id="5、访问打包后的资源文件"><a href="#5、访问打包后的资源文件" class="headerlink" title="5、访问打包后的资源文件"></a>5、访问打包后的资源文件</h2><p>打包后的文件无法直接访问，需要使用特定的访问路径，我们写一个方法传入一个路径返回打包后的真实路径，并判断是否为打包后的文件，如果是则使用打包后的路径如果不是则使用当前路径</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">resource_path</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> relative_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">,</span> <span class="token string">'frozen'</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#是否Bundle Resource</span>
        base_path <span class="token operator">=</span> sys<span class="token punctuation">.</span>_MEIPASS
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        base_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_path<span class="token punctuation">,</span>relative_path<span class="token punctuation">)</span></code></pre>

<h2 id="6、重新打包有资源文件后的可执行文件"><a href="#6、重新打包有资源文件后的可执行文件" class="headerlink" title="6、重新打包有资源文件后的可执行文件"></a>6、重新打包有资源文件后的可执行文件</h2><p>配置完成后我们直接使用spec的配置进行重新打包可执行文件中就有资源文件了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">pyinstaller main.spec</code></pre>

]]></content>
      <tags>
        <tag>python</tag>
        <tag>pyinstaller</tag>
        <tag>exe</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理https</title>
    <url>/2023/04/17/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86https/</url>
    <content><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在前段时间我需要在一个https的网站中注入我自己的脚本进行自动填充表单的功能，使用的是JQ的$.post函数进行http请求，但是执行该函数请求后报错如下：</p>
<p>Mixed Content: The page at ‘<a href="https://v2020.ft.cntaiping.com:8443/vpn/index.html">https://v2020.ft.cntaiping.com:8443/vpn/index.html</a>‘ was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint ‘<a href="http://192.168.123.79/getKey">http://192.168.123.79/getKey</a>‘. This request has been blocked; the content must be served over HTTPS.<br>意思是说当前访问的网站是一个https的网站，发送的请求已被锁定，发送的请求必须是https。那么我们就需要模拟一个https请求来达到我们的目的，方法有很多，这里我们使用nginx模拟一个https代理到我们http的真实请求也可以做到。</p>
<span id="more"></span>

<h2 id="2、安装nginx"><a href="#2、安装nginx" class="headerlink" title="2、安装nginx"></a>2、安装nginx</h2><p>由于windows安装比较简单，只需要下载好压缩包即可使用，这里主要介绍一下centos7安装nginx 的方法。</p>
<h3 id="2-1下载"><a href="#2-1下载" class="headerlink" title="2.1下载"></a>2.1下载</h3><p>nginx下载官网：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<p>进入官网后可以看到有三个版本Mainline（主要版）、Stable（稳定版）、Legacy（历史版）</p>
<p>我们可以点击稳定版下的nginx-1.24.0，进行下载，windows可以点击nginx&#x2F;Windows-1.24.0进行下载。</p>
<h3 id="2-2编译并安装"><a href="#2-2编译并安装" class="headerlink" title="2.2编译并安装"></a>2.2编译并安装</h3><p>下载好后我们将下载好的nginx-1.24.0.tar.gz上传至&#x2F;usr&#x2F;local下，如果没有权限可以自己找一个目录。然后进行解压</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> nginx-1.24.0.tar.gz</code></pre>

<p>解压好后进入nginx-1.24.0文件夹。指定编译目录及需要安装的模块。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/nginx --with-http_ssl_module</code></pre>

<p>注：–prefix是指定编译后安装的文件夹，–with-http_ssl_module则是指定需要安装https反向代理模块，如果不安装此模块那么你将无法反向代理https。</p>
<p>编译源码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token parameter variable">-j</span> <span class="token number">4</span></code></pre>

<p>注：-j 代表使用几个处理器进行多线程编译，越高越快，但是需要根据自己的处理器进行填写，比如我的处理器是i5-3475s 四核心  所以指定4即可，如果填写超过自己处理器核心可能会报错。</p>
<p>安装</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> <span class="token function">install</span></code></pre>

<p>安装好后可以发现之前指定的&#x2F;usr&#x2F;local&#x2F;目录中有已经编译好的nginx目录。</p>
<h3 id="3、安装mkcert"><a href="#3、安装mkcert" class="headerlink" title="3、安装mkcert"></a>3、安装mkcert</h3><p>mkcert是谷歌旗下发布的一款自动生成https证书的工具，要比openssl更加快捷方便。</p>
<p>下载：<a href="https://github.com/FiloSottile/mkcert/releases">https://github.com/FiloSottile/mkcert/releases</a></p>
<p>按照自己的系统版本下载即可，我这里下载mkcert-v1.4.4-linux-amd64，下载好后将mkcert-v1.4.4-linux-amd64上传到&#x2F;usr&#x2F;local&#x2F;bin下。修改名称为mkcert。并赋权可执行。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> mkcert</code></pre>

<p>然后我们找一个目录存放我们的证书和密钥。我选择&#x2F;root&#x2F;mkcert，当然如果使用的是别的用户可以自己挑一个目录存放。</p>
<h3 id="3-1生成https所需证书和密钥"><a href="#3-1生成https所需证书和密钥" class="headerlink" title="3.1生成https所需证书和密钥"></a>3.1生成https所需证书和密钥</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mkcert -cert-file homesystem.pem -key-file homesystem.key <span class="token number">192.168</span>.123.27 homesystem.com</code></pre>

<p>注：-cert-file指定证书名称，-key-file指定密钥名称 192.168.123.27 homesystem.com指定需要代理的https网址的ip和dns，后面的dns名称如果没有可以随便起一个也可以使用你购买的域名。</p>
<p>执行命令后会在当前目录生成homesystem.pem和homesystem.key两个文件。这两个文件需要在nginx的配置文件中使用到。</p>
<h3 id="3-2安装颁发者证书和密钥"><a href="#3-2安装颁发者证书和密钥" class="headerlink" title="3.2安装颁发者证书和密钥"></a>3.2安装颁发者证书和密钥</h3><p>由于客户端在安装好生成的证书后会提示“windows没有足够的信息，不能验证该证书”。原因是还需要提供一个颁发者的证书。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mkcert <span class="token parameter variable">--install</span></code></pre>

<p>安装好后会在当前用户home目录生成一个.local&#x2F;share&#x2F;mkcert目录，我是用的是root账户，所以会生成&#x2F;root&#x2F;.local&#x2F;share&#x2F;mkcert目录。该目录下会有两个文件rootCA.pem、rootCA-key.pem。</p>
<h2 id="4、配置nginx反向代理https"><a href="#4、配置nginx反向代理https" class="headerlink" title="4、配置nginx反向代理https"></a>4、配置nginx反向代理https</h2><p>我们进入之前安装好的nginx配置文件夹下，即&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</p>
<p>然后编辑nginx.conf文件，在http代理80的server上方增加一个https的server</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">61231</span> ssl</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">ssl_certificate</span>      /root/mkcert/homesystem.pem</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  /root/mkcert/homesystem.key</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_session_cache</span>    shared:SSL:50m</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">4h</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">500M</span></span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.123.27:8099</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code></pre>

<p>这里代表监听https的61231端口，且将所有请求转发到<a href="http://192.168.123.27:8099下">http://192.168.123.27:8099下</a></p>
<p>完整的配置文件如下：</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx">
<span class="token comment">#user  nobody;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span>

<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>

<span class="token comment">#pid        logs/nginx.pid;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>

    <span class="token comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span>
    <span class="token comment">#                  '$status $body_bytes_sent "$http_referer" '</span>
    <span class="token comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span>

    <span class="token comment">#access_log  logs/access.log  main;</span>

    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    <span class="token comment">#keepalive_timeout  0;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>

    <span class="token comment">#gzip  on;</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">61231</span> ssl</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">ssl_certificate</span>      /root/mkcert/homesystem.pem</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  /root/mkcert/homesystem.key</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_session_cache</span>    shared:SSL:50m</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">4h</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_ciphers</span>  HIGH:!aNULL:!MD5</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span>  <span class="token boolean">on</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">client_max_body_size</span> <span class="token number">500M</span></span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.123.27:8099</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

        <span class="token comment">#charset koi8-r;</span>

        <span class="token comment">#access_log  logs/host.access.log  main;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">#error_page  404              /404.html;</span>

        <span class="token comment"># redirect server error pages to the static page /50x.html</span>
        <span class="token comment">#</span>
        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>
        <span class="token comment">#&#125;</span>

        <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ \.php$ &#123;</span>
        <span class="token comment">#    root           html;</span>
        <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>
        <span class="token comment">#    fastcgi_index  index.php;</span>
        <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>
        <span class="token comment">#    include        fastcgi_params;</span>
        <span class="token comment">#&#125;</span>

        <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>
        <span class="token comment"># concurs with nginx's one</span>
        <span class="token comment">#</span>
        <span class="token comment">#location ~ /\.ht &#123;</span>
        <span class="token comment">#    deny  all;</span>
        <span class="token comment">#&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token comment"># another virtual host using mix of IP-, name-, and port-based configuration</span>
    <span class="token comment">#</span>
    <span class="token comment">#server &#123;</span>
    <span class="token comment">#    listen       8000;</span>
    <span class="token comment">#    listen       somename:8080;</span>
    <span class="token comment">#    server_name  somename  alias  another.alias;</span>

    <span class="token comment">#    location / &#123;</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    &#125;</span>
    <span class="token comment">#&#125;</span>


    <span class="token comment"># HTTPS server</span>
    <span class="token comment">#</span>
    <span class="token comment">#server &#123;</span>
    <span class="token comment">#    listen       443 ssl;</span>
    <span class="token comment">#    server_name  localhost;</span>

    <span class="token comment">#    ssl_certificate      cert.pem;</span>
    <span class="token comment">#    ssl_certificate_key  cert.key;</span>

    <span class="token comment">#    ssl_session_cache    shared:SSL:1m;</span>
    <span class="token comment">#    ssl_session_timeout  5m;</span>

    <span class="token comment">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>
    <span class="token comment">#    ssl_prefer_server_ciphers  on;</span>

    <span class="token comment">#    location / &#123;</span>
    <span class="token comment">#        root   html;</span>
    <span class="token comment">#        index  index.html index.htm;</span>
    <span class="token comment">#    &#125;</span>
    <span class="token comment">#&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>

<h2 id="5、使nginx配置生效"><a href="#5、使nginx配置生效" class="headerlink" title="5、使nginx配置生效"></a>5、使nginx配置生效</h2><p>在nginx的sbin目录下执行以下命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> conf/nginx.conf</code></pre>

<p>如果出现successful代码说明成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nginx: the configuration <span class="token function">file</span> /usr/local/nginx//conf/nginx.conf syntax is ok
nginx: configuration <span class="token function">file</span> /usr/local/nginx//conf/nginx.conf <span class="token builtin class-name">test</span> is successful</code></pre>

<h3 id="5-1nginx常用命令"><a href="#5-1nginx常用命令" class="headerlink" title="5.1nginx常用命令"></a>5.1nginx常用命令</h3><p>启动nginx</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./nginx</code></pre>

<p>停止nginx</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-s</span> stop</code></pre>

<p>使配置文件生效</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> conf/nginx.conf</code></pre>



<h2 id="6、客户端证书安装"><a href="#6、客户端证书安装" class="headerlink" title="6、客户端证书安装"></a>6、客户端证书安装</h2><p>我们将刚刚生成的homesystem.pem和这一次生成的rootCA.pem一起复制到windows客户端，后缀改为crt后即可进行安装。</p>
<p>安装好后我们使用<a href="https://192.168.123.27:61231/getKey">https://192.168.123.27:61231/getKey</a> 即可反向代理到http请求的地址: <a href="http://192.168.123.27:8099/getKey">http://192.168.123.27:8099/getKey</a> 并且不会报错证书不安全等提示</p>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>nginx</tag>
        <tag>mkcert</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot夏令时问题</title>
    <url>/2024/06/02/springboot%E5%A4%8F%E4%BB%A4%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>1986年4月，中国中央有关部门发出“在全国范围内实行夏时制的通知”，具体做法是：每年从四月中旬第一个星期日的凌晨2时整（北京时间），将时钟拨快一小时，即将表针由2时拨至3时，夏令时开始；到九月中旬第一个星期日的凌晨2时整（北京夏令时），再将时钟拨回一小时，即将表针由2时拨至1时，夏令时结束。从1986年到1991年的六个年度，除1986年因是实行夏时制的第一年，从5月4日开始到9月14日结束外，其它年份均按规定的时段施行。在夏令时开始和结束前几天，新闻媒体均刊登有关部门的通告。1992年起，夏令时暂停实行。</p>
<span id="more"></span>

<h2 id="夏令时具体时间分布"><a href="#夏令时具体时间分布" class="headerlink" title="夏令时具体时间分布"></a>夏令时具体时间分布</h2><table>
<thead>
<tr>
<th>开始时间-结束时间</th>
</tr>
</thead>
<tbody><tr>
<td>1986年5月4日至9月14日（1986年因是实行夏令时的第一年，从5月4日开始到9月14日结束）</td>
</tr>
<tr>
<td>1987年4月12日至9月13日</td>
</tr>
<tr>
<td>1988年4月10日至9月11日</td>
</tr>
<tr>
<td>1989年4月16日至9月17日</td>
</tr>
<tr>
<td>1990年4月15日至9月16日</td>
</tr>
<tr>
<td>1991年4月14日至9月15日</td>
</tr>
</tbody></table>
<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><h3 id="创建实体"><a href="#创建实体" class="headerlink" title="创建实体"></a>创建实体</h3><p>我们先创建一个简单的实体类，并只有一个Date类型的属性用于示范</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"GMT+8"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Date</span> date<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Date</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>date <span class="token operator">=</span> date<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="创建controller"><a href="#创建controller" class="headerlink" title="创建controller"></a>创建controller</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Test</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1986-09-14</span>
        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">527007600000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Test</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        test<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> test<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="发送请求测试"><a href="#发送请求测试" class="headerlink" title="发送请求测试"></a>发送请求测试</h3><p>url：<a href="http://127.0.0.1:8080/test">http://127.0.0.1:8080/test</a></p>
<p>响应报文：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"1986-09-13 23:00:00"</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在使用GMT+8时区时，因为夏令时原因会导致相对于正确的时间会少一个小时</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="将注解上的时区改为-Asia-Shanghai"><a href="#将注解上的时区改为-Asia-Shanghai" class="headerlink" title="将注解上的时区改为 Asia/Shanghai"></a>将注解上的时区改为 <code>Asia/Shanghai</code></h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span>timezone <span class="token operator">=</span> <span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span></code></pre>

<h3 id="修改springboot项目全局时区为-Asia-Shanghai"><a href="#修改springboot项目全局时区为-Asia-Shanghai" class="headerlink" title="修改springboot项目全局时区为 Asia/Shanghai"></a>修改springboot项目全局时区为 <code>Asia/Shanghai</code></h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">jackson</span><span class="token punctuation">:</span>
    <span class="token key atrule">time-zone</span><span class="token punctuation">:</span> Asia/Shanghai
    <span class="token key atrule">date-format</span><span class="token punctuation">:</span> yyyy<span class="token punctuation">-</span>MM<span class="token punctuation">-</span>dd HH<span class="token punctuation">:</span>mm<span class="token punctuation">:</span>ss</code></pre>

<h3 id="项目启动时注入本机时区"><a href="#项目启动时注入本机时区" class="headerlink" title="项目启动时注入本机时区"></a>项目启动时注入本机时区</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JackSonConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 时区配置
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Jackson2ObjectMapperBuilderCustomizer</span> <span class="token function">jacksonObjectMapperCustomization</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> jacksonObjectMapperBuilder <span class="token operator">-></span> jacksonObjectMapperBuilder<span class="token punctuation">.</span><span class="token function">timeZone</span><span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>mac如何设置环境变量关机不失效</title>
    <url>/2021/03/18/mac%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%85%B3%E6%9C%BA%E4%B8%8D%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<p>mac在10.15版本之前使用的是.bash_profile这个文件，但是从10.15版本开始则采用了新的文件设置环境变量。</p>
<p>并不是以前的文件没有用了，而是发现在没有重启电脑的情况下关闭终端再次打开则提示没有找到这个环境变量，那么我们就要稍微的做一些改动即可，这里用python的环境变量来做例子。</p>
<span id="more"></span>

<ul>
<li>首先我们打开mac终端，切换到用户的根目录下</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~</code></pre>

<p>然后我们可以查看一下目录下是否有.bash_profile这个文件，如果有则使用<code>open</code>命令打开编辑，如果没有则需要自己创建一个空白的文件即可</p>
<ul>
<li>查看所有文件</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-a</span></code></pre>

<p>一般来说没有这个文件，所以我们创建一个</p>
<ul>
<li>创建.bash_profile</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> .bash_profile</code></pre>

<p>然后可以使用 <code>ls -a</code>来查看是否创建成功</p>
<ul>
<li>创建成功后使用<code>open</code>命令打开可视化文本编辑器方便我们粘贴路径</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> .bash_profile</code></pre>

<p>然后我们把python的路径粘贴到文本当中保存即可</p>
<ul>
<li>python的默认路径在&#x2F;usr&#x2F;local&#x2F;bin中</li>
</ul>
<p>我安装的是python3.6，所以路径就是&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3.6</p>
<ul>
<li>在.bash_profile中写入</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">python</span><span class="token operator">=</span><span class="token string">"/usr/local/bin/python3.6"</span></code></pre>

<p>然后保存即可，但是还没有完，因为在以前的版本中的确是使用<code>source .bash_profile</code>就可以使环境变量生效，但是在新版本的mac中打开终端输入<code>source .bash_profile</code>命令你就会发现可以使用环境变量了但是你一旦关闭终端再次打开的时候就发现又失效了，要再执行一遍<code>source .bash_profile</code>才行，那么每次都要执行一遍命令太麻烦了。所以我们一个可以一劳永逸的办法，一次设置用不失效。</p>
<p>因为新版的mac系统都是直接读取一个叫.zshrc的文件所以我们在用户的根目录下创建一个这样的文件。</p>
<ul>
<li>首先还是cd切换到用户的根目录</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~</code></pre>

<ul>
<li>然后再使用touch命令创建一个名为.zshrc的文件</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> .zshrc</code></pre>

<ul>
<li>再使用open打开文件</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">open</span> .zshrc</code></pre>

<p>然后再把<code>source ~/.bash_profile</code>写入到文本中即可</p>
<p>最后把终端关闭，再打开输入python3你就可以发现已经可以在全局的作用下使用python3.6了，而不是系统自带的2.7版本，安装其他的软件的环境变量也是一样，只要记住路径然后写到.bash_profile里就会自动生效了</p>
]]></content>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot工程中使用logback输出实现日志唯一标识</title>
    <url>/2024/03/12/springboot%E5%B7%A5%E7%A8%8B%E4%B8%AD%E4%BD%BF%E7%94%A8logback%E8%BE%93%E5%87%BA%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/</url>
    <content><![CDATA[<p>在日常排查问题时，log.info输出的日志并没有唯一标识，导致实际排查问题时无法判断某一条日志是否是当前线程请求输出的日志。而我们可以通过拦截器拦截日志输出时设置一个唯一标识到输出中，后续只需要排查一下请求时的报文就可以获取到唯一标识，然后再通过唯一标识拿到所有的请求日志信息，方便排查问题。</p>
<span id="more"></span>

<h2 id="一、工程依赖"><a href="#一、工程依赖" class="headerlink" title="一、工程依赖"></a>一、工程依赖</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>

<h2 id="二、日志输出配置"><a href="#二、日志输出配置" class="headerlink" title="二、日志输出配置"></a>二、日志输出配置</h2><p>日志输出配置通常包含三部分：Level（日志输出级别）、Appender（输出到哪里）、Layout（输出格式）。logback中将Appender的作用放大了，除了指定输出位置之外，还能配置输出策略以及输出格式。这节只需要对appender的子元素pattern进行调整，增加输出%X{logId}。%X可以引用日志上下文的信息，这些信息是保存在MDC中的。示例配置如下：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!--格式化输出：%d表示日期，%X&#123;logId&#125;表示日志唯一编号 %thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%X&#123;logId&#125;] [%thread] %-5level %logger&#123;60&#125;[%L] - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre>

<h2 id="三、日志拦截器"><a href="#三、日志拦截器" class="headerlink" title="三、日志拦截器"></a>三、日志拦截器</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">MDC</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ModelAndView</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>handler<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptorAdapter</span></span><span class="token punctuation">;</span>
 
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">UUID</span></span><span class="token punctuation">;</span>
 

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">HandlerInterceptorAdapter</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">LogInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">LOG_ID_KEY</span> <span class="token operator">=</span> <span class="token string">"logId"</span><span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> arg0<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> arg1<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg2<span class="token punctuation">,</span> <span class="token class-name">Exception</span> arg3<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 删除logId</span>
            <span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token constant">LOG_ID_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> arg0<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> arg1<span class="token punctuation">,</span>
                           <span class="token class-name">Object</span> arg2<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> arg3<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span>
                             <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
 
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 设置logId</span>
            <span class="token class-name">String</span> logId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">MDC</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">LOG_ID_KEY</span><span class="token punctuation">,</span> logId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="四、加入拦截器链"><a href="#四、加入拦截器链" class="headerlink" title="四、加入拦截器链"></a>四、加入拦截器链</h1><pre class="language-none"><code class="language-none">@Configuration
public class WebMvcConfig implements WebMvcConfigurer &#123;
 
    &#x2F;**
     * 把日志拦截器注入为bean
     *
     * @return
     *&#x2F;
    @Bean
    public HandlerInterceptor logInterceptor() &#123;
        return new LogInterceptor();
    &#125;
 
    &#x2F;**
     * 注册拦截器
     *
     * @param registry
     *&#x2F;
    @Override
    public void addInterceptors(InterceptorRegistry registry) &#123;
        &#x2F;&#x2F; addPathPatterns 用于添加拦截规则, 这里假设拦截 &#x2F;url 后面的全部链接
        &#x2F;&#x2F; excludePathPatterns 用户排除拦截
        registry.addInterceptor(logInterceptor()).addPathPatterns(&quot;&#x2F;**&quot;);
    &#125;
&#125;</code></pre>

<p>到此，springboot工程可以对每次接口调用产生的日志都标记唯一的编号。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>springboot</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title>swagger</title>
    <url>/2021/10/17/swagger/</url>
    <content><![CDATA[<p>首先导入对应的swagger依赖</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;
    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;

&lt;dependency&gt;
    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;
    &lt;version&gt;2.9.2&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p> 然后在springbooot启动类上加上开启swagger的注解即可</p>
<span id="more"></span>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableSwagger2</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerApplication</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SwaggerApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>

<p>最后使用浏览器访问页面<a href="http://127.0.0.1:8080/swagger-ui.html#/">http://127.0.0.1:8080/swagger-ui.html#/</a></p>
<p>就可以看到页面了，swagger会默认扫描所有控制层</p>
<p>配置swagger页面的标题和注释信息，这个只需要配置一次即可,具体信息可自定义</p>
<p>配置信息中可以指定只扫描哪些包下的类，默认是扫描启动类下的所有子包</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xxx公司"</span><span class="token punctuation">,</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"swagger接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"用来学习swagger"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        docket<span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定扫描控制层</span>
        docket <span class="token operator">=</span> docket<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>配置指定注解的方法上不会显示</p>
<p>首先创建一个自定义注解</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @author luoqing
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyAnnotation</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>然后在返回配置中设置有该注解时不显示api文档</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xxx公司"</span><span class="token punctuation">,</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"swagger接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"用来学习swagger"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        docket<span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定扫描控制层</span>
        docket <span class="token operator">=</span> docket<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                方法上有自定义类注解时取反，则不生效</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>指定匹配的路径才显示在swagger文档中</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xxx公司"</span><span class="token punctuation">,</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"swagger接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"用来学习swagger"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        docket<span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定扫描控制层</span>
        docket <span class="token operator">=</span> docket<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                方法上有自定义类注解时取反，则不生效</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//                路径是/swagger开头的才会显示在swagger文档中</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/swagger/.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>匹配多个路径</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Docket</span> <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Docket</span> docket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span><span class="token class-name">DocumentationType</span><span class="token punctuation">.</span><span class="token constant">SWAGGER_2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ApiInfo</span> apiInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfoBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contact</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"xxx公司"</span><span class="token punctuation">,</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"swagger接口文档"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">"用来学习swagger"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        docket<span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span>apiInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//指定扫描控制层</span>
        docket <span class="token operator">=</span> docket<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//                方法上有自定义类注解时取反，则不生效</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span><span class="token function">not</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">withMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyAnnotation</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span><span class="token class-name">RequestHandlerSelectors</span><span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.example.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//                路径是/swagger开头的才会显示在swagger文档中</span>
                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token class-name">Predicates</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/swagger/.*"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">PathSelectors</span><span class="token punctuation">.</span><span class="token function">regex</span><span class="token punctuation">(</span><span class="token string">"/swagger2/.*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> docket<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>为每个controller指定对应的名字以及注解</p>
<p>@Api默认会在我们的控制器名称中加-来命名，但是我们需要自己自定义名字</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span>tags <span class="token operator">=</span> <span class="token string">"测试"</span><span class="token punctuation">,</span>description <span class="token operator">=</span> <span class="token string">"用来学习swagger"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerController</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@MyAnnotation</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">String</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> m<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> m1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> m1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>@ApiOperation我们可以给整个控制器添加名字我们也可以给每一个方法添加</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试2"</span><span class="token punctuation">,</span>notes <span class="token operator">=</span> <span class="token string">"用来测试的"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token class-name">String</span> m1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>@ApiParam 给参数添加描述，并且设置参数为必填,这里注意，参数一定要加@RequestParam，否则有时候swagger读取不到参数</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试2"</span><span class="token punctuation">,</span>notes <span class="token operator">=</span> <span class="token string">"用来测试的"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"第一个参数"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"这里是注释"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> m1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>@ApiIgnore也可以使用另一种swagger注解让方法不生成swagger文档，和我们上面自己写的一样</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ApiIgnore</span>
<span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"测试2"</span><span class="token punctuation">,</span>notes <span class="token operator">=</span> <span class="token string">"用来测试的"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ApiParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"第一个参数"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"这里是注释"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> m1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> m1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>SpringBoot</tag>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>trim()方法和strip()方法之间的区别</title>
    <url>/2021/10/02/trim-%E6%96%B9%E6%B3%95%E5%92%8Cstrip-%E6%96%B9%E6%B3%95%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>Java在JDK11中的String类中引入strip方法，trim()和strip()功能类似，主要区别是:</p>
<p>trim()可以去除字符串前后的半角空白字符<br>strip()可以去除字符串前后的全角和半角空白字符</p>
<p>半角和全角<br>半角是我们多数人在打字的时候使用的状态，如果我们不去刻意调整半全角，它会一直伴随着我们，因为半角状态下，人们已经习惯了这种打字模式，半角状态下可以使用任何标点符号，而且对于空格也没有特殊限制。<br>全角占两个字节，半角占一个字节。半角全角主要是针对标点符号来说的，全角标点占两个字节，半角占一个字节，而不管是半角还是全角，汉字都还是要占两个字节。<br>这里并非一个全角空白字符等于两个半角空白字符。<br>所以半角空白字符占用一个字节,半角的空白字符unicode编码为\u0020。<br>全角空白字符占用两个字节，全角的空白字符unicode编码为\u3000。</p>
<span id="more"></span>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> test1<span class="token operator">=</span><span class="token string">"测试\u0020"</span><span class="token punctuation">;</span><span class="token comment">//半角unicode</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test1<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>

        <span class="token class-name">String</span> test2<span class="token operator">=</span><span class="token string">"测试\u3000"</span><span class="token punctuation">;</span><span class="token comment">//全角unicode</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>

        <span class="token class-name">String</span> test3<span class="token operator">=</span><span class="token string">"测试 "</span><span class="token punctuation">;</span><span class="token comment">//半角空白字符</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test3<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test3<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>

        <span class="token class-name">String</span> test4<span class="token operator">=</span><span class="token string">"测试　"</span><span class="token punctuation">;</span><span class="token comment">//全角空白字符</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test4<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test4<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>

        <span class="token class-name">String</span> test5<span class="token operator">=</span><span class="token string">"测试  "</span><span class="token punctuation">;</span><span class="token comment">//两个半角空白字符</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test5<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test5<span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//2</span>
    <span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>steam启动报错应用程序-特定权限设置并未向在应用程序容器</title>
    <url>/2023/11/19/steam%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F-%E7%89%B9%E5%AE%9A%E6%9D%83%E9%99%90%E8%AE%BE%E7%BD%AE%E5%B9%B6%E6%9C%AA%E5%90%91%E5%9C%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<p>今天早上打开机器发现直接蓝屏，报错代码：CRITICAL_PROCESS_DIED。百度反馈打开windows的事件查看器看看有没有具体的报错日志再详细修复。打开事件查看器，点击windows日志，找到系统，发现有一个错误，虽然不知道是不是这个导致的蓝屏，但是最好还是修复一下。点击打开常规信息如下：</p>
<p>应用程序-特定 权限设置并未向在应用程序容器 不可用 SID (不可用)中运行的地址 LocalHost (使用 LRPC) 中的用户 DESKTOP-CF89SC1\Administrator SID (S-1-5-21-1072606511-1857501055-565917166-500)授予针对 CLSID 为<br>{2593F8B9-4EAF-457C-B68A-50F6B8EA6B54}<br>、APPID 为<br>{15C20B67-12E7-4BB6-92BB-7AFF07997402}<br> 的 COM 服务器应用程序的 本地 激活 权限。此安全权限可以使用组件服务管理工具进行修改。</p>
<span id="more"></span>

<h2 id="1、给对应注册表赋权"><a href="#1、给对应注册表赋权" class="headerlink" title="1、给对应注册表赋权"></a>1、给对应注册表赋权</h2><p>根据如上提示，需要给CLSID名为{2593F8B9-4EAF-457C-B68A-50F6B8EA6B54}和APPID为{15C20B67-12E7-4BB6-92BB-7AFF07997402}的注册表文件夹进行赋权。</p>
<p>首先使用win+R打开运行，输入regedit就可以进入注册表了。其中CLSID的目录在HKEY_CLASSES_ROOT\CLSID\{2593f8b9-4eaf-457c-b68a-50f6b8ea6b54}，APPID的目录在：HKEY_LOCAL_MACHINE\SOFTWARE\Classes\AppID\{15c20b67-12e7-4bb6-92bb-7aff07997402}</p>
<p>找到如上对应两个注册表文件夹，右键选择注册表文件夹的权限，点击高级，更改所有者为当前用户，例如Administrator，或更改为当前用户组也行，例如：Administrators，接着勾选替换子容器和对象的所有者。应用确定。接着返回刚刚的权限页面，在上方的组或用户名中添加当前用户名的账号并赋予完全控制权限。appid也是同上设置权限。</p>
<h2 id="2、给对应组件赋权"><a href="#2、给对应组件赋权" class="headerlink" title="2、给对应组件赋权"></a>2、给对应组件赋权</h2><p>这一步需要在第一步做完后重启电脑再往下</p>
<p>再次打开win+R，输入comexp.msc进入组件服务，依次点击 组件服务-&gt;计算机-&gt;我的电脑-&gt;DCOM配置</p>
<p>找到刚刚报错的组件，即组件应用程序ID为{15C20B67-12E7-4BB6-92BB-7AFF07997402}的组件，可能需要一个一个找，我这里的组件叫RuntimeBroker，右击属性可以看到应用程序id，也有可能不同的系统这个组件名称不同，需要自行查找。接着点击启动和激活权限，选择自定义，点击编辑，添加用户：Everyone 给这个用户允许本地启动和本地激活权限。接着点击访问权限和配置权限，都选择自定义，编辑添加Everyone用户即可并赋予本地访问权限和完全控制。</p>
<p>完成以上操作后重启电脑，打开事件查看器，清除日志，然后打开steam，发现启动正常，且事件查看器没有任何报错信息。</p>
]]></content>
      <tags>
        <tag>windows</tag>
        <tag>steam</tag>
      </tags>
  </entry>
  <entry>
    <title>typora移除过期提示</title>
    <url>/2023/04/04/typora%E7%A7%BB%E9%99%A4%E8%BF%87%E6%9C%9F%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<p>前言：由于typora在1.0版本正式推出后以前的beta版本都会弹出错误提示“This beta version of Typora is expired, please download and install a newer version.”导致必须升级正式版本付费使用，本次内容教大家如何跳过beta版本的提示信息继续使用typora</p>
<span id="more"></span>

<h2 id="1、下载beta版本typroa并安装"><a href="#1、下载beta版本typroa并安装" class="headerlink" title="1、下载beta版本typroa并安装"></a>1、下载beta版本typroa并安装</h2><p>地址：<a href="https://github.com/Light-of-Fireworks/typroa_bata_0.11">https://github.com/Light-of-Fireworks/typroa_bata_0.11</a></p>
<h2 id="2、下载typoraCracker解包-x2F-打包工具"><a href="#2、下载typoraCracker解包-x2F-打包工具" class="headerlink" title="2、下载typoraCracker解包&#x2F;打包工具"></a>2、下载typoraCracker解包&#x2F;打包工具</h2><p>注意：typoraCracker使用python语言编写，请提前安装好python3环境</p>
<p>地址：<a href="https://github.com/Light-of-Fireworks/typoraCracker">https://github.com/Light-of-Fireworks/typoraCracker</a></p>
<h2 id="3、解压typoraCracker，并在typoraCracker根目录下打开cmd"><a href="#3、解压typoraCracker，并在typoraCracker根目录下打开cmd" class="headerlink" title="3、解压typoraCracker，并在typoraCracker根目录下打开cmd"></a>3、解压typoraCracker，并在typoraCracker根目录下打开cmd</h2><h2 id="4、解压typora资源"><a href="#4、解压typora资源" class="headerlink" title="4、解压typora资源"></a>4、解压typora资源</h2><pre class="language-bash" data-language="bash"><code class="language-bash">python typora.py C:/Users/Administrator/AppData/Local/Programs/Typora/resources/app.asar ./out</code></pre>

<p>注：C:&#x2F;Users&#x2F;Administrator&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Typora代表的是你安装typora的路径，不清楚的可以右键typora图标选择打开文件所在位置即可 .&#x2F;out意思是解压至当前目录的out目录下，即会在当前目录下创建一个名为out的目录并解码app.asar文件</p>
<p><strong><font color="red">注意！！！ app.asar的位置必须是你typroa安装位置，不可以将app.asar复制到其他地方进行解码，必须解码typroa安装位置的app.asar，因为需要解码的不止是app.asar，还有其他拓展文件</font></strong></p>
<h2 id="5、修改License-js"><a href="#5、修改License-js" class="headerlink" title="5、修改License.js"></a>5、修改License.js</h2><p>打开刚刚生成的out\dec_app目录，可以看到一个License.js文件，使用文本编辑器进行编辑，可以使用idea等工具进行格式化后查看源代码。</p>
<p>其中可以使用Ctrl+F搜索”This beta version of Typora is expired, please download and install a newer version.”就可以看到如下代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">firstValidateLicense</span> <span class="token operator">=</span> <span class="token parameter">e</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    licenseInitialed <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> t <span class="token operator">=</span> <span class="token function">readLicenseInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">license</span><span class="token operator">:</span> n<span class="token punctuation">,</span> <span class="token literal-property property">email</span><span class="token operator">:</span> i<span class="token punctuation">&#125;</span> <span class="token operator">=</span> t <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    n <span class="token operator">&amp;&amp;</span> i <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token function">fillLicense</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">renewLicense</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">unfillLicense</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">showDialog</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> t</span><span class="token punctuation">)</span> <span class="token operator">=></span> electron<span class="token punctuation">.</span>dialog<span class="token punctuation">.</span><span class="token function">showMessageBox</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>
    <span class="token literal-property property">buttons</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"OK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">defaultId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">cancelId</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> e<span class="token punctuation">,</span>
    <span class="token literal-property property">message</span><span class="token operator">:</span> t
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function-variable function">endDevTest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    app<span class="token punctuation">.</span>expired <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">showDialog</span><span class="token punctuation">(</span>Dict<span class="token punctuation">.</span><span class="token function">getPanelString</span><span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Dict<span class="token punctuation">.</span><span class="token function">getPanelString</span><span class="token punctuation">(</span><span class="token string">"This beta version of Typora is expired, please download and install a newer version."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        shell<span class="token punctuation">.</span><span class="token function">openExternal</span><span class="token punctuation">(</span><span class="token string">"https://typora.io/#download"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1e3</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">validateDevTest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasLicense <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isLinux <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">.</span>devVersion <span class="token operator">&amp;&amp;</span> global<span class="token punctuation">.</span><span class="token constant">PRODUCTION_MODE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token function">getInstallDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"buildTime is 1637125121389"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token number">1637125121389</span><span class="token punctuation">)</span> <span class="token operator">||</span> t <span class="token operator">-</span> <span class="token number">1637125121389</span> <span class="token operator">></span> <span class="token number">20736e6</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">endDevTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e <span class="token operator">-=</span> <span class="token number">0</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"verInitTime is "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">-</span> e <span class="token operator">></span> <span class="token number">1728e7</span> <span class="token operator">&amp;&amp;</span> <span class="token function">endDevTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token function-variable function">showLicensePanelIfNeeded</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">shouldShowNoLicenseHint</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>app<span class="token punctuation">.</span>setting<span class="token punctuation">.</span>inFirstShow <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>isLinux <span class="token operator">&amp;&amp;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">.95</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>lastShown <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Date</span> <span class="token operator">-</span> lastShown <span class="token operator">></span> <span class="token number">18e6</span> <span class="token operator">||</span> <span class="token function">getTrailRemains</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">showLicensePanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>其中validateDevTest方法会验证版本是否过期</p>
<h3 id="5-1函数释义："><a href="#5-1函数释义：" class="headerlink" title="5.1函数释义："></a>5.1函数释义：</h3><p>endDevTest 函数用于显示一个对话框，提示用户下载并安装更新版本。然后，它会打开 Typora 的下载页面，并在 1 秒后退出程序。</p>
<p>validateDevTest 函数用于检查开发版本的有效性。如果没有许可证且不是 Linux 系统，则会检查安装日期和构建时间。如果超过了指定时间，则调用 endDevTest 函数。</p>
<h3 id="5-2代码释义（validateDevTest-）："><a href="#5-2代码释义（validateDevTest-）：" class="headerlink" title="5.2代码释义（validateDevTest ）："></a>5.2代码释义（validateDevTest ）：</h3><p>console.log(“buildTime is 1637125121389”)：打印typora构建日期</p>
<p>(isNaN(1637125121389) || t - 1637125121389 &gt; 20736e6) &amp;&amp; endDevTest()：查构建时间是否为数字（使用 isNaN 函数），并检查当前时间与构建时间之差是否大于 20736e6 毫秒（约 240 天）。如果满足这些条件之一，则调用 endDevTest 函数。</p>
<p>20736e6 是科学计数法的表示方法，它等于 20736 * 10^6，也就是 20736000000约 240 天。</p>
<p>console.log(“verInitTime is “ + e), !isNaN(e) &amp;&amp; t - e &gt; 1728e7 &amp;&amp; endDevTest()：使用 console.log 函数打印安装日期 e，然后检查安装日期是否为数字（使用 isNaN 函数），并检查当前时间 t 与安装日期之差是否大于 1728e7 毫秒（约 200 天）。如果满足这些条件，则调用 endDevTest 函数。</p>
<p>1728e7 是科学计数法的表示方法，它等于 1728 * 10^7，也就是 17280000000约 200 天。</p>
<p>根据如上代码我们仅需要修改一处地方即可，即将validateDevTest函数返回true即可，这样endDevTest函数就不会被调用也就不会有提示框了。</p>
<p>修改代码如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function-variable function">validateDevTest</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="6、回编译"><a href="#6、回编译" class="headerlink" title="6、回编译"></a>6、回编译</h2><p>将我们修改好的dec_app目录重新打包为app.asar，命令如下（在typoraCracker根目录执行）:</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">python typora.py <span class="token parameter variable">-u</span> ./out/dec_app <span class="token builtin class-name">.</span></code></pre>

<p>注意最后面有一个小数点不要漏了，代表将dec_app回编译后的文件放置typoraCracker根目录</p>
<h2 id="7、替换app-asar"><a href="#7、替换app-asar" class="headerlink" title="7、替换app.asar"></a>7、替换app.asar</h2><p>将编译好的typoraCracker&#x2F;app.asar替换C:&#x2F;Users&#x2F;Administrator&#x2F;AppData&#x2F;Local&#x2F;Programs&#x2F;Typora&#x2F;resources&#x2F;app.asar后重新打开typora即可使用</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>win10关闭WIN+SHIFT+S截图快捷键</title>
    <url>/2024/03/05/win10%E5%85%B3%E9%97%ADWIN-SHIFT-S%E6%88%AA%E5%9B%BE%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<p>网上搜了好久，看了不少解答都没有真正解决问题，其实问题很简单就是要禁用Shift+Win+S这组快捷键。</p>
<p>由于Windows没法直接禁用一组快捷键，所以此处实际上禁用的是Win+S的功能键，这样一来Shift+Win+S就同时被禁用了。</p>
<span id="more"></span>

<h2 id="1、打开注册表"><a href="#1、打开注册表" class="headerlink" title="1、打开注册表"></a>1、打开注册表</h2><p>按下Win+R键，输入regedit，回车即可打开</p>
<h2 id="2、进入禁用快捷目录"><a href="#2、进入禁用快捷目录" class="headerlink" title="2、进入禁用快捷目录"></a>2、进入禁用快捷目录</h2><p>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced</p>
<h2 id="3、新建键值"><a href="#3、新建键值" class="headerlink" title="3、新建键值"></a>3、新建键值</h2><p>新建一个字符串值，数值名称为“DisabledHotkeys”，数值数据为“S”，注意字母不要漏拼了最后有一个s。</p>
<h2 id="4、关闭注册表重启电脑"><a href="#4、关闭注册表重启电脑" class="headerlink" title="4、关闭注册表重启电脑"></a>4、关闭注册表重启电脑</h2><p>重启后再试试，Win10自带的截图工具快捷键是不是已经失效了。</p>
]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>webclient跳过ssl校验导致内存溢出</title>
    <url>/2024/07/05/webclient%E8%B7%B3%E8%BF%87ssl%E6%A0%A1%E9%AA%8C%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/</url>
    <content><![CDATA[<p>由于项目中发送请求的客户端非常多，比如apache的httpclient，也用过hutool的httputil，但是spring5之后都是推荐使用webflux进行请求的发送或处理，所以我们将平常的httpclient去掉，引入了spring-webflux，并自己动手构建了一个webclientutil作为请求发送的客户端。在此期间由于是手动构建的util，或多或少都有可能会写出一些bug，其中我们使用wenclient调用外部互联网接口时，由于对方是https连接，所以请求会失败因为没有安装证书，这时有两个处理方式一个是在spring项目中安装请求接口地址的证书，第二点就是跳过SSL证书验证，于是我们在util中加了一个方法构建一个可信任的证书用于跳过SSL验证，在经过多次请求发现服务器宕机了，打开日志发现是堆内存溢出，经过排除法发现不调用跳过SSL证书的方法就不会导致内存增加。</p>
<span id="more"></span>

<h2 id="导致内存溢出的方法"><a href="#导致内存溢出的方法" class="headerlink" title="导致内存溢出的方法"></a>导致内存溢出的方法</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebClientUtil</span> <span class="token function">trustSSL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">SslContext</span> sslContext <span class="token operator">=</span> <span class="token class-name">SslContextBuilder</span><span class="token punctuation">.</span><span class="token function">forClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">trustManager</span><span class="token punctuation">(</span><span class="token class-name">InsecureTrustManagerFactory</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  httpClient <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">secure</span><span class="token punctuation">(</span>sslContextSpec <span class="token operator">-></span> sslContextSpec<span class="token punctuation">.</span><span class="token function">sslContext</span><span class="token punctuation">(</span>sslContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>

<p>由于创建SslContext包含静态变量而WebClientUtil又是手动new导致webclientutil不会被回收。</p>
<h2 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h2><p>可以通过springboot启动时将其注入为bean即可，保持单例后续直接使用。</p>
<h3 id="创建bean"><a href="#创建bean" class="headerlink" title="创建bean"></a>创建bean</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ConnectionProvider</span> <span class="token function">connectionProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token class-name">ConnectionProvider</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">"connection-provider"</span><span class="token punctuation">)</span>
    <span class="token comment">// 最大连接数 默认为处理器数量*2</span>
    <span class="token punctuation">.</span><span class="token function">maxConnections</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    <span class="token comment">// 默认等待队列等于maxConnections*2</span>
    <span class="token punctuation">.</span><span class="token function">pendingAcquireMaxCount</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token comment">// 最大空闲时间</span>
    <span class="token punctuation">.</span><span class="token function">maxIdleTime</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">// 连接最大生命周期</span>
    <span class="token punctuation">.</span><span class="token function">maxLifeTime</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="改造后的工具方法"><a href="#改造后的工具方法" class="headerlink" title="改造后的工具方法"></a>改造后的工具方法</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">WebClientUtil</span> <span class="token function">trustSSL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">SslContext</span> sslContext <span class="token operator">=</span> <span class="token class-name">SpringUtil</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"sslContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  httpClient <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">secure</span><span class="token punctuation">(</span>sslContextSpec <span class="token operator">-></span> sslContextSpec<span class="token punctuation">.</span><span class="token function">sslContext</span><span class="token punctuation">(</span>sslContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> </code></pre>

]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>webflux</tag>
        <tag>webclient</tag>
      </tags>
  </entry>
  <entry>
    <title>windows切换版本</title>
    <url>/2023/07/27/windows%E5%88%87%E6%8D%A2%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>最近在玩生化危机4重置版的时候发现老是启动不了，网上搜了一些方法说是要升级windows10最新版本才可以玩，我第一次听说游戏还要看系统版本才可以玩的，由于我的系统是win10企业版LTSC养老版本，是无法升级的，所以必须切换到win10专业版然后再使用微软的官方升级工具进行升级，在吾爱论坛找了一个可以用的win10版本切换工具分享一下</p>
<span id="more"></span>



<p>软件已经放到gitee了，方便下载</p>
<p>地址：<a href="https://gitee.com/luoqingBlog/windows-version-switching/tree/master/">https://gitee.com/luoqingBlog/windows-version-switching/tree/master/</a></p>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>中国移动rax3000M刷机</title>
    <url>/2024/04/09/%E4%B8%AD%E5%9B%BD%E7%A7%BB%E5%8A%A8rax3000M%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<p>只要100左右就能获得一个512M内存+联发科MT7981+AX3000规格的入门神器，还能刷机,本教程仅适用于nand版本</p>
<span id="more"></span>

<h2 id="区分emmc版本和nand版本"><a href="#区分emmc版本和nand版本" class="headerlink" title="区分emmc版本和nand版本"></a>区分emmc版本和nand版本</h2><p>检查设备背面的标签：<br>“CH EC CMIIT ID: xxxx”是eMMC版本<br>“CH CMIIT ID: xxxx”是NAND版本</p>
<p>目前算力版是emmc，其余都是nand</p>
<h2 id="解锁ssh"><a href="#解锁ssh" class="headerlink" title="解锁ssh"></a>解锁ssh</h2><p>连接rax3000M路由器wifi或者使用网线直连路由器lan口，输入192.168.10.1进入路由器后台</p>
<p>用户和密码在路由器的背面，用户为user</p>
<p>登录后页面随便设置，进入主页面点击 更多–管理–配置管理</p>
<p>下载刷机文件：</p>
<p>链接: <a href="https://pan.baidu.com/s/1v3ChNdbP8gdKZByqDLijpw?pwd=1234">https://pan.baidu.com/s/1v3ChNdbP8gdKZByqDLijpw?pwd=1234</a></p>
<p>解压刷机文件，点击导入配置，选择<code>rax3000m-ssh.conf</code>文件，等待路由器重启</p>
<h2 id="刷入不死鸟"><a href="#刷入不死鸟" class="headerlink" title="刷入不死鸟"></a>刷入不死鸟</h2><h3 id="使用ssh连接路由器"><a href="#使用ssh连接路由器" class="headerlink" title="使用ssh连接路由器"></a>使用ssh连接路由器</h3><p>ip：192.168.10.1</p>
<p>用户：root 密码：1234567890</p>
<p>使用第三方ssh软件可能无法连接，可以使用cmd自带的ssh命令登录</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@192.168.10.1</code></pre>

<h3 id="上传不死鸟固件"><a href="#上传不死鸟固件" class="headerlink" title="上传不死鸟固件"></a>上传不死鸟固件</h3><p>将刷机包内的<code>uboot.bin</code>文件上传至路由器的&#x2F;temp文件夹内，没有第三方软件可使用如下命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> uboot.bin root@192.168.10.1:/temp</code></pre>

<h3 id="刷入底层"><a href="#刷入底层" class="headerlink" title="刷入底层"></a>刷入底层</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mtd <span class="token function">write</span> uboot.bin FIP</code></pre>

<h2 id="刷入openwrt固件"><a href="#刷入openwrt固件" class="headerlink" title="刷入openwrt固件"></a>刷入openwrt固件</h2><p>刷入底层后将路由器关机</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">init <span class="token number">0</span></code></pre>



<h3 id="进入不死鸟控制台"><a href="#进入不死鸟控制台" class="headerlink" title="进入不死鸟控制台"></a>进入不死鸟控制台</h3><p>拔掉路由器电源，用卡针顶住路由器的reset按钮，插上电源，看到蓝灯闪烁后松开。</p>
<p>将电脑设置为静态地址:192.168.1.2 网关：192.168.1.1</p>
<p>浏览器输入：192.168.1.1进入不死鸟控制台</p>
<h3 id="刷入固件"><a href="#刷入固件" class="headerlink" title="刷入固件"></a>刷入固件</h3><p>点击选择：选择\firmware_cmcc_rax3000m文件夹下<code>immortalwrt-mediatek-mt7981-cmcc_rax3000m-squashfs-factory.bin</code>文件，点击upload上传</p>
<p>等待路由器重启后，将电脑ip改为自动获取，浏览器输入192.168.6.1即可进入immortalwrt</p>
<h2 id="刷入信号加强版immortalwrt"><a href="#刷入信号加强版immortalwrt" class="headerlink" title="刷入信号加强版immortalwrt"></a>刷入信号加强版immortalwrt</h2><p>链接: <a href="https://pan.baidu.com/s/1ScBy8ov5dIE7rc_ciI-i5Q?pwd=1234">https://pan.baidu.com/s/1ScBy8ov5dIE7rc_ciI-i5Q?pwd=1234</a></p>
<p>输入192.168.6.1进入刚刚刷好的路由器后台界面，点击系统-备份升级，选择不保留配置升级即可。</p>
]]></content>
      <tags>
        <tag>rax3000M</tag>
      </tags>
  </entry>
  <entry>
    <title>windows开启卓越性能电源计划</title>
    <url>/2024/02/05/windows%E5%BC%80%E5%90%AF%E5%8D%93%E8%B6%8A%E6%80%A7%E8%83%BD%E7%94%B5%E6%BA%90%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="1、打开cmd输入如下命令创建一个卓越性能计划"><a href="#1、打开cmd输入如下命令创建一个卓越性能计划" class="headerlink" title="1、打开cmd输入如下命令创建一个卓越性能计划"></a>1、打开cmd输入如下命令创建一个卓越性能计划</h2><pre class="language-bash" data-language="bash"><code class="language-bash">powercfg <span class="token parameter variable">-duplicatescheme</span> e9a42b02-d5df-448d-aa00-03f14749eb61</code></pre>

<h2 id="2、自动选择已开启的卓越性能计划"><a href="#2、自动选择已开启的卓越性能计划" class="headerlink" title="2、自动选择已开启的卓越性能计划"></a>2、自动选择已开启的卓越性能计划</h2><p>上述命令执行后会返回一个GUID，例如：电源方案 GUID: 00cac9ad-0e8a-4b9d-a477-d1e0711b5099  (卓越性能)</p>
<p>我们根据创建的guid执行选择</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">powercfg <span class="token parameter variable">-s</span> 00cac9ad-0e8a-4b9d-a477-d1e0711b5099</code></pre>

<p>再次进入电源选项，可以看到已经选择到了新创建的卓越性能计划</p>
<span id="more"></span>
]]></content>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ollama部署本地模型</title>
    <url>/2024/03/24/%E4%BD%BF%E7%94%A8ollama%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>Ollama 是一个开源软件框架，它主要用于简化在本地环境中部署和管理大型语言模型的过程。这个框架设计了与Docker容器集成的方式，使得用户能够通过简单的命令行操作在自己的计算机上运行大型预训练的语言模型，比如Llama 2或其他兼容模型。</p>
<p>Ollama会将模型的权重、配置和其他必要数据打包成一个Modelfile，以方便用户下载、安装和执行。它还优化了资源使用，特别是对于GPU的支持，这样即便在非云端环境下，用户也能高效地利用本地硬件资源来运行复杂的AI模型。</p>
<p>随着2024年的更新，Ollama不仅支持macOS和Linux系统，也已经扩展到了Windows平台，使得更多用户能够在不同的操作系统上便捷地进行本地化的大规模语言模型部署。此外，Ollama还能够支持像谷歌Gemma这样的开源大语言模型。</p>
<span id="more"></span>

<h2 id="安装ollama"><a href="#安装ollama" class="headerlink" title="安装ollama"></a>安装ollama</h2><p>ollama官网：<a href="https://ollama.com/download">https://ollama.com/download</a></p>
<p>ollama Github：<a href="https://github.com/ollama/ollama">https://github.com/ollama/ollama</a></p>
<p>在官网可直接下载macOs、Linux、Windows三大系统已编译好的安装包</p>
<h2 id="拉取并运行模型"><a href="#拉取并运行模型" class="headerlink" title="拉取并运行模型"></a>拉取并运行模型</h2><p>由于ollama设计了与Docker容器集成的方式所以用户可直接像docker一样从官网云端拉取模型并启动。</p>
<p>查看官网已有模型：<a href="https://ollama.com/library">https://ollama.com/library</a></p>
<p>下载并启动（以llama2为例）：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ollama run llama2</code></pre>

<p>使用run运行模型时，如果模型未下载则会先下载后自动运行，如果已下载则会直接运行本地已下载好的。这点和docker类似</p>
<h2 id="使用api调用ollama"><a href="#使用api调用ollama" class="headerlink" title="使用api调用ollama"></a>使用api调用ollama</h2><p>使用<code>ollama run</code>命令启动模型后就可以直接在命令行进行对话了，如果觉得命令行对话不方便也可以直接使用api的方式进行调用。</p>
<p>请求路径：<a href="http://127.0.0.1:11434/api/generate">http://127.0.0.1:11434/api/generate</a></p>
<p>请求体：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"model"</span><span class="token operator">:</span><span class="token string">"llama2"</span><span class="token punctuation">,</span>
    <span class="token property">"prompt"</span><span class="token operator">:</span><span class="token string">"hello"</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>ollama</tag>
      </tags>
  </entry>
  <entry>
    <title>佳能MG3080连接WIFi共享打印</title>
    <url>/2024/03/30/%E4%BD%B3%E8%83%BDMG3080%E8%BF%9E%E6%8E%A5WIFi%E5%85%B1%E4%BA%AB%E6%89%93%E5%8D%B0/</url>
    <content><![CDATA[<p>佳能MG3080喷墨打印机在家里通过无线路由器连接Wi-Fi就可以,从而连接本地局域网内的电脑或智能设备实现无线打印</p>
<span id="more"></span>

<h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>佳能打印app下载：<a href="https://www.canon.com.cn/supports/app/#/id=inkjet&Canon_PRINT">https://www.canon.com.cn/supports/app/#/id=inkjet&amp;Canon_PRINT</a></p>
<p>选择下载：Canon PRINT</p>
<h2 id="2、重置打印机网络"><a href="#2、重置打印机网络" class="headerlink" title="2、重置打印机网络"></a>2、重置打印机网络</h2><p>打印机开机就绪状态下，按住“WiFi”键2秒以上，电源灯闪烁时松开</p>
<p>按一下彩色按钮后网络指示灯会跳到直连</p>
<p>再次按一下彩色按钮，会从直连跳回网络</p>
<p>这时会出现一个没有密码的wifi，名称类似：Canon_ij_88871_MG3000series</p>
<h2 id="3、打印机连接WIFi"><a href="#3、打印机连接WIFi" class="headerlink" title="3、打印机连接WIFi"></a>3、打印机连接WIFi</h2><p>连接刚刚没有密码的打印机WIFi，手机打开佳能打印APP，提示是否连接网络选择是，输入wifi密码即可</p>
<p><strong>注意：wifi必须是2.4G且加密格式必须有WPA，否则打印机无法连接wifi。</strong></p>
<p>可能是打印机过于老旧无法支持路由器比较新的加密方式，可以选择路由器的”WPA&#x2F;WPA2”这一个选项作为打印机及其他智能设备的2.4Gwifi加密方式。</p>
]]></content>
      <tags>
        <tag>佳能</tag>
        <tag>打印机</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python无头浏览器</title>
    <url>/2021/05/12/%E4%BD%BF%E7%94%A8python%E6%97%A0%E5%A4%B4%E6%B5%8F%E8%A7%88%E5%99%A8/</url>
    <content><![CDATA[<p>这里我们使用谷歌的无头浏览器进行演示</p>
<p>首先我们要确保自己的电脑上安装了谷歌浏览器</p>
<p>然后需要知道谷歌浏览器的版本，因为要对应版本去下载对应的驱动，可视化谷歌浏览器可以通过谷歌浏览器的菜单&gt;帮助&gt;关于Google Chrome 里面找到版本信息</p>
<p>如果是centos最小化界面可以通过<code>google-chrome --version</code> 命令来查看自己系统中存在的谷歌浏览器版本号，liunx安装谷歌浏览器的命令这里就不提供，具体可以直接百度，直接下载对应的版本或者下载最新版本都可以</p>
<span id="more"></span>
<p>然后我们去下载驱动，由于谷歌的网站我们无法进行访问，所以可以通过淘宝的源进行下载，驱动和谷歌官网的驱动是同步的，没有版本缺失的情况</p>
<p>淘宝源地址：<a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a></p>
<p>我们要对应下载驱动，如果驱动不匹配是无法成功运代码的，这里以我的浏览器为例，我的谷歌浏览器是目前的最新版本90.0.4430.93，可以看到淘宝源有很多版本的驱动，要知道这些驱动可以对应哪些谷歌浏览器的版本我们可以随便点击一个和你的版本接近的驱动比如我可以点击里面的90.0.4430.24&#x2F; 并不是说版本号就要和我的谷歌浏览器版本一摸一样，只要相近就可以，我们点击后可以看到里面的内容，其中有一个文件叫notes.txt 这里可以查看这个驱动版本可以使用哪些浏览器，我们可以看到第一句就是说Supports Chrome version 90，意思就是支持谷歌浏览器90开头的版本，我的是90.0.4430.93就是90开头的所以可以直接使用这个驱动。</p>
<p>我们要根据我们对应的系统下载对应的驱动，比如我的系统是mac，也就是苹果系统，那么我就要下载这个名叫chromedriver_mac64.zip的驱动包，如果你的系统是Windows系统那么就要下载这个名字叫chromedriver_win32.zip的驱动包</p>
<p>下载好驱动包之后我们对其进行解压，然后就可以得到一个驱动文件，如果是Windows的驱动包解压出来的就是一个chromedriver.exe的文件</p>
<p>然后我们将驱动放在我们系统对应的文件夹中，不放也可以，不过要在python代码中指定驱动的绝对路径</p>
<p>如果是mac、liunx系统那么就要将驱动文件放在&#x2F;usr&#x2F;local&#x2F;bin目录下</p>
<p>如果你的系统是Windows那么就要放在Python安装目录下</p>
<p>放好驱动之后我们就可以编写我们的代码了，编写代码的过程中可能要下载一些python的包才可以使用，这里还是自己去百度找，一般来说如果使用专业的编写代码的工具的话会直接给你提示要下载哪些包直接点击下载即可</p>
<p>然后我们编写如下python代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span>
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options
<span class="token keyword">import</span> os
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains
<span class="token keyword">import</span> time

chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取浏览器对象</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span> <span class="token comment">#获取浏览器驱动</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">)</span> <span class="token comment">#让浏览器去访问百度页面</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#睡眠一秒</span>
driver<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">"picture/screen2.png"</span><span class="token punctuation">)</span> <span class="token comment">#截图放在项目的picture文件夹下</span>
driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#退出浏览器</span></code></pre>

<p>通过以上代码如果包是正确导入的情况下就会自动打开浏览器然后去打开百度，等待一秒截图然后就自动关闭浏览器</p>
<p>那么就有人问了，难不成我要看着他运行完成吗，答案肯定不是的，因为我们使用无头浏览器就是想让他无界面的去帮我们访问一些页面，所以我们加上一些参数就可以了</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># coding=utf-8</span>
<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options
<span class="token keyword">import</span> os
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains
<span class="token keyword">import</span> time

chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#获取浏览器对象</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span> <span class="token comment">#设置成无界面模式</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--disable-gpu'</span><span class="token punctuation">)</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'--no-sandbox'</span><span class="token punctuation">)</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--window-size=1920,1080"</span><span class="token punctuation">)</span> <span class="token comment">#设置窗口大小为1920*1080</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span> <span class="token comment">#获取浏览器驱动</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://baidu.com"</span><span class="token punctuation">)</span> <span class="token comment">#让浏览器去访问百度页面</span>
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#睡眠一秒</span>
driver<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">"picture/screen2.png"</span><span class="token punctuation">)</span> <span class="token comment">#截图放在项目的picture文件夹下</span>
driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#退出浏览器</span></code></pre>

<p>这里就可以看到浏览器并没有显示界面但是运行完成了然后在picture文件夹下多了一张截图的文件</p>
<p>以上就是无头浏览器的教程，比如自动去点击某个输入框，输入某个字符串，然后刷新浏览器等等 这些方法都可以直接百度搜索selenium自动操作浏览器就可以看到很多教程</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用python自动签到扣丁学堂</title>
    <url>/2021/03/18/%E4%BD%BF%E7%94%A8python%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0%E6%89%A3%E4%B8%81%E5%AD%A6%E5%A0%82/</url>
    <content><![CDATA[<p>首先我们使用python写一个脚本对扣丁学堂进行签到请求，要进行请求肯定要知道请求的是post还是GET。</p>
<p>好的那么我们打开浏览器，进入扣丁学堂个人主页，这里有一个签到按钮，每天点击签到即可获得一个丁豆，可以用来买课，我们先不要点击签到，因为点击了签到后就不可以再次点击了，签到过后就会显示已签到，就无法完成抓包请求了。那么我们先打开浏览器的开发者模式，也就是浏览器的F12健，切换到network模式，然后再点击签到按钮，这时候再看network里面就有一个网址</p>
<span id="more"></span>
<p><img src="/img/network.png" alt="network" loading="lazy"></p>
<p>然后我们点进去，在进headers里面，可以看到网页刚刚发送的请求头信息，可以看到刚刚发送的请求是GET请求，请求网址是：<a href="http://www.codingke.com/my/sign?r=0.025347213714072003%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%94%E4%B8%8D%E7%9C%8B%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8F%82%E6%95%B0r=0.025347213714072003%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%88%91%E4%BB%AC%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93%E8%BF%99%E6%98%AF%E5%95%A5%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E6%8A%8A%E5%AE%83%E5%88%A0%E9%99%A4%EF%BC%8C%E7%84%B6%E5%90%8E%E5%86%8D%E7%9C%8B%E4%B8%80%E4%B8%8B%E5%88%A0%E9%99%A4%E4%BA%86%E5%8F%82%E6%95%B0%E7%9A%84%E7%BD%91%E5%9D%80%EF%BC%9Ahttp://www.codingke.com/my/sign%EF%BC%8C%E5%9B%A0%E4%B8%BA%E6%98%AFGET%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%8A%8A%E8%BF%99%E4%B8%AA%E7%BD%91%E5%9D%80%E7%9B%B4%E6%8E%A5%E6%94%BE%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E5%8F%91%E9%80%81%E5%87%BA%E5%8E%BB%EF%BC%8C%E7%84%B6%E5%90%8E%E7%9C%8B%E7%9C%8B%E4%BC%9A%E5%87%BA%E7%8E%B0%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%E7%BB%93%E6%9E%9C">http://www.codingke.com/my/sign?r=0.025347213714072003，我们且不看后面的参数r=0.025347213714072003，因为我们也不知道这是啥，那么我们把它删除，然后再看一下删除了参数的网址：http://www.codingke.com/my/sign，因为是GET请求，所以我们可以把这个网址直接放在浏览器的地址栏回车发送出去，然后看看会出现什么样的结果</a></p>
<p><img src="/img/sign.png" alt="image-20210318192437075" loading="lazy"></p>
<p>发现返回了一个json，然后内容是今天已经签到过了，所以，我们就可以得出，</p>
<p><a href="http://www.codingke.com/my/sign%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E8%A6%81%E6%89%BE%E7%9A%84%E7%AD%BE%E5%88%B0%E5%9C%B0%E5%9D%80%EF%BC%8C%E9%82%A3%E4%B9%88%E6%84%8F%E6%80%9D%E5%B0%B1%E6%98%AF%E7%9B%B4%E6%8E%A5%E5%86%99%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%A0%81%E5%8F%91%E9%80%81GET%E8%AF%B7%E6%B1%82%E5%B0%B1%E5%AE%8C%E4%BA%86%E5%91%97%EF%BC%8C%E9%82%A3%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E6%80%8E%E6%A0%B7%E5%8F%91%E9%80%81%E5%91%A2%EF%BC%9F%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E6%9C%89%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%EF%BC%8C%E4%B8%80%E7%A7%8D%E6%98%AFcookie%EF%BC%8C%E4%B8%80%E7%A7%8D%E6%98%AF%E5%8F%91%E9%80%81%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95%E5%90%8E%E5%86%8D%E8%BF%9B%E8%A1%8C%E7%AD%BE%E5%88%B0%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%88%91%E4%BB%AC%E9%83%BD%E7%9F%A5%E9%81%93%E5%8F%AA%E8%A6%81%E5%B8%A6%E7%9D%80cookie%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%B7%B3%E8%BF%87%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E8%AF%B7%E6%B1%82%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E6%9D%A5%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AApython%E4%BB%A3%E7%A0%81%E6%9D%A5%E8%AF%95%E4%B8%80%E4%B8%8B%E3%80%82">http://www.codingke.com/my/sign就是我们要找的签到地址，那么意思就是直接写一个代码发送GET请求就完了呗，那我们应该怎样发送呢？这里可以有两种方法，一种是cookie，一种是发送账号密码登录后再进行签到请求，我们都知道只要带着cookie发送请求就可以跳过账号密码请求页面，那么我们可以来编写一个python代码来试一下。</a></p>
<p>很简单，因为只要发送简单的GET请求，所以我们只需要写一个GET请求的python代码，如下</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment"># 要请求的网址</span>
url <span class="token operator">=</span> <span class="token string">'http://www.codingke.com/my/sign'</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span>
                  <span class="token string">'Chrome/89.0.4389.90 Safari/537.36 '</span><span class="token punctuation">,</span>
    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'填你的cookie'</span>
<span class="token punctuation">&#125;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>

<p>cookie可以到扣丁学堂首页按F12抓到GET请求查看请求头即可，执行代码后返回到结果如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span><span class="token string">"success"</span><span class="token builtin class-name">:</span><span class="token string">"今天已经签到过了"</span>,<span class="token string">"code"</span>:2<span class="token punctuation">&#125;</span>
进程已结束，退出代码为 <span class="token number">0</span>
</code></pre>

<p>可以看到，我们成功的进行了请求，并且返回了正确的数据，但是这个方法等到第二天我再去看的时候显示请求失败了，这是为什么呢，我们再回浏览器登录扣丁学堂，发现扣丁学堂的登录状态已经退出了，使用cookie登录的确是一个不长久的办法，但是没想到扣丁学堂的cokkie只能保持很短的一段时间。那么我们只能用第二种方法了，那就是使用账号密码进行登录，幸运的是扣丁学堂的登录方式并没有设置验证码，也为我们写脚本省了不少时间。</p>
<p>那么我们对扣丁学堂的登录界面进行发送请求，那么首先我们要知道扣丁学堂的登录网址，那么我们在扣丁学堂的首页把鼠标放到我们的头像上，点击安全退出。</p>
<p><img src="/img/loginOut.png" alt="loginOut" loading="lazy"></p>
<p>然后我们就可以发现我们成功的来到了扣丁学堂的登录页面</p>
<p><img src="/img/loginkouding.png" alt="loginkouding" loading="lazy"></p>
<p>然后浏览器的地址栏有一个地址：<a href="http://www.codingke.com/login%EF%BC%8C%E8%BF%99%E5%B0%B1%E6%98%AF%E6%88%91%E4%BB%AC%E8%A6%81%E6%89%BE%E7%9A%84%E6%89%A3%E4%B8%81%E5%AD%A6%E5%A0%82%E7%99%BB%E5%BD%95%E5%9C%B0%E5%9D%80%E4%BA%86%EF%BC%8C%E9%82%A3%E4%B9%88%E6%88%91%E4%BB%AC%E8%A6%81%E5%AF%B9%E6%89%A3%E4%B8%81%E5%AD%A6%E5%A0%82%E5%8F%91%E9%80%81%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E7%94%A8Fiddler%E6%9D%A5%E6%9F%A5%E7%9C%8B%E6%89%A3%E4%B8%81%E5%8F%91%E9%80%81%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%94%A8%E8%B0%B7%E6%AD%8C%E7%9A%84F12%E5%91%A2%EF%BC%8C%E4%B9%9F%E6%98%AF%E5%8F%AF%E4%BB%A5%E7%9A%84%EF%BC%8C%E4%BD%86%E6%98%AF%E6%88%91%E4%BB%AC%E6%8C%89F12%E6%9F%A5%E7%9C%8B%E6%89%A3%E4%B8%81%E5%AD%A6%E5%A0%82%E7%9A%84network%E8%AF%B7%E6%B1%82%E5%90%8E%E5%8F%91%E7%8E%B0%E4%BB%96%E6%9C%89%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%EF%BC%8C%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E4%BA%86%E8%B7%B3%E8%BD%AC%E5%90%8Enetwork%E9%A1%B5%E9%9D%A2%E5%B0%B1%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%88%B7%E6%96%B0%EF%BC%8C%E8%80%8C%E4%B8%94%E5%BE%88%E5%BF%AB%EF%BC%8C%E4%BD%A0%E8%A6%81%E7%82%B9%E5%87%BB%E5%81%9C%E6%AD%A2%E7%9A%84%E8%AF%9D%E5%BE%88%E9%9A%BE%E6%9D%A5%E5%BE%97%E5%8F%8A%EF%BC%8C%E6%89%80%E4%BB%A5%E6%88%91%E4%BB%AC%E5%B0%B1%E4%BD%BF%E7%94%A8%E8%BF%99%E6%AC%BEFiddler%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%9D%A5%E6%9F%A5%E7%9C%8B%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%BF%99%E6%A0%B7%E5%B0%B1%E4%B8%8D%E4%BC%9A%E6%BC%8F%E6%8E%89%E6%88%91%E4%BB%AC%E6%83%B3%E8%A6%81%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BA%86%E3%80%82%E6%88%91%E4%BB%AC%E5%85%88%E6%89%93%E5%BC%80Fiddler%E8%BD%AF%E4%BB%B6%EF%BC%8C%E7%84%B6%E5%90%8E%E6%88%91%E4%BB%AC%E7%82%B9%E5%87%BB%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%8E%BB%E6%B5%8F%E8%A7%88%E5%99%A8%E9%87%8C%E8%BE%93%E5%85%A5%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E4%BA%86%EF%BC%8C%E8%BE%93%E5%85%A5%E5%AE%8C%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E4%B9%8B%E5%90%8E%E6%88%91%E4%BB%AC%E5%8F%91%E7%8E%B0%E6%9C%89%E4%B8%80%E4%B8%AA%E7%99%BB%E5%BD%95%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%E6%98%AFhttp://www.codingke.com/login_check%E7%9A%84%E5%8F%91%E9%80%81%E4%BA%86%E6%88%91%E4%BB%AC%E8%B4%A6%E5%8F%B7%E5%92%8C%E5%AF%86%E7%A0%81%E7%9A%84%E5%AD%97%E6%AE%B5">http://www.codingke.com/login，这就是我们要找的扣丁学堂登录地址了，那么我们要对扣丁学堂发送登录请求，我们可以用Fiddler来查看扣丁发送的请求，为什么不用谷歌的F12呢，也是可以的，但是我们按F12查看扣丁学堂的network请求后发现他有一个请求转发，页面进行了跳转后network页面就会自动刷新，而且很快，你要点击停止的话很难来得及，所以我们就使用这款Fiddler抓包工具来查看请求，这样就不会漏掉我们想要的数据了。我们先打开Fiddler软件，然后我们点击开始，就可以去浏览器里输入账号密码了，输入完账号密码之后我们发现有一个登录请求地址是http://www.codingke.com/login_check的发送了我们账号和密码的字段</a></p>
<p><img src="/img/fillder.png" alt="fillder" loading="lazy"></p>
<p>在Fiddler中我们可以清楚的看到发送的字段名是_username和_passsword还有一个不知道是什么的一串字符串，我们暂且忽略掉最后一个，前两个我们可以一眼看出就是我们的账号和密码，就算看不出来看后面的值也可以知道就是我们刚刚手动输入的账号密码，不信你再试一遍看看。那么我们就知道要发送这两个字段去给服务器，那么我们编写代码如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

<span class="token comment"># 要请求的网址</span>
url <span class="token operator">=</span> <span class="token string">'http://www.codingke.com/login_check'</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span>
                  <span class="token string">'Chrome/89.0.4389.90 Safari/537.36 '</span><span class="token punctuation">,</span>
    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'UM_distinctid=178450d263e148-0bac1bb3c67232-5771031-162ee1-178450d2641c1; '</span>
              <span class="token string">'CNZZDATA1256018185=436213958-1616065336-null%7C1616065336; '</span>
              <span class="token string">'Hm_lvt_7d5fe787f1dd300413ad4b53656dc0b1=1616066193; 53gid2=10074621437020; 53gid0=10074621437020; '</span>
              <span class="token string">'53gid1=10074621437020; 53revisit=1616066205585; 53kf_72165667_from_host=www.codingke.com; '</span>
              <span class="token string">'53kf_72165667_keyword=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DF-cUml-NIKj2oF5LBx2zwBm'</span>
              <span class="token string">'-hL1jGE_tuUOhOpqqeQws6TYAghf7oR-wJIDAaZc3%26wd%3D%26eqid%3Dd2f2fed900005682000000066053368a; '</span>
              <span class="token string">'53kf_72165667_land_page=http%253A%252F%252Fwww.codingke.com%252F; kf_72165667_land_page_ok=1; '</span>
              <span class="token string">'53uvid=1; onliner_zdfq72165667=0; Invite_code=375108; visitor_type=old; '</span>
              <span class="token string">'PHPSESSID=n6tj5epaajuicg1912p5dd7572; tgw_l7_route=1da6220a8c6aee8fae7fcb8ec6e1299a; '</span>
              <span class="token string">'Hm_lpvt_7d5fe787f1dd300413ad4b53656dc0b1=1616070611 '</span><span class="token punctuation">,</span>
    <span class="token string">'_username'</span><span class="token punctuation">:</span> <span class="token string">'你的账号'</span><span class="token punctuation">,</span>
    <span class="token string">'_password'</span><span class="token punctuation">:</span> <span class="token string">'你的密码'</span>
<span class="token punctuation">&#125;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
</code></pre>

<p>但是运行过后我们通过输出结果可以看到，并没有登录，还是停在登录的界面，所以我们用Fiddler尝试一下，是不是我们缺少了其他的字段值就请求不成功呢。</p>
<p>于是我们对每一次的请求都进行修改，先把最后一个不知道是什么的字符串删除，结果请求成功，我们再把其他的请求头中的字段一一删除，但是每次不管是删除哪一个都返回一个错误，也就是说我们必须保证字段的完整性再发送请求即可，那么我们怎么才能获取到这么多的字段值呢？获取到了又该怎么保存，重新发送请求的话之前的请求获取的字段就会失效。那么这时候就要请出我们的Session了，Session可以保持我们在同一个窗口下进行请求，也就是说你所有的请求都是基于同一页面的，所以数据一般不会发生改变，那么我们就可以进行操作了</p>
<p>经过不断的尝试我们可以发现，字段中那个不知道是干嘛的字符串在login界面也有存在，我们按F12来查看一下</p>
<p><img src="/img/loginmeta.png" alt="loginmeta" loading="lazy"></p>
<p>而且不止这一处，再往下找找发现还有一处隐藏起来的input标签里也有相同的字段</p>
<p><img src="/img/inputkouding.png" alt="inputkouding" loading="lazy"></p>
<p>那么我们只要可以获取其中一处的值就可以了，然后其他的字段值因为都是固定的所以我们可以写成常量，那么我们就可以编写如下python代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf8 -*-</span>
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span>
                <span class="token string">'Chrome/89.0.4389.82 '</span>
                <span class="token string">'Safari/537.36 '</span>
<span class="token punctuation">&#125;</span>
res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.codingke.com/login'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'name="_csrf_token" value="(.*)"'</span><span class="token punctuation">)</span>
token <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'_username'</span><span class="token punctuation">:</span> <span class="token string">'你的账号（手机号）'</span><span class="token punctuation">,</span>
    <span class="token string">'_password'</span><span class="token punctuation">:</span> <span class="token string">'你的密码'</span><span class="token punctuation">,</span>
    <span class="token string">'_csrf_token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.codingke.com'</span><span class="token punctuation">,</span>
    <span class="token string">'Proxy-Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
    <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'95'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'*/*'</span><span class="token punctuation">,</span>
    <span class="token string">'X-CSRF-Token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
    <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>
    <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.codingke.com'</span><span class="token punctuation">,</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.codingke.com/login'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span>
<span class="token punctuation">&#125;</span>
resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://www.codingke.com/login_check"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.codingke.com/my/sign"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        rJson <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> rJson<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'签到成功'</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> rJson<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经签到过了'</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'账号或密码错误'</span><span class="token punctuation">)</span></code></pre>

<p>这里使用了正则表达式去匹配input当中的字符串值，然后发送post登录请求，再使用session在同一窗口下去请求签到页面，因为签到页面返回一个json，所以我们直接接收json类型的数据再进行判断，如果异常也就是没有返回json就是登录失败了</p>
<p>最后再提供一个云函数的版本，一天白嫖一个豆，一百天就可以免费买一套课程啦</p>
<p>腾讯云函数版本：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf8 -*-</span>
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re


<span class="token keyword">def</span> <span class="token function">main_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>
    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '</span>
                      <span class="token string">'Chrome/89.0.4389.82 '</span>
                      <span class="token string">'Safari/537.36 '</span>
    <span class="token punctuation">&#125;</span>
    res <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.codingke.com/login'</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'name="_csrf_token" value="(.*)"'</span><span class="token punctuation">)</span>
    token <span class="token operator">=</span> pattern<span class="token punctuation">.</span>search<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'_username'</span><span class="token punctuation">:</span> <span class="token string">'你的手机号'</span><span class="token punctuation">,</span>
        <span class="token string">'_password'</span><span class="token punctuation">:</span> <span class="token string">'你的密码'</span><span class="token punctuation">,</span>
        <span class="token string">'_csrf_token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
        <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'www.codingke.com'</span><span class="token punctuation">,</span>
        <span class="token string">'Proxy-Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Length'</span><span class="token punctuation">:</span> <span class="token string">'95'</span><span class="token punctuation">,</span>
        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'*/*'</span><span class="token punctuation">,</span>
        <span class="token string">'X-CSRF-Token'</span><span class="token punctuation">:</span> token<span class="token punctuation">,</span>
        <span class="token string">'X-Requested-With'</span><span class="token punctuation">:</span> <span class="token string">'XMLHttpRequest'</span><span class="token punctuation">,</span>
        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded; charset=UTF-8'</span><span class="token punctuation">,</span>
        <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'http://www.codingke.com'</span><span class="token punctuation">,</span>
        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.codingke.com/login'</span><span class="token punctuation">,</span>
        <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate'</span><span class="token punctuation">,</span>
        <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.9'</span>
    <span class="token punctuation">&#125;</span>
    resp <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://www.codingke.com/login_check"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.codingke.com/my/sign"</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        rJson <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> rJson<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'签到成功'</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> rJson<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经签到过了'</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'账号或密码错误'</span><span class="token punctuation">)</span>
</code></pre>



]]></content>
      <tags>
        <tag>python</tag>
        <tag>云函数</tag>
        <tag>自动签到</tag>
      </tags>
  </entry>
  <entry>
    <title>使用支付宝充值chatgpt-plus</title>
    <url>/2024/03/21/%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E5%85%85%E5%80%BCchatgpt-plus/</url>
    <content><![CDATA[<p>前些时间OpenAI官方推出了移动端ChatGPT,这方便了用户使用更简便的方式充值ChatGPT Plus。今天就介绍一种不用虚拟信用卡,只用支付宝便可以完成充值的方法。</p>
<span id="more"></span>

<h2 id="1、准备条件"><a href="#1、准备条件" class="headerlink" title="1、准备条件"></a>1、准备条件</h2><p>1、手机科学上网</p>
<p>2、美区AppStore账号（必须要自己的账号，因为需要往账号里充钱然后充值chatgpt）</p>
<h2 id="二、充值"><a href="#二、充值" class="headerlink" title="二、充值"></a>二、充值</h2><h3 id="1、将支付宝定位切换到纽约"><a href="#1、将支付宝定位切换到纽约" class="headerlink" title="1、将支付宝定位切换到纽约"></a>1、将支付宝定位切换到纽约</h3><p><img src="/../../../../myImg/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%9B%BD%E9%99%85%E5%AE%9A%E4%BD%8D.jpg" loading="lazy"></p>
<p><img src="/../../../../myImg/%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%9A%E4%BD%8D%E7%BA%BD%E7%BA%A6.jpg" loading="lazy"></p>
<h3 id="2、在支付宝首页“当前汇率”下方滚动轮播图中找到：“大牌礼品卡低至9折”"><a href="#2、在支付宝首页“当前汇率”下方滚动轮播图中找到：“大牌礼品卡低至9折”" class="headerlink" title="2、在支付宝首页“当前汇率”下方滚动轮播图中找到：“大牌礼品卡低至9折”"></a>2、在支付宝首页“当前汇率”下方滚动轮播图中找到：“大牌礼品卡低至9折”</h3><p><img src="/../../../../myImg/%E5%A4%A7%E7%89%8C%E7%A4%BC%E5%8D%A1%E4%BD%8E%E8%87%B39%E6%8A%98.jpg" loading="lazy"></p>
<h3 id="3、在“大牌礼卡折上折”标题下点击“App-Store-amp-iTunes-Us“的去购买"><a href="#3、在“大牌礼卡折上折”标题下点击“App-Store-amp-iTunes-Us“的去购买" class="headerlink" title="3、在“大牌礼卡折上折”标题下点击“App Store &amp; iTunes Us“的去购买"></a>3、在“大牌礼卡折上折”标题下点击“App Store &amp; iTunes Us“的去购买</h3><p><img src="/../../../../myImg/%E5%A4%A7%E7%89%8C%E7%A4%BC%E5%8D%A1%E6%8A%98%E4%B8%8A%E6%8A%98.jpg" loading="lazy"></p>
<h3 id="4、根据自己需要输入要购买的礼品券面额-此处为美元"><a href="#4、根据自己需要输入要购买的礼品券面额-此处为美元" class="headerlink" title="4、根据自己需要输入要购买的礼品券面额(此处为美元)"></a>4、根据自己需要输入要购买的礼品券面额(此处为美元)</h3><p><img src="/../../../../myImg/appStore%E7%A4%BC%E5%93%81%E5%8D%A1.jpg" loading="lazy"></p>
<h3 id="5、打开appstore兑换充值卡"><a href="#5、打开appstore兑换充值卡" class="headerlink" title="5、打开appstore兑换充值卡"></a>5、打开appstore兑换充值卡</h3><p><img src="/../../../../myImg/appstore%E5%85%91%E6%8D%A2%E5%85%85%E5%80%BC%E5%8D%A1.jpg" loading="lazy"></p>
<p><img src="/../../../../myImg/%E5%85%91%E6%8D%A2%E5%85%85%E5%80%BC%E5%8D%A1%E6%88%96%E4%BB%A3%E7%A0%81.jpg" loading="lazy"></p>
<h3 id="6、打开Chatgpt点击升级chatgpt-plus-选择使用AppStore账户支付"><a href="#6、打开Chatgpt点击升级chatgpt-plus-选择使用AppStore账户支付" class="headerlink" title="6、打开Chatgpt点击升级chatgpt plus 选择使用AppStore账户支付"></a>6、打开Chatgpt点击升级chatgpt plus 选择使用AppStore账户支付</h3><p><img src="/../../../../myImg/%E5%85%85%E5%80%BCchatgpt.jpg" loading="lazy"></p>
]]></content>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云仓库导入报错找不到maven-compiler-plugin</title>
    <url>/2023/12/11/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%93%E5%BA%93%E5%AF%BC%E5%85%A5%E6%8A%A5%E9%94%99%E6%89%BE%E4%B8%8D%E5%88%B0maven-compiler-plugin/</url>
    <content><![CDATA[<p>发现每次只要pom中需要使用到spring-boot-maven-plugin这个插件就会有几率报错Could not find <a href="https://so.csdn.net/so/search?q=artifact&spm=1001.2101.3001.7020">artifact</a> org.apache.maven.plugins，原因是没有允许使用SSl证书拉取</p>
<span id="more"></span>

<h2 id="1、设置导入允许使用SSL"><a href="#1、设置导入允许使用SSL" class="headerlink" title="1、设置导入允许使用SSL"></a>1、设置导入允许使用SSL</h2><p>打开设置 - &gt; 构建、执行、部署(Build,Execution,Deployment) - &gt; 构建工具(Build Tools) - &gt; Maven - &gt; 导入（Importing）</p>
<p>在导入的VM选项(VM options for importer)中输入：-Dmaven.wagon.http.ssl.insecure&#x3D;true</p>
<h2 id="2、设置正在运行时允许使用SSL"><a href="#2、设置正在运行时允许使用SSL" class="headerlink" title="2、设置正在运行时允许使用SSL"></a>2、设置正在运行时允许使用SSL</h2><p>打开设置 - &gt; 构建、执行、部署(Build,Execution,Deployment) - &gt; 构建工具(Build Tools) - &gt; Maven</p>
<p>-&gt; 运行的程序(Runner)</p>
<p>在VM选项(VM options)中输入：-Dmaven.wagon.http.ssl.allowall&#x3D;true</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>免密登录ssh</title>
    <url>/2023/04/04/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95ssh/</url>
    <content><![CDATA[<p>前言：SSH是目前比较可靠的专为远程登录会话和其他网络服务提供安全的协议。不同主机之间在进行通信时，一般都是需要输入密码进行验证， ssh免密码之后，只要通过指定主机地址和端口号就可以实现不同的计算机之间访问时，不需要密码实现直接访问。</p>
<span id="more"></span>

<h2 id="1、生成ssh私钥和公钥"><a href="#1、生成ssh私钥和公钥" class="headerlink" title="1、生成ssh私钥和公钥"></a>1、生成ssh私钥和公钥</h2><p>一般情况下你的电脑因为要使用git所以应该提前配置好了ssh的公钥和私钥，如果还没有配置好，可以使用以下命令进行生成，然后一直回车即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">'你的邮箱'</span></code></pre>

<h2 id="2、上传公钥"><a href="#2、上传公钥" class="headerlink" title="2、上传公钥"></a>2、上传公钥</h2><p>如果你懂git那么应该知道ssh上传代码是将我们的公钥配置到github中并使用本地的私钥与github的公钥进行配对，那么免密登录也是一样的道理，我们需要使用如下命令将我们的公钥上传至目标服务器中</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ssh-copy-id 目标服务器ip</code></pre>

<p>这里要注意的是，这条命令是liunx系统或者mac系统可以使用，windows是没有这个命令的。而ssh-copy-id命令原理则是在目标服务器的.ssh目录下生成一个名为authorized_keys的文件，这里面的内容即是你本地刚刚上传的公钥，当然authorized_keys文件中可以配置多个公钥让多个主机免密登录服务器，只需要继续使用ssh-copy-id命令上传新的公钥即可，或者手动在里面添加公钥，每一行即为一个公钥。</p>
<h3 id="2-1windows上传公钥"><a href="#2-1windows上传公钥" class="headerlink" title="2.1windows上传公钥"></a>2.1windows上传公钥</h3><p>由于windows无法使用ssh-copy-id命令，所以我们需要先登录目标服务器，并且在.ssh目录下创建一个名为authorized_keys的文件，并且在文件内容中添加你的公钥即可。</p>
<h2 id="3、免密登录赋权"><a href="#3、免密登录赋权" class="headerlink" title="3、免密登录赋权"></a>3、免密登录赋权</h2><p>需要注意的是，不管你是通过ssh-copy-id上传的公钥还是你手动新增authorized_keys文件后添加的公钥，都需要保证.ssh目录权限为700，authorized_keys文件权限为600,否则会因为权限的问题无法免密登录。授权语句如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">700</span> .ssh</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> .ssh/authorized_keys</code></pre>

<h2 id="4、指定私钥免密登录"><a href="#4、指定私钥免密登录" class="headerlink" title="4、指定私钥免密登录"></a>4、指定私钥免密登录</h2><p>如果你手上有一份不是你本机的私钥并且服务器上有这个私钥对应的公钥那么你也可以指定</p>
<p>私钥文件进行免密登录</p>
<p>同样需要注意的是你使用的这个私钥的权限必须是600，外面那层目录的权限必须是700</p>
<p>例如我现在有一个文件夹ssh且文件夹中有id_rsa私钥文件则我可以进行如下操作：</p>
<h3 id="4-1私钥目录赋权"><a href="#4-1私钥目录赋权" class="headerlink" title="4.1私钥目录赋权"></a>4.1私钥目录赋权</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">700</span> <span class="token function">ssh</span></code></pre>

<h3 id="4-2私钥赋权"><a href="#4-2私钥赋权" class="headerlink" title="4.2私钥赋权"></a>4.2私钥赋权</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">600</span> ssh/id_rsa</code></pre>

<h3 id="4-3指定私钥文件免密登录"><a href="#4-3指定私钥文件免密登录" class="headerlink" title="4.3指定私钥文件免密登录"></a>4.3指定私钥文件免密登录</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> ./ssh/id_rsa root@192.168.123.27</code></pre>

<h2 id="5、免密上传文件"><a href="#5、免密上传文件" class="headerlink" title="5、免密上传文件"></a>5、免密上传文件</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-i</span> ./ssh/id_rsa ./1.txt root@192.168.123.27:/home/test</code></pre>



<h2 id="6、免密远程执行命令"><a href="#6、免密远程执行命令" class="headerlink" title="6、免密远程执行命令"></a>6、免密远程执行命令</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-i</span> ./ssh/id_rsa root@192.168.123.27 <span class="token string">"source /etc/profile"</span></code></pre>

<p>需要注意的是免密执行的命令如果是一个脚本比如”sh &#x2F;root&#x2F;1.sh”，则脚本内容中必须使用绝对路径。例如1.sh脚本中的内容是 <code>nohup java -jar coreinterface.jar</code> 这时候脚本可能会执行失败，如果你失败了可以改成绝对路径试试。如：<code>nohup /usr/local/jdk1.8/bin/java -jar /root/coreinterface.jar</code></p>
]]></content>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>在Docker中使用Nginx部署Vue项目</title>
    <url>/2024/05/06/%E5%9C%A8Docker%E4%B8%AD%E4%BD%BF%E7%94%A8Nginx%E9%83%A8%E7%BD%B2Vue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>Vue.js是一种流行的JavaScript框架，用于构建用户界面。它具有易学易用的特点，并且在开发过程中提供了许多便利。而Docker是一种容器化平台，可以将应用程序及其依赖项打包到一个独立的可运行单元中。在本篇文章中，我们将介绍如何使用Docker来运行Vue项目，并展示如何配置Nginx作为Vue项目的反向代理服务器.</p>
<span id="more"></span>

<h2 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h2><p>├── conf.d<br>│   └── default.conf<br>├── dist<br>└── docker-compose.yml</p>
<h2 id="2、准备所需文件"><a href="#2、准备所需文件" class="headerlink" title="2、准备所需文件"></a>2、准备所需文件</h2><h3 id="default-conf"><a href="#default-conf" class="headerlink" title="default.conf"></a>default.conf</h3><p>这里需要注意，我们引入的是nginx容器中的 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;default.conf这个文件，这个文件被&#x2F;etc&#x2F;nginx&#x2F;nginx.conf的http所包含  所以不需要写http那一块内容</p>
<pre class="language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   /dist</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token directive"><span class="token keyword">location</span> /dev-api/</span><span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> REMOTE-HOST <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://192.168.6.113:9080/</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># 避免actuator暴露</span>
        <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_uri</span> ~ <span class="token string">"/actuator"</span>)</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span></code></pre>

<h3 id="dist"><a href="#dist" class="headerlink" title="dist"></a>dist</h3><p>即使用 <code>npm run build:prod</code> 命令进行打包后的文件夹 内包含index.html及其他静态文件</p>
<h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.1'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">nginx</span><span class="token punctuation">:</span>           <span class="token comment"># 服务的名称</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always   <span class="token comment"># 代表只要docker启动，那么这个容器就跟着一起启动</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx  <span class="token comment"># 指定镜像  本地没有则会自动从docker云镜像拉取</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nginx  <span class="token comment"># 指定容器名称：--name</span>
    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> host
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">TZ</span><span class="token punctuation">:</span> Asia/Shanghai        <span class="token comment"># 指定时区</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d   <span class="token comment"># 映射数据卷</span>
      <span class="token punctuation">-</span> ./dist<span class="token punctuation">:</span>/dist</code></pre>

]]></content>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>在windows启动nginx配置conf文件不生效</title>
    <url>/2024/05/05/%E5%9C%A8windows%E5%90%AF%E5%8A%A8nginx%E9%85%8D%E7%BD%AEconf%E6%96%87%E4%BB%B6%E4%B8%8D%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<p>今天在下载好nginx准备部署前端vue3项目时，发现修改完nginx.conf配置文件重启nginx后在浏览器中输入<a href="http://127.0.0.1/">http://127.0.0.1</a> 还是进入了默认的nginx欢迎界面，而不是通过npm build打包好的项目首页。</p>
<span id="more"></span>

<h2 id="nginx官网下载地址"><a href="#nginx官网下载地址" class="headerlink" title="nginx官网下载地址"></a>nginx官网下载地址</h2><p><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p>
<p>我下载的版本：	nginx&#x2F;Windows-1.25.5</p>
<h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><pre class="language-nginx" data-language="nginx"><code class="language-nginx">
<span class="token comment">#user  nobody;</span>
<span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span>

<span class="token comment">#error_log  logs/error.log;</span>
<span class="token comment">#error_log  logs/error.log  notice;</span>
<span class="token comment">#error_log  logs/error.log  info;</span>

<span class="token comment">#pid        logs/nginx.pid;</span>


<span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">&#123;</span>
    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>

    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">&#123;</span>
        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">server_name</span>  localhost</span><span class="token punctuation">;</span>

        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   C:/Users/Administrator/Documents/ruoyi-cloud-study/ruoyi-ui/dist</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token directive"><span class="token keyword">location</span> /dev-api/</span><span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> REMOTE-HOST <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>
            <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:9080/</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment"># 避免actuator暴露</span>
        <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$request_uri</span> ~ <span class="token string">"/actuator"</span>)</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">return</span> <span class="token number">403</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>
        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">&#123;</span>
            <span class="token directive"><span class="token keyword">root</span>   html</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><p><code>start nginx</code> 启动nginx<br><code>nginx -s reload</code> 重新加载Nginx配置文件，以优雅的方式重启Nginx。<br><code>nginx -s stop</code> 强制停止Nginx服务。<br><code>nginx -s quit</code> 优雅地停止Nginx服务，即在处理完所有请求后再停止服务。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>下载好后我直接点击了一次nginx.exe启动了nginx,然后我修改了nginx.conf文件，使用了</p>
<p><code>nginx -s stop</code> 停止了nginx后 再使用了 <code>start nginx</code> 启动nginx，但是发现不管怎么启动页面一直都是html&#x2F;index.html这个nginx的欢迎页面。</p>
<p>最后打开任务管理器发现有四个nginx进程正在运行。可能是没有完全退出nginx导致没有正常加载项目</p>
<h2 id="windows强制杀死进程"><a href="#windows强制杀死进程" class="headerlink" title="windows强制杀死进程"></a>windows强制杀死进程</h2><pre class="language-bash" data-language="bash"><code class="language-bash">taskkill /IM nginx.exe /F</code></pre>

<p>强制杀死所有nginx进程</p>
<p>最后重新启动nginx即可正常访问</p>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在centos7安装vnc</title>
    <url>/2021/03/18/%E5%A6%82%E4%BD%95%E5%9C%A8centos7%E5%AE%89%E8%A3%85vnc/</url>
    <content><![CDATA[<ol>
<li><p>安装vnc</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> tigervnc-server <span class="token parameter variable">-y</span></code></pre>


</li>
<li><p>验证vnc是否安装成功</p>
<span id="more"></span></li>
</ol>
<p>安装后可以使用如下命令来验证是否安装成功：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> tigervnc-server</code></pre>

<p>第三步：复制vnc的启动操作脚本, vncserver@:1.service中的：1表示”桌面号”，启动的端口号就是5900+桌面号，即是5901，如果再有一个就是2啦，端口号加1就是5902，以此类推：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /lib/systemd/system/vncserver@.service </code></pre>

<p>第四步：编辑 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;vncserver@:1.service</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/systemd/system/vncserver@:1.service</code></pre>

<p>找到其中的&lt; USER&gt;，修改成自己的用户名，如果是root用户登录桌面就使用root用户，如果使用普通用户登录桌面使用普通用户</p>
<p>第四步：设置vnc密码,切换到刚配置文件设置的用户，执行，输入两次密码，输入完成后会提示是否设置view-only password（“View-only password”密码，只允许查看,无控制权限。）这个可设可不设：</p>
<p>第五步：启动服务：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl start vncserver@:1.service</code></pre>

<p>第一次输入启动服务命令可能会要求输入（从新加载配置文件，新增和配置文件发生变化时都需要执行 daemon-reload 子命令）：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl daemon-reload</code></pre>

<p>可以加入开机启动，下次开机就会自动启动啦：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> vncserver@:1.service</code></pre>

<p>第六步：查看端口是否监听：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -lnpt<span class="token operator">|</span><span class="token function">grep</span> Xvnc</code></pre>

<p>直接停止防火墙：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service</code></pre>

<p>停止之后该需要禁止开机启动：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">systemctl disable firewalld.service</code></pre>

<p>第八步：关闭SELinux，编辑&#x2F;etc&#x2F;selinux&#x2F;config 文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/selinux/config</code></pre>

<p>将selinux设置为disabled就大功告成啦</p>
<p>最后使用在vnc的地址栏输入端口号:1就可以连接vnc啦！</p>
]]></content>
      <tags>
        <tag>centos</tag>
        <tag>vnc</tag>
      </tags>
  </entry>
  <entry>
    <title>安装CentOS报错dracut-initqueue-timeout</title>
    <url>/2023/04/09/%E5%AE%89%E8%A3%85CentOS%E6%8A%A5%E9%94%99dracut-initqueue-timeout/</url>
    <content><![CDATA[<p>前言：前几天买了一个i5-3475s的小主机准备用来安装centos作为一个服务器每天执行定时任务，但是选择Install CentOS Linux 7时一直弹出dracut-initqueue timeout的报错内容。</p>
<span id="more"></span>

<h2 id="1、获取硬盘路径"><a href="#1、获取硬盘路径" class="headerlink" title="1、获取硬盘路径"></a>1、获取硬盘路径</h2><p>安装报错dracut-initqueue-timeout是因为系统找不到我们的引导程序，需要手动指定引导程序。</p>
<p>首先需要获取我们硬盘的路径，刚刚在一直弹dracut-initqueue-timeout报错大概一分钟后就会显示命令行dracut:&#x2F;#，这时我们可以输入命令来查看我们硬盘挂载情况</p>
<p>输入命令：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> /dev</code></pre>

<p>可以看到所有的硬盘设备信息，sda,sda4,sdb,sdb4这样的</p>
<p>我们此时将U盘或者移动硬盘拔出，再次使用 <code>ls /dev</code>命令，可以看到有硬盘不见了，由于我使用的是移动硬盘进行安装，所以消失的是sda和sda4.如果你们使用的是U盘应该是sdb4，如果不确定可以重新插上U盘再次使用命令查看。</p>
<h2 id="2、重启后修改引导盘"><a href="#2、重启后修改引导盘" class="headerlink" title="2、重启后修改引导盘"></a>2、重启后修改引导盘</h2><p>首先进行重启。命令如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">init <span class="token number">6</span></code></pre>

<p>然后我们再进入安装界面，即显示Install CentOS Linux 7和Test this media &amp; install CentOS Linux 7</p>
<p>的界面，将光标调整至Install CentOS Linux 7上然后按TAB键即可修改引导内容。</p>
<p>可以看到会出现如下内容：</p>
<p>vmlinuz initrd&#x3D;initrd.img inst.stage2&#x3D;hd:LABEL&#x3D;CentOS\x207\x20x86_64 quiet</p>
<p>我们将LABEL&#x3D;CentOS\x207\x20x86_64修改为我们的盘符，刚刚我们尝试拔掉硬盘后发现缺失的盘符应该是sda和sda4，但是不知道是那一个，经过我的尝试发现是sda4，因为我将LABEL&#x3D;CentOS\x207\x20x86_64修改成了&#x2F;dev&#x2F;sda和&#x2F;dev&#x2F;sda4后发现修改成sda4可以正常进入安装界面，按照网上的说法如果使用U盘安装一般是sdb4.那么我们将完整的内容修改成如下即可</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">vmlinuz <span class="token assign-left variable">initrd</span><span class="token operator">=</span>initrd.img <span class="token assign-left variable">inst.stage2</span><span class="token operator">=</span>hd:/dev/sda4 quiet</code></pre>

<p>如果是U盘你应该修改成如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">vmlinuz <span class="token assign-left variable">initrd</span><span class="token operator">=</span>initrd.img <span class="token assign-left variable">inst.stage2</span><span class="token operator">=</span>hd:/dev/sdb4 quiet</code></pre>

<p>修改好后按回车应该就可以看到正常的centos安装界面了。</p>
]]></content>
      <tags>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>如何删除 Mac 上的 Office 许可证文件</title>
    <url>/2021/11/07/%E5%A6%82%E4%BD%95%E5%88%A0%E9%99%A4%20Mac%20%E4%B8%8A%E7%9A%84%20Office%20%E8%AE%B8%E5%8F%AF%E8%AF%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>我们平常在使用office时会使用批量许可证的软件，但是我们当我们卸载掉Office全家桶后再进行安装，发现还是显示已经使用了批量许可证激活，这时我们就要进行许可证的移除来保证可以使用我们购买的新的许可证进行激活</p>
<p>首先我们可以在官网<a href="https://support.microsoft.com/zh-cn">https://support.microsoft.com/zh-cn</a> 搜索“如何删除 Mac 上的 Office 许可证文件”，然后第一个搜索结果就是了，我们将网页向下移动就可以发现有一个标题是“下载并运行许可证删除工具”，我们下载下来然后安装即可清除，这个安装是不会安装其他软件的，只会清除一次许可证。</p>
]]></content>
      <tags>
        <tag>mac</tag>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title>您目前无法访问 因为此网站使用了 HSTS。网络错误和攻击通常是暂时的，因此，此网页稍后可能会恢复正常</title>
    <url>/2024/07/01/%E6%82%A8%E7%9B%AE%E5%89%8D%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE-%E5%9B%A0%E4%B8%BA%E6%AD%A4%E7%BD%91%E7%AB%99%E4%BD%BF%E7%94%A8%E4%BA%86-HSTS%E3%80%82%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF%E5%92%8C%E6%94%BB%E5%87%BB%E9%80%9A%E5%B8%B8%E6%98%AF%E6%9A%82%E6%97%B6%E7%9A%84%EF%BC%8C%E5%9B%A0%E6%AD%A4%EF%BC%8C%E6%AD%A4%E7%BD%91%E9%A1%B5%E7%A8%8D%E5%90%8E%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>您目前无法访问 因为此网站使用了 HSTS。网络错误和攻击通常是暂时的，因此，此网页稍后可能会恢复正常。</p>
<h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>HSTS：HSTS 是 HTTP 严格传输安全（HTTP Strict Transport Security） 的缩写。 这是一种网站用来声明他们只能使用安全连接（HTTPS）访问的方法。 如果一个网站声明了 HSTS 策略，浏览器必须拒绝所有的 HTTP 连接并阻止用户接受不安全的 SSL 证书。 目前大多数主流浏览器都支持 HSTS (只有一些移动浏览器无法使用它)。</p>
<span id="more"></span>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>调整键盘为英文输入状态，直接输入：<code>thisisunsafe </code>即可（不是在地址栏输入，就直接敲键盘就行了）。按完上面的按键，页面会自动刷新，然后就可以正常访问了。</p>
]]></content>
      <tags>
        <tag>HSTS</tag>
      </tags>
  </entry>
  <entry>
    <title>完美解决MySql出现1366中文错误</title>
    <url>/2021/04/06/%E5%AE%8C%E7%BE%8E%E8%A7%A3%E5%86%B3MySql%E5%87%BA%E7%8E%B01366%E4%B8%AD%E6%96%87%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在表中插入中文数据出现如下错误：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">Warning Code ：1366 Incorrect string value: <span class="token string">'\xE5\x9C\xA8'</span> <span class="token keyword">for</span> <span class="token function">column</span> <span class="token string">'content'</span> at row <span class="token number">1</span></code></pre>

<p>数据库一般有三个字符编码，一个是数据库，一个是表，一个是列</p>
<p>首先检查数据库是否为utf8字符集</p>
<p>打开navicat，选择数据库右键编辑数据库就可以看到数据库的字符集，如果不是utf8我们就把字符集调成utf8，并且排序规则改为<code>utf8_general_ci</code>,这是数据库的utf8默认字符集，如果是utf8就不用改，然后点击确认</p>
<span id="more"></span>

<p><img src="C:\mysql1366\数据库.png" loading="lazy"></p>
<p>我们再看一下表是否为utf8的字符集，同样用navicat选择报错的表，右键设计表，然后点击选项就可以看到表的默认字符集，如果不是utf8就改为和刚刚我们修改数据库字符集一样的编码，排序规则也是参照上面修改数据库的字符集和排序规则来</p>
<p><img src="C:\mysql1366\表.png" alt="表" loading="lazy"></p>
<p>然后我们再看一下字段的字符集是否为utf8</p>
<p>我们现在还在设计表的选项中，我们切换回字段的选择，然后点击所有可以插入中文的字段，比如varchar类型的name，选中，然后下面就有这个字段的默认字符集，如果不是utf8我们也将他的字符集改为utf8然后保存就可以解决数据库的所有中文报错问题啦！</p>
<p><img src="/../../../../mysql1366/%E5%AD%97%E6%AE%B5.png" alt="字段" loading="lazy"></p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>定时任务的实现方式+Quartz整合Spring</title>
    <url>/2021/09/05/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F-Quartz%E6%95%B4%E5%90%88Spring/</url>
    <content><![CDATA[<h2 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h2><p>只使用一个参数，会在指定的时间后运行，单位毫秒,但是只会执行一次</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"一秒后执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<span id="more"></span>

<p>使用一个参数，单位Date对象，会在指定的日期运行一次</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制年</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制月 这里注意，月份是按国外的月份，8就是9月</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制日</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制时</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 控制分</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 控制秒</span>

<span class="token class-name">Date</span> time <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 得出执行任务的时间,此处为Thu Sep 05 00:00:00 CST 2022</span>

<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"固定年月日执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>上面使用一个参数只会运行一次程序，我们多数情况下肯定是在每过一定的时间执行一次，比如每过一秒执行一次</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"0毫秒后每过一秒执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>也可以使用指定的日期然后每过一秒执行一次</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">,</span> <span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制年</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制月 这里注意，月份是按国外的月份，8就是9月</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制日</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 控制时</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 控制分</span>
calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 控制秒</span>

<span class="token class-name">Date</span> time <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 得出执行任务的时间,此处为Thu Sep 05 00:00:00 CST 2022</span>

<span class="token class-name">Timer</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2022年9月4号中午十二点开始执行，每秒执行一次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><p>使用Timer是单线程的形式，而ScheduledExecutorService是线程池的方式，，这是最理想的定时任务方式</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scheduledExecutorService<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用线程的方式执行，第一个参数是线程，第二个参数是什么时候执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>当然我们也可以每过指定时间执行一次，比如一秒执行一次</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">ScheduledExecutorService</span> scheduledExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scheduledExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用线程的方式执行，第一个参数是线程，第二个参数是什么时候执行,第三个参数过多久再次执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>



<h2 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h2><p>首先使用quartz不是java自带的包所以需要导入jar包，这里我们使用maven</p>
<p>进行导入</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;
    &lt;version&gt;2.3.0&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>然后我们创建一个类实现Job类，在里面写上我们需要执行的定时任务，这里我们编写一个新的类</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuertzJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务被执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>然后我们在创建一个测试类</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quartzmain</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SchedulerFactory</span> schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2、创建JobDetail实例，并与自己写的Job类绑定(Job执行内容)</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">QuertzJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3、构建Trigger实例,每隔1s执行一次</span>
        <span class="token class-name">Trigger</span> trigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span> <span class="token string">"triggerGroup1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//立即生效</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">SimpleScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">simpleSchedule</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">withIntervalInSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">//每隔1s执行一次</span>
                        <span class="token punctuation">.</span><span class="token function">repeatForever</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一直执行</span>

        <span class="token comment">//4、执行</span>
        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------scheduler start ! ------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        当任务执行一分钟后就停止任务</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>cron表达式</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quartzmain</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SchedulerFactory</span> schedulerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StdSchedulerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Scheduler</span> scheduler <span class="token operator">=</span> schedulerFactory<span class="token punctuation">.</span><span class="token function">getScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2、创建JobDetail实例，并与自己写的Job类绑定(Job执行内容)</span>
        <span class="token class-name">JobDetail</span> jobDetail <span class="token operator">=</span> <span class="token class-name">JobBuilder</span><span class="token punctuation">.</span><span class="token function">newJob</span><span class="token punctuation">(</span><span class="token class-name">QuertzJob</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"job1"</span><span class="token punctuation">,</span> <span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
        <span class="token class-name">CronTrigger</span> cronTrigger <span class="token operator">=</span> <span class="token class-name">TriggerBuilder</span><span class="token punctuation">.</span><span class="token function">newTrigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withIdentity</span><span class="token punctuation">(</span><span class="token string">"trigger1"</span><span class="token punctuation">,</span><span class="token string">"triggerGroup1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">startNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSchedule</span><span class="token punctuation">(</span><span class="token class-name">CronScheduleBuilder</span><span class="token punctuation">.</span><span class="token function">cronSchedule</span><span class="token punctuation">(</span><span class="token string">"5/6 * * * * ? "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//程序开始五秒后执行一次然后每六秒执行一次</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//4、执行</span>
        scheduler<span class="token punctuation">.</span><span class="token function">scheduleJob</span><span class="token punctuation">(</span>jobDetail<span class="token punctuation">,</span> cronTrigger<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------scheduler start ! ------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        当任务执行一分钟后就停止任务</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scheduler<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="Spring整合Quartz"><a href="#Spring整合Quartz" class="headerlink" title="Spring整合Quartz"></a>Spring整合Quartz</h2><p>首先我们创建一个简单的定时任务，测试成功后再尝试使用cron表达式的定时任务</p>
<h2 id="简单的定时任务"><a href="#简单的定时任务" class="headerlink" title="简单的定时任务"></a>简单的定时任务</h2><p>第一步导入spring依赖，这里注意，导入的是spring-context-support这个依赖，不要导入成了spring-context</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-context-support&lt;&#x2F;artifactId&gt;
    &lt;version&gt;5.1.6.RELEASE&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>然后还要导入tx</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework&#x2F;spring-context --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;
    &lt;version&gt;5.1.6.RELEASE&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>再导入quart的依赖</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;dependency&gt;
    &lt;groupId&gt;org.quartz-scheduler&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;quartz&lt;&#x2F;artifactId&gt;
    &lt;version&gt;2.3.1&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;</code></pre>

<p>依赖导入好了就可以开始编写需要执行的定时的任务代码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>然后在spring上下文配置定时器的JobDetail和simpleTrigger触发器，最后再绑定即可，这里和没有整合spring是一样的，只不过整合之后是将bean的创建交给spring</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring.MyJob<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- 2.任务触发器详细信息bean --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobDetail<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.scheduling.quartz.JobDetailFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>spring.MyJob<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!--第二步：2. 定义触发器，并且将jobDetail注入 --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simpleTrigger<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.scheduling.quartz.SimpleTriggerFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobDetail<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jobDetail<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- 调度工厂实例化后，经过3秒开始执行调度 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>startDelay<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>3000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token comment">&lt;!-- 每隔2秒执行一次 --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>repeatInterval<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- 总管理类 如果将lazy-init='false'那么容器启动就会执行调度程序 --></span>
<span class="token comment">&lt;!-- 第三步：配置调度工厂  --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>startQuertz<span class="token punctuation">"</span></span> <span class="token attr-name">lazy-init</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no<span class="token punctuation">"</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.scheduling.quartz.SchedulerFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- 管理trigger --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>triggers<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ref</span> <span class="token attr-name">bean</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>simpleTrigger<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre>

<p>最后直接创建一个测试类启动即可</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ApplicationContext</span> <span class="token class-name">ApplicationContext</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这里因为不是springboot的项目就只能这样启动，获取上下文配置然后启动</p>
<h2 id="cron表达式的定时任务"><a href="#cron表达式的定时任务" class="headerlink" title="cron表达式的定时任务"></a>cron表达式的定时任务</h2><p>首先我们还是依赖都不变，只需要更改xml的配置</p>
<pre class="language-xml-dtd" data-language="xml-dtd"><code class="language-xml-dtd">&lt;bean id&#x3D;&quot;job&quot; class&#x3D;&quot;spring.MyJob&quot;&gt;&lt;&#x2F;bean&gt;


&lt;!-- 2.任务触发器详细信息bean --&gt;
&lt;bean id&#x3D;&quot;jobDetail&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.JobDetailFactoryBean&quot;&gt;

    &lt;property name&#x3D;&quot;jobClass&quot; value&#x3D;&quot;spring.MyJob&quot;&gt;&lt;&#x2F;property&gt;
&lt;&#x2F;bean&gt;

&lt;!-- 第二种 CronTriggerBean，支持到指定时间运行一次，如每天12:00运行一次等。配置方式如下： --&gt;
&lt;bean id&#x3D;&quot;cronTrigger&quot; class&#x3D;&quot;org.springframework.scheduling.quartz.CronTriggerFactoryBean&quot;&gt;
    &lt;property name&#x3D;&quot;jobDetail&quot; ref&#x3D;&quot;jobDetail&quot; &#x2F;&gt;
    &lt;property name&#x3D;&quot;cronExpression&quot; value&#x3D;&quot;0 4 22 * * ?&quot; &#x2F;&gt;
&lt;&#x2F;bean&gt;


&lt;!-- 总管理类 如果将lazy-init&#x3D;&#39;false&#39;那么容器启动就会执行调度程序 --&gt;
&lt;!-- 第三步：配置调度工厂  --&gt;
&lt;bean id&#x3D;&quot;startQuertz&quot; lazy-init&#x3D;&quot;false&quot; autowire&#x3D;&quot;no&quot;
      class&#x3D;&quot;org.springframework.scheduling.quartz.SchedulerFactoryBean&quot;&gt;
    &lt;!-- 管理trigger --&gt;
    &lt;property name&#x3D;&quot;triggers&quot;&gt;
        &lt;list&gt;
            &lt;ref bean&#x3D;&quot;cronTrigger&quot; &#x2F;&gt;
        &lt;&#x2F;list&gt;
    &lt;&#x2F;property&gt;
&lt;&#x2F;bean&gt;</code></pre>

<p>可以看到我们只是将简单的触发器更改成了cron表达式触发器，其他的配置都没有动</p>
<h2 id="spring整合quartz实现方式"><a href="#spring整合quartz实现方式" class="headerlink" title="spring整合quartz实现方式"></a>spring整合quartz实现方式</h2><p>这里在第一次创建简单的定时任务时使用的是实现Job接口</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">implements</span> <span class="token class-name">Job</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当然我们也可以使用继承QuartzJobBean的方式</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyJob</span> <span class="token keyword">extends</span> <span class="token class-name">QuartzJobBean</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">executeInternal</span><span class="token punctuation">(</span><span class="token class-name">JobExecutionContext</span> jobExecutionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JobExecutionException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"任务执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>Spring</tag>
        <tag>Quartz</tag>
      </tags>
  </entry>
  <entry>
    <title>手动释放webclient创建的databuffer导致并发时wenclient报错</title>
    <url>/2024/07/05/%E6%89%8B%E5%8A%A8%E9%87%8A%E6%94%BEwebclient%E5%88%9B%E5%BB%BA%E7%9A%84databuffer%E5%AF%BC%E8%87%B4%E5%B9%B6%E5%8F%91%E6%97%B6wenclient%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<p>WebClient是Spring框架5.0引入的基于响应式编程模型的HTTP客户端。‌ 它提供了一种简便的方式来处理HTTP请求和响应，‌支持异步和非阻塞式的请求和响应处理。‌WebClient基于Reactor，‌这是一种响应式流编程框架，‌提供了Publisher-Subscriber模型的API，‌允许异步、‌非阻塞的处理流式数据。‌通过构建链式的HTTP请求和响应处理函数，‌WebClient允许开发者构建异步和非阻塞式的HTTP客户端。‌它支持多种HTTP方法、‌请求和响应处理、‌错误处理、‌HTTP认证以及与RESTful服务的交互。‌</p>
<span id="more"></span>

<h2 id="手动释放代码"><a href="#手动释放代码" class="headerlink" title="手动释放代码"></a>手动释放代码</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">ClientResponse</span> clientResponse<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">HttpHeaders</span> httpHeaders <span class="token operator">=</span> clientResponse<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asHttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">HttpStatus</span> httpStatus <span class="token operator">=</span> clientResponse<span class="token punctuation">.</span><span class="token function">statusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>httpStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
  response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>httpHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> clientResponse<span class="token punctuation">.</span><span class="token function">bodyToMono</span><span class="token punctuation">(</span><span class="token class-name">DataBuffer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>result <span class="token operator">-></span> <span class="token class-name">WebUtil</span><span class="token punctuation">.</span><span class="token function">writeResponse</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

</code></pre>

<p>Webutil</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">writeResponse</span><span class="token punctuation">(</span><span class="token class-name">DataBuffer</span> buffer<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doFinally</span><span class="token punctuation">(</span>signalType <span class="token operator">-></span> <span class="token class-name">DataBufferUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<p>webclient使用bodyToMono构建对象时，在后续方法中手动使用DataBufferUtils.release方法对缓存的对象进行了释放，导致Reactor释放这个对象时异常。</p>
<p>WebUtil修改</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">writeResponse</span><span class="token punctuation">(</span><span class="token class-name">DataBuffer</span> buffer<span class="token punctuation">,</span> <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <tags>
        <tag>springboot</tag>
        <tag>webflux</tag>
        <tag>webclient</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库执行脚本报错“不能在一个只读模式的事务中执行xxx”</title>
    <url>/2024/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99%E2%80%9C%E4%B8%8D%E8%83%BD%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%8F%AA%E8%AF%BB%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%B8%AD%E6%89%A7%E8%A1%8Cxxx%E2%80%9D/</url>
    <content><![CDATA[<p>今天在生产环境连接postgresql时，发现可以正常查询，但是无法进行数据库增删改和建表语句的执行，但是当前使用的帐号确实拥有读写数据库的权限。</p>
<p>报错信息如下：[25006]错误:不能在一个只读模式的事务中执行delete</p>
<span id="more"></span>

<h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><p>在网上看了很多例子，有的是说可能是数据库设置了只读，有的是说当前连接数据库的驱动设置了只读模式。但是都看过了都不是。</p>
<h3 id="查询数据库是否只读模式"><a href="#查询数据库是否只读模式" class="headerlink" title="查询数据库是否只读模式"></a>查询数据库是否只读模式</h3><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> default_transaction_read_only <span class="token punctuation">;</span>  </code></pre>

<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>原因是数据库是集群的模式，一主二从，应用只能连接主库进行读写，而当前连接了从库，导致报错“不能在一个只读模式的事务中执行x x x”</p>
]]></content>
      <tags>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>接入支付宝沙箱支付</title>
    <url>/2021/07/29/%E6%8E%A5%E5%85%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%94%AF%E4%BB%98/</url>
    <content><![CDATA[<p>首先进入支付宝开放平台官网<a href="https://open.alipay.com/">https://open.alipay.com/</a> 使用自己的支付宝账户进行登录就可以了，期间如果要填一些信息正常填写即可</p>
<p>登录成功后点击控制台管理，再往下滑找到研发服务<br><img src="/../../../../myImg/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A7%E5%88%B6%E5%8F%B0.png" loading="lazy"></p>
<span id="more"></span>


<p>进入之后你就可以看到自己的沙箱环境了，然后我们需要配置一下RSA2的密钥，这个密钥需要使用支付宝官方工具进行自动生成即可，这里可以选择windows版本以及mac版本，当然如果你不想下载这些工具你可以选择网页生成效果也是一样的，支付宝提供了一个专门生成密钥的网页给开发者使用<a href="https://miniu.alipay.com/keytool/create">https://miniu.alipay.com/keytool/create</a></p>
<p>点击生成密钥即可生成应用的公钥和私钥，将应用公钥填写到支付宝的沙箱环境中即可</p>
<p>然后我们可以往下滑就可以看到有各种支付的api，我们可以点击一个进入下载demo即可，这里我们选择手机网站或电脑网站</p>
<p><img src="/../../../../myImg/%E6%B2%99%E7%AE%B1.png" loading="lazy"></p>
<p>进入api会有各种教程教你如何使用这个api调用付款及用户信息，这里我们选择左边的菜单中的SDK&amp;DEMO 这里可以看到使用项目中需要下载的依赖以及demo</p>
<p>我们下载一个demo进行尝试</p>
<p>我们打开demo可以看见有一个配置文件和一个util工具类，工具类是用来记录日志的这个可以不用，我们打开配置文件查看一下<br><img src="/../../../../myImg/%E6%94%AF%E4%BB%98%E5%AE%9Ddemo.png" loading="lazy"></p>
<p>第一个是appid，我们可以在支付宝沙箱应用的必看部分第一个看到，复制填上去即可</p>
<p>第二个参数需要一个私钥，在之前我们生成的密钥中有应用的公钥和私钥，公钥我们已经填到支付宝沙箱环境中了，下面的私钥再填到配置文件中即可</p>
<p>第三个参数是异步通知的回调地址，这里需要使用外网地址，如果测试环境没有可以选择内网穿透</p>
<p>第四个参数是本地同步回调地址，也就是用户支付成功后过几秒会看到的页面，这里可以不需要外网，可以使用内网地址。</p>
<p>第五个参数是请求网关地址，这个地址我们同样可以在支付宝的沙箱环境中找到</p>
<p>第六个参数和第七个参数是编码规范我们不需要改动</p>
<p>第八个参数是支付宝公钥，我们同样可以在支付宝沙箱环境中找到</p>
<p>最后的两个参数也不需要改动</p>
<p>这样我们的参数就配置好了，然后我们使用tomcat进行启动即可</p>
<p>可以看到除了配置文件之外的业务核心代码都写在了jsp中，当然我们也可以将里面的代码放在mcv中执行，因为jsp中的代码就是java代码</p>
<p>到了这里就可以使用demo对沙箱环境进行一个正常的支付扣款功能了  支付的时候选择账号密码登录然后使用沙箱给的账号密码付款即可</p>
]]></content>
      <tags>
        <tag>支付宝</tag>
        <tag>沙箱</tag>
        <tag>支付</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈慕课网m3u8加密过程</title>
    <url>/2023/07/30/%E6%B5%85%E8%B0%88%E6%85%95%E8%AF%BE%E7%BD%91m3u8%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>由于慕课网的视频是使用ts文件流格式进行播放，但是下载后发现无法正常播放，说明进行了加密，下载其对应的m3u8文件发现是一个json报文，其m3u8文件和key文件均进行了加密处理。</p>
<span id="more"></span>

<h2 id="1、解密m3u8"><a href="#1、解密m3u8" class="headerlink" title="1、解密m3u8"></a>1、解密m3u8</h2><p>我们随便进入一个免费的慕课网课程，使用F12调出网络，然后搜索m3u8文件的下载链接</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//www.imooc.com/video/64181742255ba95a4b010436/medium.m3u8?cdn=aliyun1&amp;ssl=1&amp;hxk_uri=aHR0cHM6Ly93d3cuaW1vb2MuY29tL3ZpZGVvLzY0MTgxNzQyMjU1YmE5NWE0YjAxMDQzNi9tZWRpdW0uaHhrP3RpbWVzdGFtcD0xNjkwNzE2MzE0JnRva2VuPWltb29jJTNBTVdNek5HUXlPRFpsT0dFNVpEYzRNVGhoTXpaaE16TTRPR0prTkRka01XSXlNV1EyWm1Ga1pnJTNEJTNE&amp;timestamp=1690716314&amp;token=imooc%3ANjRhMzI3ODM4MTA1ZmU2MTJkMDFkZjFlNTBmYmUwNDM2OGQyMjgzNQ%3D%3D</span></span></code></pre>

<p>我们点击相应，发现返回的是一个json报文，而不是m3u8文件的具体内容</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"bVmhQqmwMVQ4G1RoHVQGZVQcYhVURCBHVClUZBdUBH9UAm5kFVQYIVQgY1Q+G1QZVAYZVGJ7VAdUfVQwfk9UZAoECgIbVB1UY1QZVDAgZC1UHVQXVBNUBmIdVBtUBVQwJmQtVBtUGVQGGVRie1QHVHtUMH5PVGQKBAoCG1QdVGNUGVQwOVQ4G1R1VBQbVAIdVHdUbBogN1QpVGQeBAdUAnNUHVQNVA9UMDFUOAp\/VFpxVAIdVHNUGVQaIElUNB1UG1QbVAYTVGIQFVR0IClUKVRkG1QYHVRyAnQVVA9UMDFUOGNUG1R9VGdUBmJ7VHlUYjFUIHlUPhtUbVQGdF49VDVUPiAXVFYfVBtUf1QGIVRiFVQ+OVQwWgVUImQEPVQCWVQdVBoiShdUX1Q4G1Q9VAZ5VGIoP1QaABFUX1Q4G1R\/VAZgAhVUeHZVVCBbVGR7VGJgY1RiFVR8LAVUVVQgZHozVAQCAnFUK1R\/VDBEA1RYG1RmfVRbVAIdVCQaHVQAOEVUG1Q9VAZ4XjFUKhogW1QYWVQ9VBtUBjNUYhVUOjoFVAFUIGQ\/VG1UBmdUYnh\/VBpUQ1Q4AVQbVGZhVAIHVB1UaHVUEBtUOBtUW1Q1VAY4HVQLVCgaIAlUA1RkIAQxVAITVB1UGnIlVCBkIVQYBB9UAkwHVAYaIDVUFVRkAAQWDFoGFVQJVDAxVDgFVBtUChY1VGIMfVQaMBwEfVQbVCoIe1Q+HVQ7VDADVEAjVAhkBBg9VGIHVAVUD1QqICFUZBgEG1QCHVRPVAwaIDNUPVRkfVQKP1QCInAVVBQgA1RJVGR8BBZzVGJ6ChVURn5PVGQKBAoCf1QdVA9UCEFUXjgef1RgYmYGeVRtVEQMABhAPARoYnlUZhVUOCANVAhVVBtUP1QGZ1RiZ1QyHVQaIA9UZCtUPnw\/VGIkFVQhVDAbVDgbVFNUfjFUAllUHVQaLEtUIARafgRqZ1RiFVR+elZZVEZkejAEN1RiFVRwe1QwFVQ4LVQEYGNUAn1UBnIaIF1UQ1RkAgR9VA9UAh1UdhpSF1QIOH4EY1QCBVQjVB1UK1QwRg1UZC1UaVQGN1RiehVUYBAHVDg6bAQXVG4CHVQIKhoyVhtUBVR+YgZmeVRxVEh+fgREO1QgAiFUDGYVVGFUMAIFVCtUZDVUBjlUYhVUeGAXVBVUIGQsNgQ4GCAjVBVUMBtUOBtUX1QzVAZ4VVQdVC4aIAlUQ1RkeVRkY1QCeA4VVHlUMEBeAnoEZ1QCVCgVVHdUMEFUUVQ4G1RkMGYHVB1UcVR6IFdUVVRkYAQfVAIZVB1UGnBXVCBkD1R4BDZmAhVUKHdUMBVUOHoABGJiZ1QrVCBKGgAfVGRFVHNUBhNUYhVUEVQHVDA6Kgp6fARmBnlUcVR+VFhmWDtUIiQlVGJuc1QaS1QgWVQaG1Q0N1QCWVRwHVQaSjgHVElUG1QzVAYyZ1RYKBogCVQDVGQgBDFUAhgqFVQhVDAZVDgfVBtUZmZnVGJxVHAaU1QgAlh9VGVUY1QGYitUIBpdVCBkWVQuBGY0BngVVH5QOEdUCVQbVH9UBhtUYhVUZitUMENUOAZ9VGdUYgIPVB1UGnJQF1QEOH4EM1QCVHlUcVRgEAdUODpsBBdUbgIdVAgqGjJWG1QFVH5iBmZ5VHFUSH5+BEQ7VCACIVQMZhVUYVQwAgVUK1RkNVQGOVRiFVR4YBdUFVQgZCw2BDgYICNUFVQwG1Q4G1RfVDNUBnhVVB1ULhogCVRDVGR5VGRjVAJ4DhVUeVQwQF4CegRnVAJUKBVUd1QwQVRRVDgbVGQwZgdUHVRxVHogV1RVVGRgBB9UAhlUHVR6JVRdVCBUCH9UaVQGbh1UU1QiGiABVAhVVBtUNDZmGD1UMhpuOFdUdVQbVAgfVAZiB1QHVHRRVCAAQn9UYGIGZmVUS1QmABAcQ1QbVGp9VBlUAh1UN1QnVDAQCVRkIGNUBAIYOhVUN1QwF1RUOCFUfjtUW1QCHVQuGgtUIGQPVGFUM1QGOVRiFVQkYVQwQlgBVBtUaAJjVAFUHVR8dVRWQVQFVDgbVDICM1QPVB1UGnQFVCBSWH9UYVQGZgIVVHp3VDBbVDh9VBtUf1QGYAYvVBp2XBJaU1RoG1RlVAIdVFNUd1R5VDAQW1RkdgR8IkVUHVRtVEtUMDFUOGgbVBlUBhhwc1R0GkRKXAB\/VGBieiFUPDVUOhQHVDhgCgR9VEACIBVUKgFUIANUZH4EfCVUYjAVVC1UMBACHiY\/VAQCWVQuHVQaB1QgQlNUP1QbVAY7VGZiFVR4UDhFVAh+BGVUAgJzVHtUe1QwQVRSOC4Ea1QCA1QdVBogUBZcAVQbVGBmZVRwYhVUYVQwOVQ4G1QfVGdUBjdUYnAVVC1UMBBZVGQsZgQwACtUJBpcDkwGYVQkIVQCajwVVAtULDA4eVQbVB4UA1RsHVRvVH5URABcf1R8WD5CPVQxVD1UME5DVGRgBCQ\/VGIkLVQaC1RdVCBkYVQjVAYvVCpiFVQqCloFVGQiBD1UAllUHVQaIkoXVF9UOBtUPVQGeVRidVR\/VH9UMExdVGR4BGZkBHwVVHtUMBYNVGR2BGdUAh1UV1R1VCxFVFQ4AHtUY1QGb1RiFVRmA1QwW1Q4U1QbVGlUBmRSeBVUKAdUIAlUZClUZ1QGZVR9VGIjVC9URVQwOFFUG1R+JmIlVENUYiFUGiA0ZAYEHBAMfBVUYFREAFx\/VGB+XD1UXjVUPiAXVFYfVBtUf1QGIB1UX1QlVCtUMBtUOBtUAVR+IVQCHVRPVCIaGgBCWVQ9VBtUBjlUYhVUJi1UMFoPVGQgBD9UAh1UGVR3VHogVVRUAVQbVGdUBmJ7VAR0GiBRVA5RVBtUaVQGY1RiFVQoegZEZF1Uf1RkYVQCD1QdVBpuKVQgZENULVRhVAYzVGIlVH1UeFxeRlNUG1RgZm9UYhVUKHtUMBZCRDwEWHVUYhVUDBYwPVQ4fglUamdUAhh5VHFUflREHFxFVDgiJkY6FVR0S1QgZENUOVQ5VAYyHVRTVC4aIFVUQkNUG1QpVAY1VC1UYi9UYA1UIAFUZCAEPVQCVVQdVC1Ub1QwG1Q4G1RdVH9UBmACFVR4dlVUIFtUZHtUYmBjVGIVVHwsBVRVVCBkejNUBAICcVQrVH9UMEQDVFgbVGlUBnlUYgQVVGFUME1UOBtUUVQzVAYwUBVUeHpSRl9UZHtUaVQGZ1RiLVQlVC1UMFoYQ1QbVFpxVHNUAh1UGVQaLVQgdiJ1VGVUeAYGeVRxVH5URDpAJ1QkJkVUJh1Ue1RhVDBbVDgmRgQ2M1RiFVQmf1QwWh9UZDYEMVQCUidUb1QnVDAZVDhfVBtUP1QGNVRnVGIiGiALVAFUZGAEZGIHVB1Uf1R5VDBDVDgEfVRnVGICA1QdVC9UI1QwTVQFVDgbVDFUBmJUeVRwGlRAX1RkdgR9VAIdVHtUbhogVVQPVGR7VDRjVAJ5VAZxVCpRVCAFVFgbVDFUBjVUYiB9VBpKH1QAZEVUc1QGE1RiFVQRVAdUMDoqCnp8BGYGeVRxVH5UWGZYO1QiJCVUYm5zVBpLVCBZVBobVDQ3VAJZVHAdVBpKOAdUSVQbVDNUBjJnVFgoGiAJVANUZCAEMVQCGCoVVCFUMBlUOB9UG1RmZmdUYnFUcBpTVCACWH1UZVRjVAZiK1QgGl1UIGRZVC4EZjQGeBVUflA4R1QJVBtUf1QGG1RiFVRmd1QwQVQCOHYEZGdUYhVULC9UMEdUU1Q4G1QzVAZgBCoVVC9UQjBCRAQ8WHVUYhVUDBYwPVQ4fglUamdUAhh5VHFUflREHFxFVDgiJkY6FVR0S1QgZENUOVQ5VAYyHVRTVC4aIFVUQkNUG1QpVAY1VC1UYi9UYA1UIAFUZCAEPVQCVVQdVC1Ub1QwG1Q4G1RdVH9UBmACFVR4dlVUIFtUZHtUYmBjVGIVVHwsBVRVVCBkejNUBAICcVQrVH9UMEQDVFgbVGlUBnlUYgQVVGFUME1UOHhSBDYyHVQPVHlUf1QwFVQ4egAEMGFUYiwVVCpUWhhDVBtUWnFUc1QCHVQZVBotVCB2InVUZVR4BgZ5VHFUflREOkAnVCQmRVQmHVR7VGFUMFtUOCZGBDYzVGIVVCZ\/VDBaH1RkNgQxVAJSJ1RvVCdUMBlUOF9UG1Q\/VAY1VGdUYiIaIAtUAVRkYARkYgdUHVR\/VHlUMENUOAR9VGdUYgIDVB1UL1QjVDBNVAVUOBtUMVQGYlR5VHAaVEBfVGR2BH1UAh1Ue1RuGiBdVA4IBCxrVAIdVAVUd1R3VBAwD1RkK1RjVAYzVGIVVCx4BVRCIEQ8BFh1VGIVVAwWMD1UOH4JVGpnVAIYeVRxVH5URBxcRVQ4IiZGOhVUdEtUIGRDVDlUOVQGMh1UU1QuGiBVVEJDVBtUKVQGNVQtVGIvVGANVCABVGQgBD1UAlVUHVQtVG9UMBtUOBtUXVR\/VAZgAhVUeHZVVCBbVGR7VGJgY1RiFVR8LAVUVVQgZHozVAQCAnFUK1R\/VDBEA1RYG1RpVAZ5VGIEFVRhVDBGDVRkegQzVAIFVCIdVBpSRAgEe1RoZ1QCU1QdVBpwAloYQ1QbVFpxVHNUAh1UGVQaLVQgdiJ1VGVUeAYGeVRxVH5URDpAJ1QkJkVUJh1Ue1RhVDBbVDgmRgQ2M1RiFVQmf1QwWh9UZDYEMVQCUidUb1QnVDAZVDhfVBtUP1QGNVRnVGIiGiALVAFUZGAEZGIHVB1Uf1R5VDBDVDgEfVRnVGICA1QdVC9UI1QwTVQFVDgbVDFUBmJUeVRwGlRAX1RkdgR9VAIdVHtUbhpNVAI4CDVUd1QGM1RidVR7VCtUMEFUBVQ4G1RhVAZjVGIVVCp+VVQgQkQEPFh1VGIVVAwWMD1UOH4JVGpnVAIYeVRxVH5URBxcRVQ4IiZGOhVUdEtUIGRDVDlUOVQGMh1UU1QuGiBVVEJDVBtUKVQGNVQtVGIvVGANVCABVGQgBD1UAlVUHVQtVG9UMBtUOBtUXVR\/VAZgAhVUeHZVVCBbVGR7VGJgY1RiFVR8LAVUVVQgZHozVAQCAnFUK1R\/VDBEA1RYG1RpVAZ5VGIEFVRhVDBFVDgbVAFUNDZif1QAI1QrVDBBVDgbVAlUZDRiBVQdVBokSgAfVGRFVHNUBhNUYhVUEVQHVDA6Kgp6fARmBnlUcVR+VFhmWDtUIiQlVGJuc1QaS1QgWVQaG1Q0N1QCWVRwHVQaSjgHVElUG1QzVAYyZ1RYKBogCVQDVGQgBDFUAhgqFVQhVDAZVDgfVBtUZmZnVGJxVHAaU1QgAlh9VGVUY1QGYitUIBpdVCBkWVQuBGY0BngVVH5QOEdUCVQbVH9UBhtUYhVUZntUMEVUOBtUU1Q0a1QEAi1UdVQrVDBHVDgsAAQwb1RiI1QtVGAQB1Q4OmwEF1RuAh1UCCoaMlYbVAVUfmIGZnlUcVRIfn4ERDtUIAIhVAxmFVRhVDACBVQrVGQ1VAY5VGIVVHhgF1QVVCBkLDYEOBggI1QVVDAbVDgbVF9UM1QGeFVUHVQuGiAJVENUZHlUZGNUAngOFVR5VDBAXgJ6BGdUAlQoFVR3VDBBVFFUOBtUZDBmB1QdVHFUeiBXVFVUZGAEH1QCGVQdVBpyBhBeBndUBjVUZ1RiFVQsdlYIEAh\/VDFUBnhCOhVUREdUKVQgZBdUG1QEAngPVHtUe1QwWlx\/VABgYhpmQ1QpVBA6BB9UZHVUf1QGeVRiKD9UGgARVF9UOBtUYVQGeEVUHVQaOAdUIF4IYVQ5VAY7VCZiFVQhVDAXVB44LAQ9VAJbVB1UbhpAUl1UZHdUYVQGYVRifVRzVHxRVCBkWVQtVDFUBm9UYhVUfC9UMEAOAH4EYmIFVHgdVBpLVCBkIVRgBGA3VGIVVHB5VDBHVAlUOBtUYVQGYVRid1QvVH9UMBJcKVQAMnwiRVQdVG1US1QwMVQ4aBtUGVQGGHBzVHQaREpcAH9UYGJ6IVQ8NVQ6FAdUOGAKBH1UQAIgFVQqAVQgA1RkfgR8JVRiMBVULVQwEAIeJj9UBAJZVC4dVBoHVCBCU1Q\/VBtUBjtUZmIVVHhQOEVUCH4EZVQCAnNUe1R7VDBBVFI4LgRrVAIDVB1UGiBQFlwBVBtUYGZlVHBiFVRhVDA5VDgbVB9UY1QGMn4CFVR+VgpGVVQbVDVUY1QGYnwVVHoFVFVUIGQqBHwiRVQdVG1US1QwMVQ4aBtUGVQGGHBzVHQaREpcAH9UYGJ6IVQ8NVQ6FAdUOGAKBH1UQAIgFVQqAVQgA1RkfgR8JVRiMBVULVQwEAIeJj9UBAJZVC4dVBoHVCBCU1Q\/VBtUBjtUZmIVVHhQOEVUCH4EZVQCAnNUe1R7VDBBVFI4LgRrVAIDVB1UGiBQFlwBVBtUYGZlVHBiFVRhVDA5VDgbVB9UZVQGYAIVVHgtVDBGWFFUG1RkajNUYngtVBpWOBFUCGFUJCFUAmo8FVQLVCwwOHlUG1QeFANUbB1Ub1R+VEQAXH9UfFg+Qj1UMVQ9VDBOQ1RkYAQkP1RiJC1UGgtUXVQgZGFUI1QGL1QqYhVUKgpaBVRkIgQ9VAJZVB1UGiJKF1RfVDgbVD1UBnlUYnVUf1R\/VDBMXVRkeARmZAR8FVR7VDAWDVRkdgRnVAIdVFdUdVQsRVRUOAB7VGNUBm9UYhVUZgNUMFtUOAVUG1RnVAZgVVQdVHNUdlxFVDh3VAJhVAZnVGIvVCVUd1QwRERCPARYdVRiFVQMFjA9VDh+CVRqZ1QCGHlUcVR+VEQcXEVUOCImRjoVVHRLVCBkQ1Q5VDlUBjIdVFNULhogVVRCQ1QbVClUBjVULVRiL1RgDVQgAVRkIAQ9VAJVVB1ULVRvVDAbVDgbVF1Uf1QGYAIVVHh2VVQgW1Rke1RiYGNUYhVUfCwFVFVUIGR6M1QEAgJxVCtUf1QwRANUWBtUaVQGeVRiBBVUYVQwTFgHVBtUZGdUAg9UHVQaIgVUIGQNVHdUYDQ0U1QdVBoiVFoYQ1QbVFpxVHNUAh1UGVQaLVQgdiJ1VGVUeAYGeVRxVH5URDpAJ1QkJkVUJh1Ue1RhVDBbVDgmRgQ2M1RiFVQmf1QwWh9UZDYEMVQCUidUb1QnVDAZVDhfVBtUP1QGNVRnVGIiGiALVAFUZGAEZGIHVB1Uf1R5VDBDVDgEfVRnVGICA1QdVC9UI1QwTVQFVDgbVDFUBmJUeVRwGlRAX1RkdgR9VAIdVHtUbhogUVRbVGR9VGBmYVRifhVUe1QwEllUeGQEYVQCVHp\/VBVUMEBCRDwEWHVUYhVUDBYwPVQ4fglUamdUAhh5VHFUflREHFxFVDgiJkY6FVR0S1QgZENUOVQ5VAYyHVRTVC4aIFVUQkNUG1QpVAY1VC1UYi9UYA1UIAFUZCAEPVQCVVQdVC1Ub1QwG1Q4G1RdVH9UBmACFVR4dlVUIFtUZHtUYmBjVGIVVHwsBVRVVCBkejNUBAICcVQrVH9UMEQDVFgbVGlUBnlUYgQVVGFUMBAIG1QBVGA2Yh1UA1R2GkVUVDhRVBtUZGJkA1QdVBp0SgAfVGRFVHNUBhNUYhVUEVQHVDA6Kgp6fARmBnlUcVR+VFhmWDtUIiQlVGJuc1QaS1QgWVQaG1Q0N1QCWVRwHVQaSjgHVElUG1QzVAYyZ1RYKBogCVQDVGQgBDFUAhgqFVQhVDAZVDgfVBtUZmZnVGJxVHAaU1QgAlh9VGVUY1QGYitUIBpdVCBkWVQuBGY0BngVVH5QOEdUCVQbVH9UBhtUYhVUZi1UMExcAVQbVGgyZgVUHVQvVHNUMEBbVGR8BDNUAh1UU1RzVGAQB1Q4OmwEF1RuAh1UCCoaMlYbVAVUfmIGZnlUcVRIfn4ERDtUIAIhVAxmFVRhVDACBVQrVGQ1VAY5VGIVVHhgF1QVVCBkLDYEOBggI1QVVDAbVDgbVF9UM1QGeFVUHVQuGiAJVENUZHlUZGNUAngOFVR5VDBAXgJ6BGdUAlQoFVR3VDBBVFFUOBtUZDBmB1QdVHFUeiBXVFVUZGAEH1QCGVQdVH9Ud1QwEFgEfgQxVAIAf1R1VC1UMBYIU1QbVGY2eEI6FVRER1QpVCBkF1QbVAQCeA9Ue1R7VDBaXH9UAGBiGmZDVClUEDoEH1RkdVR\/VAZ5VGIoP1QaABFUX1Q4G1RhVAZ4RVQdVBo4B1QgXghhVDlUBjtUJmIVVCFUMBdUHjgsBD1UAltUHVRuGkBSXVRkd1RhVAZhVGJ9VHNUfFFUIGRZVC1UMVQGb1RiFVR8L1QwQA4AfgRiYgVUeB1UGktUIGQhVGAEZVQCD1QdVBp2XVQgAl57VGdUBmIDVB1UGiRXVCADVF4bVGVUM1QGYmdUNVQ9VDB+T1RkCgQKAn9UHVQPVAhBVF44Hn9UYGJmBnlUbVREDAAYQDwEaGJ5VGYVVDggDVQIVVQbVD9UBmdUYmdUMh1UGiAPVGQrVD58P1RiJBVUIVQwG1Q4G1RTVH4xVAJZVB1UGixLVCAEWn4EamdUYhVUfnpWWVRGZHowBDdUYhVUcHtUMBVUOC1UBGBjVAJ9VAZyGiBdVENUZAIEfVRQAn9UJVR9VDBEZAlUK1RhVAZjVGIVVCx8V1QgZA9UfARkM1RiNVRnVD1UMH5PVGQKBAoCf1QdVA9UCEFUXjgef1RgYmYGeVRtVEQMABhAPARoYnlUZhVUOCANVAhVVBtUP1QGZ1RiZ1QyHVQaIA9UZCtUPnw\/VGIkFVQhVDAbVDgbVFNUfjFUAllUHVQaLEtUIARafgRqZ1RiFVR+elZZVEZkejAEN1RiFVRwe1QwFVQ4LVQEYGNUAn1UBnIaIF1UQ1RkAgR9VFVUAh1UeVQsB1QgZFlUfgQzVAIDVB1Ue1RxVDAQVAZ6MVQEAlJnVDVUPVQwfk9UZAoECgJ\/VB1UD1QIQVReOB5\/VGBiZgZ5VG1URAwAGEA8BGhieVRmFVQ4IA1UCFVUG1Q\/VAZnVGJnVDIdVBogD1RkK1Q+fD9UYiQVVCFUMBtUOBtUU1R+MVQCWVQdVBosS1QgBFp+BGpnVGIVVH56VllURmR6MAQ3VGIVVHB7VDAVVDgtVARgY1QCfVQGchogXVRDVGQCBH1UAAJ+FVQrVDBHVDgbVANUNVQGY1RidC9UGlIVVDgDVBtUNGFUAgR\/VG9UOhdUIGYTVBtUFVQGDgBiFVQAIk5ZVGRhVGBiBmZ5VHFUbmIcGEQjVD9UBmwZVB1UbhodVBI4VCoEPVQCB1QdVG9UPVQwDVQ4G1RTVDQ8eF9ULB1UGgtUA1QgZCx8BDVUYhVUJiNUMFtUOAZ7VGFUBm4HVB1UdhpGUF4FVGVUG1QGNFdUHVR4GiBRVA1UZHtUMmJiZ1R5VHVUfVRNVDA4H1QbVB1UBnlUYngVVCpSRAoIBCphVAIdVFVUJ1QsEFZYBVRjVBtUBnhCOhVUREdUKVQgZBdUG1QEAngPVHtUe1QwWlx\/VABgYhpmQ1QpVBA6BB9UZHVUf1QGeVRiKD9UGgARVF9UOBtUYVQGeEVUHVQaOAdUIF4IYVQ5VAY7VCZiFVQhVDAXVB44LAQ9VAJbVB1UbhpAUl1UZHdUYVQGYVRifVRzVHxRVCBkWVQtVDFUBm9UYhVUfC9UMEAOAH4EYmIFVHgdVBpLVCBkIVRgBGVUAlQoFVR8UVQgAVQKG1RoMjBUfVQadlZCVB47VAYjVFwVVB1UGgQ8IGQlVAFUFmhjVGJxVGdUflREAFxjVFo6IkI5VDJeGltUOBtUH1QmO1RSAiwVVCFUMEVUODweBCtUAlVUHVQgJVRKHVRdVDgbVD9UBjlUYhVUKmAHVCADVGQiBH1UAAJ9VHAaXEVUOBtUB1RkYGQDVB1UdAYaFVQ4G1QJVGVUBjdUYn1UI1RVVH4gXHwEBGtUGVQCHVQMGiBLVFlUZClUNjdUAlNUHVQtVHdUME1UUjh8BDRjVGIVVCh6VkISRDwEWHVUYhVUDBYwPVQ4fglUamdUAhh5VHFUflREHFxFVDgiJkY6FVR0S1QgZENUOVQ5VAYyHVRTVC4aIFVUQkNUG1QpVAY1VC1UYi9UYA1UIAFUZCAEPVQCVVQdVC1Ub1QwG1Q4G1RdVH9UBmACFVR4dlVUIFtUZHtUYmBjVGIVVHwsBVRVVCBkejNUBAICcVQrVH9UMEQDVFgbVGlUBnlUYgQVVGFUMEAJVGR7VGFUBjQCLVRxVFB+Fl1UZHwEM1QCf1QCb1Q6F1QgZhNUG1QVVAYOAGIVVAAiTllUZGFUYGIGZnlUcVRuYhwYRCNUP1QGbBlUHVRuGh1UEjhUKgQ9VAIHVB1Ub1Q9VDANVDgbVFNUNDx4X1QsHVQaC1QDVCBkLHwENVRiFVQmI1QwW1Q4BntUYVQGbgdUHVR2GkZQXgVUZVQbVAY0V1QdVHgaIFFUDVRke1QyYmJnVHlUdVR9VE1UMDgfVBtUHVQGeVRifBVULCAHVA9UZCoEN1QCUn9UdBpUFVQ4dlQEZDNUYntUb1Q6F1QgZhNUG1QVVAYOAGIVVAAiTllUZGFUYGIGZnlUcVRuYhwYRCNUP1QGbBlUHVRuGh1UEjhUKgQ9VAIHVB1Ub1Q9VDANVDgbVFNUNDx4X1QsHVQaC1QDVCBkLHwENVRiFVQmI1QwW1Q4BntUYVQGbgdUHVR2GkZQXgVUZVQbVAY0V1QdVHgaIFFUDVRke1QyYmJnVHlUdVR9VE1UMDgfVBtUHVQGeVRicBVUe1QwQlQBVBtUY1QGY1Ric1R7VHhTVFwgUnYENmQYPVQybhpXVDgbVHVUCAYfVGIHVAdUdFFUIABCf1RgYgZmZVRLVCYAEBxDVBtUan1UGVQCHVQ3VCdUMBAJVGQgY1QEAhg6FVQ3VDAXVFQ4IVR+O1RbVAIdVC4aC1QgZA9UYVQzVAY5VGIVVCRhVDBCWAFUG1RoAmNUAVQdVHx1VFZBVAVUOBtUMgIzVA9UHVQadAVUIFJYf1RhVAZmAhVUendUMFtUOH1UG1R\/VAZiVHAVVHlUMENUOFFUG1QxVAZhVGJwLVQaUDhNVAJ2BDNUAh1UD1RvVDoXVCBmE1QbVBVUBg4AYhVUACJOWVRkYVRgYgZmeVRxVG5iHBhEI1Q\/VAZsGVQdVG4aHVQSOFQqBD1UAgdUHVRvVD1UMA1UOBtUU1Q0PHhfVCwdVBoLVANUIGQsfAQ1VGIVVCYjVDBbVDgGe1RhVAZuB1QdVHYaRlBeBVRlVBtUBjRXVB1UeBogUVQNVGR7VDJiYmdUeVR1VH1UTVQwOB9UG1QdVAZ5VGIsFVR7VDBCDVRkLVRoMDBSeBVUfFRGX1QtVGRnVAZ4QjoVVERHVClUIGQXVBtUBAJ4D1R7VHtUMFpcf1QAYGIaZkNUKVQQOgQfVGR1VH9UBnlUYig\/VBoAEVRfVDgbVGFUBnhFVB1UGjgHVCBeCGFUOVQGO1QmYhVUIVQwF1QeOCwEPVQCW1QdVG4aQFJdVGR3VGFUBmFUYn1Uc1R8UVQgZFlULVQxVAZvVGIVVHwvVDBADgB+BGJiBVR4HVQaS1QgZCFUYAQ0NFNUI1QdVC9UMEJeAHYENGVUYhVUKHZRVCBkDVR2BHwiRVQdVG1US1QwMVQ4aBtUGVQGGHBzVHQaREpcAH9UYGJ6IVQ8NVQ6FAdUOGAKBH1UQAIgFVQqAVQgA1RkfgR8JVRiMBVULVQwEAIeJj9UBAJZVC4dVBoHVCBCU1Q\/VBtUBjtUZmIVVHhQOEVUCH4EZVQCAnNUe1R7VDBBVFI4LgRrVAIDVB1UGiBQFlwBVBtUYGZlVHBiFVRhVDA5VDgbVB9UZVQGMAdUHVQlVCwQUFpVVBtUYDY3VGJ5VHIaIAFUWB47VAYjVFwVVB1UGgQ8IGQlVAFUFmhjVGJxVGdUflREAFxjVFo6IkI5VDJeGltUOBtUH1QmO1RSAiwVVCFUMEVUODweBCtUAlVUHVQgJVRKHVRdVDgbVD9UBjlUYhVUKmAHVCADVGQiBH1UAAJ9VHAaXEVUOBtUB1RkYGQDVB1UdAYaFVQ4G1QJVGVUBjdUYn1UI1RVVH4gXHwEBGtUGVQCHVQMGiBLVF1UZCoEM1QCHVQDVHNUKgJaTFVUG1RkMDAHVB1UIBpaUBhDVBtUWnFUc1QCHVQZVBotVCB2InVUZVR4BgZ5VHFUflREOkAnVCQmRVQmHVR7VGFUMFtUOCZGBDYzVGIVVCZ\/VDBaH1RkNgQxVAJSJ1RvVCdUMBlUOF9UG1Q\/VAY1VGdUYiIaIAtUAVRkYARkYgdUHVR\/VHlUMENUOAR9VGdUYgIDVB1UL1QjVDBNVAVUOBtUMVQGYlR5VHAaVEBfVGR2BH1UAh1Ue1RuGhFUUjgIZntUYVQCHVQBVHdUKlw4Q1RWf1RmamNUYjVUZ1Q9VDB+T1RkCgQKAn9UHVQPVAhBVF44Hn9UYGJmBnlUbVREDAAYQDwEaGJ5VGYVVDggDVQIVVQbVD9UBmdUYmdUMh1UGiAPVGQrVD58P1RiJBVUIVQwG1Q4G1RTVH4xVAJZVB1UGixLVCAEWn4EamdUYhVUfnpWWVRGZHowBDdUYhVUcHtUMBVUOC1UBGBjVAJ9VAZyGiBdVENUZAIEfVQOAiwVVHdUTDAKU1RlVBtUBmACcVR7VH1UMEIIK1QCfiZiJVRDVGIhVBogNGQGBBwQDHgVVGBSQVQ4AH9UYGJ6IVQ8NVQ6FAdUOGAKBH1UQAIgFVQqAVQgA1RkfgR8JVRiMBVULVQwEAIeJj9UBAJZVC4dVBoHVCBCU1Q\/VBtUBjtUZmIVVHhQOEVUCH4EZVQCAnNUe1R7VDBBVFI4LgRrVAIDVB1UGiBQFlwBVBtUYGZlVHBiFVRhVDA5VDgbVB9UZ1QGZgNUHVR7VHVUMEVUOBtUCVRmZm4tVFJ5VHpNVFY4HjtUBiNUXBVUHVQaBDwgZEFUF1R9VBNUBmIHVAVUAi1UIGQ\/VBtUNdtl0OPRV6IA"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"OK"</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>我们点击响应下一个标签的启动器，查看m3u8链接请求完成后具体调用的js函数</p>
<p>我们可以从第一个函数打个断点一直往下调，发现在调用readystatechange函数时m3u8内容被解析成具体的内容了，不再是密文</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">t<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">readystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>currentTarget
                      <span class="token punctuation">,</span> r <span class="token operator">=</span> e<span class="token punctuation">.</span>readyState
                      <span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stats
                      <span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context
                      <span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">.</span>aborted <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>requestTimeout<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token number">0</span> <span class="token operator">===</span> o<span class="token punctuation">.</span>tfirst <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>o<span class="token punctuation">.</span>tfirst <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> o<span class="token punctuation">.</span>trequest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token number">4</span> <span class="token operator">===</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">var</span> l <span class="token operator">=</span> e<span class="token punctuation">.</span>status<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                o<span class="token punctuation">.</span>tload <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>tfirst<span class="token punctuation">,</span> i<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">var</span> u <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span>
                                  <span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                <span class="token string">"arraybuffer"</span> <span class="token operator">===</span> s<span class="token punctuation">.</span>responseType <span class="token operator">?</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> e<span class="token punctuation">.</span>response<span class="token punctuation">,</span>
                                c <span class="token operator">=</span> u<span class="token punctuation">.</span>byteLength<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>u <span class="token operator">=</span> e<span class="token punctuation">.</span>responseText<span class="token punctuation">,</span>
                                c <span class="token operator">=</span> u<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                o<span class="token punctuation">.</span>loaded <span class="token operator">=</span> o<span class="token punctuation">.</span>total <span class="token operator">=</span> c<span class="token punctuation">;</span>
                                <span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                                    <span class="token literal-property property">url</span><span class="token operator">:</span> e<span class="token punctuation">.</span>responseURL<span class="token punctuation">,</span>
                                    <span class="token literal-property property">data</span><span class="token operator">:</span> u
                                <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">onSuccess</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> o<span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>
                                o<span class="token punctuation">.</span>retry <span class="token operator">>=</span> a<span class="token punctuation">.</span>maxRetry <span class="token operator">||</span> l <span class="token operator">>=</span> <span class="token number">400</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;</span> <span class="token number">499</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token string">" while loading "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span>callbacks<span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
                                    <span class="token literal-property property">code</span><span class="token operator">:</span> l<span class="token punctuation">,</span>
                                    <span class="token literal-property property">text</span><span class="token operator">:</span> e<span class="token punctuation">.</span>statusText
                                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token string">" while loading "</span> <span class="token operator">+</span> s<span class="token punctuation">.</span>url <span class="token operator">+</span> <span class="token string">", retrying in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryDelay <span class="token operator">+</span> <span class="token string">"..."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span>retryTimeout <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadInternal</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryDelay<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                <span class="token keyword">this</span><span class="token punctuation">.</span>retryDelay <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>retryDelay<span class="token punctuation">,</span> a<span class="token punctuation">.</span>maxRetryDelay<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                o<span class="token punctuation">.</span>retry<span class="token operator">++</span><span class="token punctuation">)</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span>requestTimeout <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadtimeout</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span></code></pre>

<p>具体方法为：this.callbacks.onSuccess(d, o, s, e)</p>
<p>而onSuccess会调用loadsuccess方法，具体代码如下：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">PlaylistLoader</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">loadsuccess</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> context<span class="token punctuation">,</span> networkDetails</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token number">0</span> <span class="token operator">===</span> networkDetails <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>networkDetails <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        context<span class="token punctuation">.</span>isSidxRequest<span class="token punctuation">)</span>
                            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleSidxRequest</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token keyword">void</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handlePlaylistLoaded</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> context<span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resetInternalLoader</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">var</span> mediadata <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> response<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mediadata<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token operator">!</span>mediadata<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">)</span>
                            <span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleManifestParsingError</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">"transcoding"</span><span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">var</span> string <span class="token operator">=</span> destm_1<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>mediadata<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>data <span class="token operator">=</span> string<span class="token punctuation">,</span>
                        stats<span class="token punctuation">.</span>tload <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token number">0</span> <span class="token operator">!==</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#EXTM3U"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleManifestParsingError</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">"no EXTM3U delimiter"</span><span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#EXTINF:"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">||</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#EXT-X-TARGETDURATION:"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#EXTINF:"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"#EXT-X-KEY:"</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token keyword">return</span> <span class="token keyword">void</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleManifestParsingError</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">"no EXTM3U EXTINF"</span><span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleTrackOrLevelPlaylist</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> context<span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>
                            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_handleMasterPlaylist</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> context<span class="token punctuation">,</span> networkDetails<span class="token punctuation">)</span>
                    <span class="token punctuation">&#125;</span></code></pre>

<p>打断点发现在执行var string &#x3D; destm_1.default(mediadata.data.info);这行代码后string的值就是明文</p>
<p>进入方法断点发现调用如下方法代码：</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">function</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> t<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
                            r <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t <span class="token operator">=</span> r <span class="token operator">||</span> t<span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token punctuation">,</span> o<span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> a <span class="token operator">=</span> e<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
                        o <span class="token operator">=</span> n <span class="token operator">%</span> a<span class="token punctuation">,</span>
                        i <span class="token operator">=</span> t<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>
                        i <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        s<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">^</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> s
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">function</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> t<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                            e <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t <span class="token operator">=</span> e <span class="token operator">||</span> t<span class="token punctuation">;</span>
                    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        n<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> i<span class="token punctuation">,</span> o<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        <span class="token number">0</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">+</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>o <span class="token operator">=</span> n<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        n<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">[</span>r <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span>
                        n<span class="token punctuation">[</span>r <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">,</span>
                        r <span class="token operator">=</span> r <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> n
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">function</span> <span class="token function">i</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> t<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                            e <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t <span class="token operator">=</span> e <span class="token operator">||</span> t<span class="token punctuation">;</span>
                    <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        n<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        o <span class="token operator">=</span> n<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        o <span class="token operator">&amp;&amp;</span> r<span class="token operator">++</span><span class="token punctuation">,</span>
                        s<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        o <span class="token operator">=</span> n<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> o <span class="token operator">?</span> n<span class="token punctuation">[</span>r<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> n<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> a
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">function</span> <span class="token function">o</span><span class="token punctuation">(</span><span class="token parameter">t<span class="token punctuation">,</span> e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token number">0</span>
                      <span class="token punctuation">,</span> s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"object"</span> <span class="token operator">==</span> <span class="token keyword">typeof</span> t<span class="token punctuation">)</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                            s <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t <span class="token operator">=</span> s <span class="token operator">||</span> t<span class="token punctuation">;</span>
                    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">!=</span> <span class="token punctuation">(</span>o <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span> <span class="token operator">!=</span> o <span class="token operator">&amp;&amp;</span> r <span class="token operator">+</span> o <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> a<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        n <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span>
                        a<span class="token punctuation">[</span>r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>r <span class="token operator">+</span> o<span class="token punctuation">]</span><span class="token punctuation">,</span>
                        a<span class="token punctuation">[</span>o <span class="token operator">+</span> r<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">,</span>
                        <span class="token punctuation">(</span>r <span class="token operator">=</span> r <span class="token operator">+</span> o <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> r <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>
                                a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">^</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n <span class="token operator">%</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t<span class="token punctuation">.</span>length<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span>
                        a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">^</span> e<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>r <span class="token operator">%</span> e<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> a
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
                        <span class="token literal-property property">info</span><span class="token operator">:</span> t
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">q</span><span class="token operator">:</span> r<span class="token punctuation">,</span>
                    <span class="token literal-property property">h</span><span class="token operator">:</span> n<span class="token punctuation">,</span>
                    <span class="token literal-property property">m</span><span class="token operator">:</span> i<span class="token punctuation">,</span>
                    <span class="token literal-property property">k</span><span class="token operator">:</span> o
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> l <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">,</span> u <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> u<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>
                    u<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>
                u<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> u<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>
                    d<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    l <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>u<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table <span class="token operator">=</span> d<span class="token punctuation">,</span>
                s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key_table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token keyword">in</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">)</span>
                    <span class="token string">"q"</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"k"</span> <span class="token operator">!=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key_table<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    l <span class="token operator">=</span> l<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> l<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key_table<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info <span class="token operator">=</span> l<span class="token punctuation">;</span>
                <span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">,</span><span class="token number">58</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">38</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">47</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                s<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function-variable function">info</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">t</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> e<span class="token punctuation">,</span> r<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> o<span class="token punctuation">,</span> s<span class="token punctuation">,</span> a<span class="token punctuation">;</span>
                    <span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token operator">=</span> t<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
                    o <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
                    a <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> o <span class="token operator">&lt;</span> s<span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            e <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">&amp;</span> t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>o <span class="token operator">&lt;</span> s <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> e<span class="token punctuation">)</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            r <span class="token operator">=</span> f<span class="token punctuation">[</span><span class="token number">255</span> <span class="token operator">&amp;</span> t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>o <span class="token operator">&lt;</span> s <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> r<span class="token punctuation">)</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        a <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>e <span class="token operator">&lt;&lt;</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">&amp;</span> r<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">61</span> <span class="token operator">==</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">&amp;</span> t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token keyword">return</span> a<span class="token punctuation">;</span>
                            n <span class="token operator">=</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>o <span class="token operator">&lt;</span> s <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> n<span class="token punctuation">)</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        a <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&amp;</span> r<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">61</span> <span class="token operator">==</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">&amp;</span> t<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>o<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                <span class="token keyword">return</span> a<span class="token punctuation">;</span>
                            i <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>o <span class="token operator">&lt;</span> s <span class="token operator">&amp;&amp;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>
                            <span class="token keyword">break</span><span class="token punctuation">;</span>
                        a <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span> <span class="token operator">|</span> i<span class="token punctuation">)</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">return</span> a
                <span class="token punctuation">&#125;</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> c <span class="token keyword">in</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">var</span> h <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"q"</span> <span class="token operator">==</span> h <span class="token operator">||</span> <span class="token string">"k"</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">var</span> p <span class="token operator">=</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>key_table<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info <span class="token operator">=</span> a<span class="token punctuation">[</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span>
                        s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info <span class="token operator">=</span> a<span class="token punctuation">[</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>encrypt_table<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span>
                    <span class="token keyword">return</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">;</span><span class="token comment">//返回密钥</span>
                <span class="token keyword">var</span> g <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">.</span>length<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span>
                    g <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>data<span class="token punctuation">.</span>info<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> g<span class="token comment">//返回m3u8具体明文内容</span>
            <span class="token punctuation">&#125;</span></code></pre>

<p>当解析m3u8文件时，调用这个方法，传入两个参数，第一个参数为m3u8返回的json中的info密文，第二个参数为空，当解析密钥时，调用这个方法传入两个参数，第一个参数为密钥返回的json中的info，第二个参数为1</p>
<p>当解析m3u8文件时返回g，解析密钥时返回s.data.info</p>
<h2 id="2、解密密钥"><a href="#2、解密密钥" class="headerlink" title="2、解密密钥"></a>2、解密密钥</h2><p>密钥链接如下：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//www.imooc.com/video/64181742255ba95a4b010436/medium.hxk?timestamp=1690716610&amp;token=imooc%3AMTNiNjgxNjVmZWMxODZmNTU2MGE0YTI3MTg5OTllOWNkOWU0Y2FhNg%3D%3D</span></span></code></pre>

<p>返回内容：</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>
    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"Q1hmhRmUBVRUyVRUz1RU4VRU31RUmVRUJVRUHLBsBE1UVMlUVN9UVIVUVA=="</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"msg"</span><span class="token operator">:</span> <span class="token string">"OK"</span>
<span class="token punctuation">&#125;</span></code></pre>



<h2 id="3、尝试解密ts"><a href="#3、尝试解密ts" class="headerlink" title="3、尝试解密ts"></a>3、尝试解密ts</h2><p>我们通过打断点获取到上面的m3u8具体明文如下：</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#EXTM3U</span>
<span class="token comment">#EXT-X-VERSION:3</span>
<span class="token comment">#EXT-X-TARGETDURATION:5</span>
<span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="token comment">#EXT-X-KEY:METHOD=AES-128,URI="https://www.imooc.com/video/64181742255ba95a4b010436/medium.hxk?timestamp=1690717513&amp;token=imooc%3AMDZlODhiMmFmZGFlZDQwZDE1ZDIxOWFkZThjMTMwOTNlZGJkODUzMg%3D%3D"</span>
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/976c8113be2ab9a3.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/13c7d04a9a0501ba.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/e76225934c41ab00.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/d49dd098ecededd0.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/60f78f6c87e67d79.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/7a9cd5c4f6be88b6.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/c92d1fcef734ba1a.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/b1e4d6822c049a5b.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/9acff14623491ddc.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/1c4d1000d545ac4a.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/952961ea3cc62ca6.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/9b7dd981a05b7ed0.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/9b8c9369dcd3ee6a.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/2a5a3c60d4485e1f.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/f988ee24e5515c01.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/11dd466be594f43e.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/51cd92d4e30cb9db.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/3bd268e1e82dd80a.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/2a973917f61f00fb.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/3d47022fee554a9e.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/5641c24a48ed92e8.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/576c28812811fd90.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/847459caa80fbec0.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/57204775f573b314.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/dd10d45701a40255.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/c80184d32a473ae2.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/61d441c664cbdc6d.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/7979224745e3235e.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/f6d30ed15e23c36e.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/c8bc51a505d865cd.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/67e33e5f56a3d326.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/1d60f8e3cfb2d453.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/7ba25f18bdb47268.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/5ffee6c9b3f5a42f.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/4e41b4d004b13a46.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/5bcceed650ad96e2.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/956813522670b9d2.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/4b977aa7d14929a9.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/e56ab8bfd12023b7.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/fbeba6209f3a85a9.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/5f1db4d6e0da03e4.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/1ea52df86e4bf1a4.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/6e846376d87f0685.ts
<span class="token comment">#EXTINF:5.000000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/8e98fc5642036d2d.ts
<span class="token comment">#EXTINF:1.650000,</span>
https://video1.sycdn.imooc.com/64181742255ba95a4b010439/M/7054519648dd8429.ts
<span class="token comment">#EXT-X-ENDLIST</span></code></pre>

<p>我们下载其中的一个ts到本地尝试解密</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//video1.sycdn.imooc.com/64181742255ba95a4b010439/M/976c8113be2ab9a3.ts</span></span></code></pre>

<p>然后打断点获取十六进制密钥如下：</p>
<pre class="language-ini" data-language="ini"><code class="language-ini">4305C9CFE1DF99251CB0046C4DC9DF85</code></pre>

<p>创建一个m3u8文件，仅解密这一个ts文件</p>
<pre class="language-ini" data-language="ini"><code class="language-ini"><span class="token comment">#EXTM3U</span>
<span class="token comment">#EXT-X-VERSION:3</span>
<span class="token comment">#EXT-X-TARGETDURATION:5</span>
<span class="token comment">#EXT-X-MEDIA-SEQUENCE:0</span>
<span class="token comment">#EXT-X-KEY:METHOD=AES-128,URI="medium.key"</span>
<span class="token comment">#EXTINF:5.000000,</span>
976c8113be2ab9a3.ts
<span class="token comment">#EXT-X-ENDLIST</span></code></pre>

<p>创建一个key名字为medium.key,这里使用python进行写入，也可以使用winhex等工具</p>
<pre class="language-python" data-language="python"><code class="language-python">hex_data <span class="token operator">=</span> <span class="token string">"4305C9CFE1DF99251CB0046C4DC9DF85"</span>
binary_data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>hex_data<span class="token punctuation">)</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"medium.key"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>binary_data<span class="token punctuation">)</span>
<span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>将m3u8文件、key文件、ts文件放置同一目录下</p>
<p>自动解密</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ffmpeg <span class="token parameter variable">-allowed_extensions</span> ALL <span class="token parameter variable">-i</span> paylist.m3u8 <span class="token parameter variable">-c</span> copy output.mp4</code></pre>

]]></content>
      <tags>
        <tag>ffmpeg</tag>
        <tag>ts</tag>
        <tag>m3u8</tag>
      </tags>
  </entry>
  <entry>
    <title>无法找到java项目src下的properties配置文件</title>
    <url>/2021/04/15/%E6%97%A0%E6%B3%95%E6%89%BE%E5%88%B0java%E9%A1%B9%E7%9B%AEsrc%E4%B8%8B%E7%9A%84properties%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>新版的idea在新建Java Enterprise项目的时候会自动创建maven和一些文件夹，而一个干净的servlet项目是不需要额外的目录的，否则会导致配置或者路径找不到等问题</p>
<p>使用idea新版创建项目的时候是默认会帮我们配置maven的，对于初学servlet的来说这并不是我们想要的结果</p>
<span id="more"></span>

<p><img src="C:\notFoundProperties\javaEnterprise.png" alt="java enterprise" loading="lazy"></p>
<p>如果这时候在资源目录下properties文件的话使用类名.class.getclassloder().getresource()这样的方式要在里面放上外层的文件夹名才可以访问，所以我们使用另一种方法来创建servlet项目来保证我们的代码不会出现路径错误</p>
<p>首先创建一个普通的java项目</p>
<p><img src="C:\notFoundProperties\java.png" loading="lazy"></p>
<p>创建完后我们只需要在项目的文件夹上右键选择添加框架支持，然后选择第一个添加web应用程序即可</p>
<p><img src="C:\notFoundProperties\add.png" loading="lazy"></p>
<p><img src="C:\notFoundProperties\add2.png" loading="lazy"></p>
<p>添加完成后就会多一个web项目的文件夹</p>
<p>这时再将我们的properties放在src目录下就可以读取到了，lib目录要放在web目录下的WEB-INF目录下</p>
<p>以上就是解决servlet项目找不到properties的解决方案了</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>servlet</tag>
        <tag>properties</tag>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>本地docker离线搭建chatgpt无需api及外网</title>
    <url>/2023/06/29/%E6%9C%AC%E5%9C%B0docker%E7%A6%BB%E7%BA%BF%E6%90%AD%E5%BB%BAchatgpt%E6%97%A0%E9%9C%80api%E5%8F%8A%E5%A4%96%E7%BD%91/</url>
    <content><![CDATA[<p>前言：由于chagpt在国外导致经常需要使用梯子才可以访问，本次教程使用docker搭建本地容器，不需要api进行付费，只需要登陆一次账号获取token即可</p>
<span id="more"></span>

<h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>centos7服务器（或装有docker的其他服务器）、docker-compose、openai账号一个，临时梯子一个（需要登录一次openai获取token）</p>
<h2 id="2、拉取镜像"><a href="#2、拉取镜像" class="headerlink" title="2、拉取镜像"></a>2、拉取镜像</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull pengzhile/pandora</code></pre>

<h2 id="3、编辑docker-compose-yml并启动容器"><a href="#3、编辑docker-compose-yml并启动容器" class="headerlink" title="3、编辑docker-compose.yml并启动容器"></a>3、编辑docker-compose.yml并启动容器</h2><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">pandora</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> pengzhile/pandora
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> PANDORA_CLOUD=cloud
      <span class="token punctuation">-</span> PANDORA_SERVER=0.0.0.0<span class="token punctuation">:</span><span class="token number">8899</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 8899<span class="token punctuation">:</span><span class="token number">8899</span>
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always</code></pre>

<p>启动容器：<code>docker-compose up -d</code></p>
<h2 id="4、获取token"><a href="#4、获取token" class="headerlink" title="4、获取token"></a>4、获取token</h2><p>使用梯子登录chatgpt：<a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></p>
<p>登陆后使用浏览器访问链接获取token：<a href="http://chat.openai.com/api/auth/session">http://chat.openai.com/api/auth/session</a></p>
<p>复制access_token双引号中的所有内容</p>
<h2 id="5、访问本地chatgpt"><a href="#5、访问本地chatgpt" class="headerlink" title="5、访问本地chatgpt"></a>5、访问本地chatgpt</h2><p>我的centos服务器地址是：192.168.123.27  大家根据自己的地址访问</p>
<p>我的地址就访问: <a href="http://192.168.123.27:8899/">http://192.168.123.27:8899</a></p>
<p>点击最后一项 Continue with Access Token</p>
<p>然后输入我们刚刚获取的access_token即可</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>通过PKCE获取ChatGPT的AccessToken</title>
    <url>/2023/06/30/%E9%80%9A%E8%BF%87PKCE%E8%8E%B7%E5%8F%96ChatGPT%E7%9A%84AccessToken/</url>
    <content><![CDATA[<p>前言：今天看到知了出了一篇文章说有一个新的方法可以获取chatgpt的AccessToken，可能自己后面会用到所以转载一下，以下内容均来源于：<a href="https://zhile.io/2023/05/19/how-to-get-chatgpt-access-token-via-pkce.html">https://zhile.io/2023/05/19/how-to-get-chatgpt-access-token-via-pkce.html</a></p>
<span id="more"></span>

<p>借助今天OpenAI公布的iOS版本的ChaGPT，我们可以通过PKCE拿到AccessToken。<br>我先简单写一下，不懂的自己去查资料。</p>
<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;auth0.openai.com&#x2F;authorize?client_id&#x3D;pdlLIX2Y72MIl2rhLhTE9VV9bN905kBh&amp;audience&#x3D;https%3A%2F%2Fapi.openai.com%2Fv1&amp;redirect_uri&#x3D;com.openai.chat%3A%2F%2Fauth0.openai.com%2Fios%2Fcom.openai.chat%2Fcallback&amp;scope&#x3D;openid%20email%20profile%20offline_access%20model.request%20model.read%20organization.read%20offline&amp;response_type&#x3D;code&amp;code_challenge&#x3D;w6n3Ix420Xhhu-Q5-mOOEyuPZmAsJHUbBpO8Ub7xBCY&amp;code_challenge_method&#x3D;S256</code></pre>

<p>我们看这个登录的链接，这就是一个标准的Oauth里登录链接。<strong>通过这个方法这里的scope是可以换的。</strong><br>上面的登录链接会直接使用你浏览器里已登录的账号，直接跳转。如果你希望每次都登录则使用这个地址：</p>
<pre class="language-none"><code class="language-none">https:&#x2F;&#x2F;auth0.openai.com&#x2F;authorize?client_id&#x3D;pdlLIX2Y72MIl2rhLhTE9VV9bN905kBh&amp;audience&#x3D;https%3A%2F%2Fapi.openai.com%2Fv1&amp;redirect_uri&#x3D;com.openai.chat%3A%2F%2Fauth0.openai.com%2Fios%2Fcom.openai.chat%2Fcallback&amp;scope&#x3D;openid%20email%20profile%20offline_access%20model.request%20model.read%20organization.read%20offline&amp;response_type&#x3D;code&amp;code_challenge&#x3D;w6n3Ix420Xhhu-Q5-mOOEyuPZmAsJHUbBpO8Ub7xBCY&amp;code_challenge_method&#x3D;S256&amp;prompt&#x3D;login</code></pre>

<p>其实很简单，就是加了个<code>prompt=login</code>参数。</p>
<p>链接里的<code>code_challenge</code>可以通过如下代码生成（这段代码GPT帮我写的，跟我说：谢谢OpenAI）：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> hashlib

<span class="token keyword">def</span> <span class="token function">generate_code_verifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 随机生成一个长度为 32 的 code_verifier</span>
    token <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>
    code_verifier <span class="token operator">=</span> base64<span class="token punctuation">.</span>urlsafe_b64encode<span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">b'='</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> code_verifier<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">generate_code_challenge</span><span class="token punctuation">(</span>code_verifier<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 对 code_verifier 进行哈希处理，然后再进行 base64url 编码，生成 code_challenge</span>
    m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">)</span>
    m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>code_verifier<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    code_challenge <span class="token operator">=</span> base64<span class="token punctuation">.</span>urlsafe_b64encode<span class="token punctuation">(</span>m<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">b'='</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> code_challenge<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

code_verifier <span class="token operator">=</span> generate_code_verifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
code_challenge <span class="token operator">=</span> generate_code_challenge<span class="token punctuation">(</span>code_verifier<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"code_verifier: "</span><span class="token punctuation">,</span> code_verifier<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"code_challenge: "</span><span class="token punctuation">,</span> code_challenge<span class="token punctuation">)</span></code></pre>

<p>对，就是用这里生成的<code>code_challenge</code>来替换链接里的，同时你需要记下这里的 <code>code_verifier</code>，后面要用。</p>
<p>我这里给一对例子，可以直接用：</p>
<pre class="language-none"><code class="language-none">code_verifier:  IkrrBD89CBmwwzM-csfBnWKLMan5uE7laCMd2YTcPWE
code_challenge:  t1RM5eR6dToh4VAe85qAf4ANdsnob6ANiuyl_z67mr4</code></pre>

<p>现在请求拼装好的链接，登录成功后会跳转到 <code>com.openai.chat://auth0.openai.com/ios/com.openai.chat/callback?code=dbzSm1K578wMZ26GXXUri18a5_e024Dew123kzuiZ_Kq9</code> 这里的code每次不同。</p>
<p>现在我们收集到这里的信息之后，<code>POST</code> 请求：<code>https://auth0.openai.com/oauth/token</code><br>请求内容为json</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">"com.openai.chat://auth0.openai.com/ios/com.openai.chat/callback"</span><span class="token punctuation">,</span>
    <span class="token property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"authorization_code"</span><span class="token punctuation">,</span>
    <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"pdlLIX2Y72MIl2rhLhTE9VV9bN905kBh"</span><span class="token punctuation">,</span>
    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token string">"替换成你拿到的code"</span><span class="token punctuation">,</span>
    <span class="token property">"code_verifier"</span><span class="token operator">:</span> <span class="token string">"替换成你前面生成的code_verifier"</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>请求了就能拿到 access token了，这个token可以使用ChatGPT。也可以在 <a href="https://github.com/pengzhile/pandora">Pandora</a> 中使用。</p>
<p>补一下<code>Refresh Token</code>的内容：<br>在我们上步骤<code>POST</code>拿到access token之后，同时也会拿到一个refresh token，这个是用来刷新access token的（反正看OAuth就懂了）。<br>我们可以这么使用：还是 <code>POST</code> 请求： <code>https://auth0.openai.com/oauth/token</code><br>请求内容为json</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"redirect_uri"</span><span class="token operator">:</span> <span class="token string">"com.openai.chat://auth0.openai.com/ios/com.openai.chat/callback"</span><span class="token punctuation">,</span>
    <span class="token property">"grant_type"</span><span class="token operator">:</span> <span class="token string">"refresh_token"</span><span class="token punctuation">,</span>
    <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"pdlLIX2Y72MIl2rhLhTE9VV9bN905kBh"</span><span class="token punctuation">,</span>
    <span class="token property">"refresh_token"</span><span class="token operator">:</span> <span class="token string">"上步获取的refresh token"</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>你可以看到这里请求，只需要refresh token就能刷新并获取到新的access token！所以你万万不可以泄露refresh token！！</strong></p>
<p>这里补充一下，如果泄露了refresh token，如何来吊销的方法（<strong>是吊销refresh token</strong>）：</p>
<p><code>POST</code> 请求：<code>https://auth0.openai.com/oauth/revoke</code><br>请求内容为json</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"client_id"</span><span class="token operator">:</span> <span class="token string">"pdlLIX2Y72MIl2rhLhTE9VV9bN905kBh"</span><span class="token punctuation">,</span>
    <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"要吊销的refresh token"</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>老毛子固件共享ss</title>
    <url>/2021/10/03/%E8%80%81%E6%AF%9B%E5%AD%90%E5%9B%BA%E4%BB%B6%E5%85%B1%E4%BA%ABss/</url>
    <content><![CDATA[<p>使用场景：使用路由器连接ss然后任意一台设备连接到路由器下都可以访问国外网站</p>
<p>首先我们这里使用到的是斐讯K2路由器，已经刷好老毛子固件，本来是想在openwrt固件里连接ss，但是发现斐讯k2刷了opwnwrt固件后内存只剩1.5M，而安装一个ss或者v2ray插件的空间则需要4M左右，所以只能放弃，网上也有其他的方式，这里我们直接使用老毛子固件自带的ss插件进行操作，这样我们只需要输入账号密码就可以了</p>
<p>首先我们保证路由器的上网功能是已经设置好的，并且可以访问外网，也就是设置一个宽带连接的事，这里应该不用我说，我们来设置ss</p>
<span id="more"></span>

<p>首先点击老毛子后台的ShadowSocks菜单</p>
<p><img src="C:\myImg\image-20211003172948073.png" alt="image-20211003172948073" loading="lazy"></p>
<p>然后我们可以导入一个单节点，也可以导入订阅，这里我们准备好一个可用的单节点进行尝试，导入完成后节点配置中会有一个节点</p>
<p><img src="C:\myImg\image-20211003173150774.png" alt="image-20211003173150774" loading="lazy"></p>
<p>导入完成可以看到这些参数都是自动填到里面的，我们可以不用改动，唯一需要改动的可以改一下节点名称，然后在当前使用服务器节点填上已经导入的节点的名称</p>
<p><img src="C:\myImg\image-20211003173254474.png" alt="image-20211003173254474" loading="lazy"></p>
<p>然后我们就可以看到最下面的参数已经全部填好了</p>
<p><img src="C:\myImg\image-20211003173359084.png" alt="image-20211003173359084" loading="lazy"></p>
<p>然后我们转到ss配置，填写以下信息，其他的不用填，因为都是自动填好的不用管</p>
<p><img src="C:\myImg\image-20211003173510025.png" alt="image-20211003173510025" loading="lazy"></p>
<p>然后把对应的开关打开，再应用页面设置就可以尝试访问谷歌看一下效果了</p>
]]></content>
      <tags>
        <tag>ss</tag>
      </tags>
  </entry>
</search>
